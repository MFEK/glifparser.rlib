window.SIDEBAR_ITEMS = {"enum":[["GlifOutlineType",""],["OutlineType",""],["PenOperations","Representation of glyph data as pen operations, rather than as [`Point`]’s."]],"mod":[["contour",""],["create",""],["skia",""]],"struct":[["GlifOutline",""]],"trait":[["FromKurbo","[`kurbo::BezPath`] to type (most useful for [`Outline`])"],["IntoGlifPoints",""],["IntoKurbo","Type (most useful on [`Outline`]) to [`kurbo::BezPath`]"],["IntoPenOperations",""],["QuadToCubic",""],["RefigurePointTypes","Only knocks out exactly equal floats. For colocated within see `MFEKmath::Fixup::assert_colocated_within`."],["Reverse","Reverse the logical (visual) order of Bézier splines in a contour, flipping handles as necessary, and taking into account open/closed state."],["RoundToInt","This trait is primarily intended for easing `.glif` equality testing internally by our test suite. It therefore doesn’t do any of the fancy things it could like change point types and assert handles as colocated. Consider `MFEKmath::Fixup`, [`RefigurePointTypes`], etc., not this. (…Or perhaps together?)"],["SplitPenOperations","Split a long vec of pen operations into constitutent contours."],["ToOutline",""]],"type":[["Contour",""],["GlifContour",""],["Outline",""],["PenOperationsContour","A list of pen operations that should contain one and only one contour."],["PenOperationsPath","A list of lists of pen operations creating an outline of [`Vec::len()`] contours."]]};