window.SIDEBAR_ITEMS = {"constant":[["EMPTY_IRECT",""],["MILESTONE",""]],"enum":[["AlphaType",""],["AutoCanvasRestore",""],["BlendMode",""],["BlendModeCoeff",""],["BlurStyle",""],["ClipOp",""],["CodecResult",""],["ColorChannel",""],["ColorType",""],["CoverageMode",""],["EncodedImageFormat",""],["EncodedOrigin","These values match the orientation www.exif.org/Exif2-2.PDF."],["FilterMode",""],["FontHinting",""],["MipmapMode",""],["PaintCap",""],["PaintJoin",""],["PaintStyle",""],["PathDirection",""],["PathFillType",""],["PathOp",""],["PathVerb",""],["PixelGeometry",""],["TextEncoding",""],["TileMode",""],["YUVColorSpace",""]],"fn":[["as_winding",""],["op",""],["pre_multiply_argb",""],["pre_multiply_color",""],["radians_to_degrees",""],["simplify",""],["swap_rb",""],["swap_rb_inplace",""],["tight_bounds",""]],"macro":[["native_transmutable","Macro to mark a Rust type as NativeTransmutable and test its layout."],["unsafe_send_sync","Macro that implements Send and Sync."],["variant_name","Macro that verifies a variant name at compile time."]],"mod":[["annotate",""],["blenders",""],["canvas",""],["codec",""],["color_filter",""],["color_filters",""],["color_matrix",""],["color_matrix_filter",""],["colors",""],["contour_measure",""],["corner_path_effect",""],["dash_path_effect",""],["discrete_path_effect",""],["document",""],["drawable",""],["encode",""],["font",""],["font_arguments",""],["font_metrics",""],["font_parameters",""],["font_style",""],["gradient_shader",""],["graphics",""],["high_contrast_config",""],["high_contrast_filter",""],["image",""],["image_filter",""],["image_filters",""],["line_2d_path_effect",""],["luma_color_filter",""],["matrix",""],["matrix_path_effect",""],["merge_path_effect",""],["named_transfer_fn",""],["overdraw_color_filter",""],["paint",""],["path",""],["path_1d_path_effect",""],["path_2d_path_effect",""],["path_effect",""],["path_measure",""],["path_types",""],["pdf",""],["perlin_noise_shader",""],["picture_recorder",""],["private",""],["region",""],["rrect",""],["runtime_effect",""],["sampling_options",""],["shader",""],["shader_mask_filter",""],["shaders",""],["stroke_and_fill_path_effect",""],["stroke_path_effect",""],["stroke_rec",""],["surface",""],["svg",""],["table_color_filter",""],["trim_path_effect",""],["typeface",""],["utils",""],["vertices",""],["wrapper",""],["yuva_info",""],["yuva_pixmap_info",""],["yuva_pixmaps",""]],"struct":[["Borrows",""],["Budgeted",""],["Canvas","[`Canvas`] provides an interface for drawing, and how the drawing is clipped and transformed. [`Canvas`] contains a stack of [`Matrix`] and clip values."],["Color",""],["Color4f",""],["ColorChannelFlag",""],["ColorSpacePrimaries",""],["ColorSpaceTransferFn",""],["CubicMap",""],["CubicResampler","Specify `b` and `c` (each between 0â€¦1) to create a shader that applies the corresponding cubic reconstruction filter to the image."],["DateTime",""],["Document",""],["FilterOptions",""],["FontArguments",""],["FontMetrics",""],["FontStyle",""],["FourByteTag",""],["HSV",""],["Handle","Wraps a native type that can be represented in Rust memory."],["HighContrastConfig",""],["IPoint",""],["IRect",""],["ISize",""],["IVector",""],["Iter",""],["M44",""],["Matrix",""],["OwnedCanvas","Represents a [`Canvas`] that is owned and dropped when it goes out of scope and is bound to the lifetime of some other value (an array of pixels for example)."],["PathSegmentMask",""],["Point",""],["Point3",""],["RCHandle","A wrapper type represented by a reference counted pointer to the native type."],["RGB",""],["RRect",""],["RSXform",""],["Rect",""],["RefHandle","A wrapper type that represents a native type with a pointer to the native object."],["SamplingOptions",""],["Sendable",""],["Size",""],["SurfaceProps",""],["SurfacePropsFlags",""],["TextBlobRun",""],["V2",""],["V3",""],["V4",""],["XYZD50Hash",""]],"trait":[["ConditionallySend",""],["Contains",""],["Flattenable",""],["NativeFlattenable",""],["Pixel","Implement this trait to use a pixel type in [`Handle<Pixmap>::pixels()`]."],["QuickReject",""],["RoundOut",""],["Scalar",""],["Scalars",""]],"type":[["BBHFactory",""],["BBoxHierarchy",""],["Bitmap","[`Bitmap`] describes a two-dimensional raster pixel array. [`Bitmap`] is built on [`ImageInfo`], containing integer width and height, [`ColorType`] and [`AlphaType`] describing the pixel format, and [`ColorSpace`] describing the range of colors. [`Bitmap`] points to [`PixelRef`], which describes the physical array of pixels. [`ImageInfo`] bounds may be located anywhere fully inside [PixelRef] bounds."],["Blender","Blender represents a custom blend function in the Skia pipeline. When an Blender is present in a paint, the [`BlendMode`] is ignored. A blender combines a source color (the result of our paint) and destination color (from the canvas) into a final color."],["Codec",""],["Color3f",""],["ColorFilter",""],["ColorInfo",""],["ColorMatrix",""],["ColorSpace",""],["ContourMeasure",""],["ContourMeasureIter",""],["Data",""],["DataTable",""],["DeferredDisplayList",""],["DeferredDisplayListRecorder",""],["Drawable",""],["Font",""],["FontMgr",""],["FontStyleSet",""],["GlyphId",""],["Image","[`Image`] describes a two dimensional array of pixels to draw. The pixels may be decoded in a raster bitmap, encoded in a [`Picture`] or compressed data stream, or located in GPU memory as a GPU texture."],["ImageFilter",""],["ImageGenerator",""],["ImageInfo",""],["MaskFilter","MaskFilter is the base class for object that perform transformations on the mask before drawing it. An example subclass is Blur."],["OpBuilder",""],["PMColor",""],["Paint",""],["Path",""],["PathBuilder",""],["PathEffect",""],["PathMeasure",""],["Picture",""],["PictureRecorder",""],["PixelRef",""],["Pixmap",""],["Region",""],["RuntimeEffect",""],["SamplingMode",""],["Shader",""],["StrokeRec",""],["Surface",""],["SurfaceCharacterization",""],["TextBlob",""],["TextBlobBuilder",""],["TextBlobIter",""],["Typeface",""],["Unichar",""],["Vector",""],["Vector3",""],["Vertices",""],["YUVAInfo","Specifies the structure of planes for a YUV image with optional alpha. The actual planar data is not part of this structure and depending on usage is in external textures or pixmaps."],["YUVAPixmapInfo","[YUVAInfo] combined with per-plane [ColorType]s and row bytes. Fully specifies the [Pixmap]`s for a YUVA image without the actual pixel memory and data."],["YUVAPixmaps","Helper to store [Pixmap] planes as described by a [YUVAPixmapInfo]. Can be responsible for allocating/freeing memory for pixmaps or use external memory."],["scalar",""]]};