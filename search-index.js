var searchIndex = JSON.parse('{\
"adler":{"doc":"Adler-32 checksum implementation.","t":[3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Adler32","adler32_slice","borrow","borrow_mut","checksum","clone","default","finish","fmt","from","from_checksum","into","new","try_from","try_into","type_id","write","write_slice"],"q":["adler","","","","","","","","","","","","","","","","",""],"d":["Adler-32 checksum calculator.","Calculates the Adler-32 checksum of a byte slice.","","","Returns the calculated checksum at this point in time.","","","","","Returns the argument unchanged.","Creates an <code>Adler32</code> instance from a precomputed Adler-32 …","Calls <code>U::from(self)</code>.","Creates a new Adler-32 instance with default state.","","","","","Adds <code>bytes</code> to the checksum calculation."],"i":[0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[],1],[[]],[[]],[2,1],[2,2],[[],2],[2,3],[[2,4],5],[[]],[1,2],[[]],[[],2],[[],6],[[],6],[[],7],[2],[2]],"p":[[15,"u32"],[3,"Adler32"],[15,"u64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"arrayvec":{"doc":"<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …","tn":["ArrayString","ArrayVec","CapacityError","Drain","IntoIter","as_mut","as_mut_ptr","as_mut_slice","as_mut_str","as_ptr","as_ref","as_ref","as_slice","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","drain","drop","drop","drop","element","eq","eq","eq","eq","eq","extend","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_byte_string","from_iter","from_str","ge","ge","ge","gt","gt","gt","hash","hash","insert","into","into","into","into","into","into_inner","into_inner_unchecked","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_full","is_full","le","le","le","len","len","lt","lt","lt","new","new","new","new_const","new_const","next","next","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop_at","provide","push","push","push_str","push_unchecked","remaining_capacity","remaining_capacity","remove","remove","retain","set_len","set_len","simplify","size_hint","size_hint","swap_pop","swap_remove","take","to_owned","to_owned","to_owned","to_owned","to_string","to_string","truncate","truncate","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push_str","type_id","type_id","type_id","type_id","type_id","write","write_char","write_str","zero_filled"],"q":["arrayvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A string with a fixed capacity.","A vector with a fixed capacity.","Error value indicating insufficient capacity","A draining iterator for <code>ArrayVec</code>.","By-value iterator for <code>ArrayVec</code>.","","Return a raw mutable pointer to the vector’s buffer.","Return a mutable slice containing all elements of the …","Return a mutable string slice of the whole <code>ArrayString</code>.","Return a raw pointer to the vector’s buffer.","","","Return a slice containing all elements of the vector.","Return a string slice of the whole <code>ArrayString</code>.","","","","","","","","","","","","","","Return the capacity of the <code>ArrayVec</code>.","Return the capacity of the <code>ArrayString</code>.","Remove all elements in the vector.","Make the string empty.","","","","","","","","","","","","","","Return an empty array","Return an empty <code>ArrayString</code>","","","","","Create a draining iterator that removes the specified …","","","","Extract the overflowing element","","","","","","Extend the <code>ArrayVec</code> with an iterator.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a <code>str</code>.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a byte string literal.","Create an <code>ArrayVec</code> from an iterator.","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner fixed size array, if it is full to its …","Return the inner fixed size array.","","","","","","Returns whether the <code>ArrayVec</code> is empty.","Returns whether the string is empty.","Return true if the <code>ArrayVec</code> is completely filled to its …","Return if the <code>ArrayString</code> is completely filled.","","","","Return the number of elements in the <code>ArrayVec</code>.","Return the length of the string.","","","","Create a new empty <code>ArrayVec</code>.","Create a new empty <code>ArrayString</code>.","Create a new <code>CapacityError</code> from <code>element</code>.","Create a new empty <code>ArrayVec</code> (const fn).","Create a new empty <code>ArrayString</code> (const fn).","","","","","","","","","Remove the last element in the vector and return it.","Removes the last character from the string and returns it.","Remove the element at <code>index</code> and shift down the following …","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","Push <code>element</code> to the end of the vector without checking the …","Returns the capacity left in the <code>ArrayVec</code>.","Returns the capacity left in the <code>ArrayString</code>.","Remove the element at <code>index</code> and shift down the following …","Removes a <code>char</code> from this <code>ArrayString</code> at a byte position …","Retains only the elements specified by the predicate.","Set the vector’s length without dropping or moving out …","Set the strings’s length.","Convert into a <code>CapacityError</code> that does not carry an …","","","Remove the element at <code>index</code> and swap the last element into …","Remove the element at <code>index</code> and swap the last element into …","Returns the ArrayVec, replacing the original with a new …","","","","","","","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>ArrayString</code> to the specified length.","Copy all elements from the slice and append to the <code>ArrayVec</code>…","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","","","","","","","","","Create a new <code>ArrayString</code> value fully filled with ASCII …"],"i":[0,0,0,0,0,1,1,1,2,1,1,2,1,2,1,1,5,10,2,2,7,1,1,5,10,2,7,1,2,1,2,1,5,2,7,1,2,1,5,2,7,1,2,7,1,2,1,2,1,2,1,1,5,10,7,1,1,2,2,7,1,1,1,5,2,2,7,7,1,1,5,10,2,2,7,2,1,2,1,2,2,1,2,2,1,2,1,1,5,10,2,7,1,1,1,1,1,5,10,1,2,1,2,1,2,2,1,2,1,2,2,1,2,7,1,2,5,10,5,10,1,2,2,7,1,2,1,7,1,2,2,1,1,2,1,2,1,1,2,7,5,10,1,1,1,1,5,2,7,2,7,1,2,1,1,1,5,10,2,2,2,7,1,1,5,10,2,7,1,2,2,1,5,10,2,7,1,2,2,2],"f":[0,0,0,0,0,[1],[1],[1],[2,3],[1],[1],[2,3],[1],[2,3],[1],[[]],[[]],[[]],[[]],[2,3],[[]],[[]],[1],[[]],[[]],[[]],[[]],[1,4],[2,4],[1],[2],[1,1],[5,5],[2,2],[[[7,[6]]],[[7,[6]]]],[[1,1]],[[2,2]],[[]],[[]],[[]],[[]],[[1,1],8],[[2,2],8],[[[7,[9]],7],8],[[],1],[[],2],[1],[2,3],[1],[2,3],[1,10],[1],[5],[10],[7],[1,11],[[1,1],11],[[2,3],11],[[2,2],11],[[[7,[12]],7],11],[[1,13]],[[[1,[14]]],15],[[1,16],17],[[5,16],17],[[2,16],17],[[2,16],17],[[7,16],17],[[7,16],17],[[]],[[],1],[[]],[[]],[[]],[3,[[18,[2,[7,[3]]]]]],[[]],[[],[[18,[2,19]]]],[13,1],[3,[[18,[2]]]],[[1,1],11],[[2,2],11],[[2,3],11],[[1,1],11],[[2,3],11],[[2,2],11],[1],[2],[[1,4]],[[]],[[]],[[]],[[]],[[]],[1,[[18,[1]]]],[1],[1],[1,5],[1],[[]],[[]],[1,11],[2,11],[1,11],[2,11],[[1,1],11],[[2,2],11],[[2,3],11],[1,4],[2,4],[[1,1],11],[[2,2],11],[[2,3],11],[[],1],[[],2],[[],7],[[],1],[[],2],[5,20],[10,20],[5,20],[10,20],[[1,1],[[20,[8]]]],[[2,3],[[20,[8]]]],[[2,2],[[20,[8]]]],[[[7,[21]],7],[[20,[8]]]],[1,20],[2,[[20,[22]]]],[[1,4],20],[23],[1],[[2,22]],[[2,3]],[1],[1,4],[2,4],[[1,4]],[[2,4],22],[1],[[1,4]],[[2,4]],[7,7],[5],[10],[[1,4],20],[[1,4]],[1,1],[[]],[[]],[[]],[[]],[[],24],[[],24],[[1,4]],[[2,4]],[1,[[18,[7]]]],[[],18],[[],[[18,[1]]]],[[],18],[[],18],[3,[[18,[2]]]],[25,[[18,[2]]]],[[],18],[[],18],[[1,4],[[18,[7]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[1,[[18,[7]]]],[[2,22],[[18,[[7,[22]]]]]],[[2,3],[[18,[[7,[3]]]]]],[[],26],[[],26],[[],26],[[],26],[[],26],[[[1,[14]]],[[15,[4]]]],[[2,22],17],[[2,3],17],[[],2]],"p":[[3,"ArrayVec"],[3,"ArrayString"],[15,"str"],[15,"usize"],[3,"IntoIter"],[8,"Clone"],[3,"CapacityError"],[4,"Ordering"],[8,"Ord"],[3,"Drain"],[15,"bool"],[8,"PartialEq"],[8,"IntoIterator"],[15,"u8"],[6,"Result"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"Utf8Error"],[4,"Option"],[8,"PartialOrd"],[15,"char"],[3,"Demand"],[3,"String"],[3,"Arguments"],[3,"TypeId"]]},\
"base64":{"doc":"Configs","t":[17,17,13,13,17,4,3,13,4,17,13,13,13,13,17,17,13,17,17,13,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,11,0,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BCRYPT","BINHEX","Bcrypt","BinHex","CRYPT","CharacterSet","Config","Crypt","DecodeError","IMAP_MUTF7","ImapMutf7","InvalidByte","InvalidLastSymbol","InvalidLength","STANDARD","STANDARD_NO_PAD","Standard","URL_SAFE","URL_SAFE_NO_PAD","UrlSafe","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode_allow_trailing_bits","decode_config","decode_config_buf","decode_config_slice","description","display","encode","encode_config","encode_config_buf","encode_config_slice","eq","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","pad","provide","read","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","0","0","1","1","Base64Display","borrow","borrow_mut","fmt","from","into","to_string","try_from","try_into","type_id","with_config","DecoderReader","borrow","borrow_mut","fmt","from","into","new","read","try_from","try_into","type_id","EncoderStringWriter","EncoderWriter","borrow","borrow","borrow_mut","borrow_mut","drop","finish","flush","flush","fmt","from","from","from","into","into","into_inner","new","new","try_from","try_from","try_into","try_into","type_id","type_id","write","write"],"q":["base64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","base64::DecodeError","","","","base64::display","","","","","","","","","","","base64::read","","","","","","","","","","","base64::write","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Bcrypt character set","BinHex character set","The bcrypt character set (uses …","The character set used in BinHex 4.0 files.","As per <code>crypt(3)</code> requirements","Available encoding character sets","Contains configuration parameters for base64 encoding","The <code>crypt(3)</code> character set (uses …","Errors that can occur while decoding.","IMAP modified UTF-7 requirements","The character set used in IMAP-modified UTF-7 (uses <code>+</code> and <code>,</code>…","An invalid byte was found in the input. The offset and …","The last non-padding input symbol’s encoded 6 bits have …","The length of the input is invalid. A typical cause of …","Standard character set with padding.","Standard character set without padding.","The standard character set (uses <code>+</code> and <code>/</code>).","URL-safe character set with padding","URL-safe character set without padding","The URL safe character set (uses <code>-</code> and <code>_</code>).","","","","","","","","","","","","","","Decode from string reference as octets. Returns a Result …","Sets whether to emit errors for nonzero trailing bits.","Decode from string reference as octets. Returns a Result …","Decode from string reference as octets. Writes into the …","Decode the input into the provided output slice.","","Enables base64’d output anywhere you might use a <code>Display</code> …","Encode arbitrary octets as base64. Returns a String. …","Encode arbitrary octets as base64. Returns a String.","Encode arbitrary octets as base64. Writes into the …","Encode arbitrary octets as base64. Writes into the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>Config</code>.","Sets whether to pad output with <code>=</code> characters.","","Implementations of <code>io::Read</code> to transparently decode base64.","","","","","","","","","","","","","","Implementations of <code>io::Write</code> to transparently handle …","","","","","A convenience wrapper for base64’ing bytes into a format …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Create a <code>Base64Display</code> with the provided config.","A <code>Read</code> implementation that decodes base64 data read from …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new decoder that will read from the provided …","Decode input from the wrapped reader.","","","","A <code>Write</code> implementation that base64-encodes data using the …","A <code>Write</code> implementation that base64 encodes data before …","","","","","","Encode all remaining buffered data and write it, including …","Because this is usually treated as OK to call multiple …","","","Returns the argument unchanged.","Create a EncoderStringWriter that will append to the …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Encode all remaining buffered data, including any trailing …","Create a new encoder that will write to the provided …","Create a EncoderStringWriter that will encode into a new …","","","","","","","Encode input and then write to the delegate writer.",""],"i":[0,0,4,4,0,0,0,4,0,0,4,1,1,1,0,0,4,0,0,4,1,4,5,1,4,5,1,1,4,5,1,4,5,0,5,0,0,0,1,0,0,0,0,0,1,1,1,4,5,1,4,5,1,4,5,5,5,1,0,1,4,5,1,1,4,5,1,4,5,1,4,5,0,26,27,26,27,0,18,18,18,18,18,18,18,18,18,18,0,21,21,21,21,21,21,21,21,21,21,0,0,24,25,24,25,24,24,24,25,24,24,25,25,24,25,25,24,25,24,25,24,25,24,25,24,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[1,1],[4,4],[5,5],[[]],[[]],[[]],[6,[[9,[[8,[7]],1]]]],[[5,10],5],[[6,5],[[9,[[8,[7]],1]]]],[[6,5,8],[[9,[1]]]],[[6,5],[[9,[11,1]]]],[1,12],0,[6,13],[[6,5],13],[[6,5,13]],[[6,5],11],[[1,1],10],[[1,14],15],[[1,14],15],[[4,14],15],[[5,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[4,10],5],[[5,10],5],[16],0,[[]],[[]],[[]],[[],13],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],17],[[],17],[[],17],0,0,0,0,0,0,[[]],[[]],[[18,14],[[9,[19]]]],[[]],[[]],[[],13],[[],9],[[],9],[[],17],[5,18],0,[[]],[[]],[[[21,[20]],14],15],[[]],[[]],[5,[[21,[20]]]],[[[21,[20]]],[[22,[11]]]],[[],9],[[],9],[[],17],0,0,[[]],[[]],[[]],[[]],[[[24,[23]]]],[[[24,[23]]],[[22,[23]]]],[[[24,[23]]],22],[[[25,[0]]],22],[[[24,[23]],14],15],[[]],0,[[]],[[]],[[]],0,[[23,5],[[24,[23]]]],[5,[[25,[13]]]],[[],9],[[],9],[[],9],[[],9],[[],17],[[],17],[[[24,[23]]],[[22,[11]]]],[[[25,[0]]],[[22,[11]]]]],"p":[[4,"DecodeError"],[8,"Error"],[4,"Option"],[4,"CharacterSet"],[3,"Config"],[8,"AsRef"],[15,"u8"],[3,"Vec"],[4,"Result"],[15,"bool"],[15,"usize"],[15,"str"],[3,"String"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"TypeId"],[3,"Base64Display"],[3,"Error"],[8,"Read"],[3,"DecoderReader"],[6,"Result"],[8,"Write"],[3,"EncoderWriter"],[3,"EncoderStringWriter"],[13,"InvalidByte"],[13,"InvalidLastSymbol"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"p":[]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between plain …","t":[13,8,2,8,16,18,18,8,13,8,4,8,13,13,8,8,8,0,11,11,5,5,5,5,5,5,5,0,11,11,11,11,11,11,5,5,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,5,5,5,5,5,11,5,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,8,5,5,5,5,5,5,5,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,5,5,5,16,8,4,13,13,11,11,5,5,5,5,5,11,11,11,11,11,11,11,5,5,11,11,10,5,11,11,5,5,5,5,5,11,5,5,11,5,11,12],"n":["AlignmentMismatch","AnyBitPattern","CheckedBitPattern","Contiguous","Int","MAX_VALUE","MIN_VALUE","NoUninit","OutputSliceWouldHaveSlop","Pod","PodCastError","PodInOption","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","ZeroableInOption","allocation","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","checked","clone","clone_into","eq","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","offset_of","peel","peel","peel_mut","peel_mut","peel_ref","peel_ref","peel_slice","peel_slice","peel_slice_mut","peel_slice_mut","pod_align_to","pod_align_to_mut","pod_read_unaligned","to_owned","to_string","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","wrap","wrap","wrap_mut","wrap_mut","wrap_ref","wrap_ref","wrap_slice","wrap_slice","wrap_slice_mut","wrap_slice_mut","zeroed","zeroed","TransparentWrapperAlloc","cast_arc","cast_box","cast_rc","cast_slice_arc","cast_slice_box","cast_slice_rc","cast_vec","peel_arc","peel_box","peel_rc","peel_vec","pod_collect_to_vec","try_cast_arc","try_cast_box","try_cast_rc","try_cast_slice_arc","try_cast_slice_box","try_cast_slice_rc","try_cast_vec","try_zeroed_box","try_zeroed_slice_box","try_zeroed_vec","wrap_arc","wrap_box","wrap_rc","wrap_vec","zeroed_box","zeroed_slice_box","zeroed_vec","Bits","CheckedBitPattern","CheckedCastError","InvalidBitPattern","PodCastError","borrow","borrow_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","clone_into","eq","fmt","fmt","from","from","from_bytes","from_bytes_mut","hash","into","is_valid_bit_pattern","pod_read_unaligned","to_owned","to_string","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","try_pod_read_unaligned","type_id","0"],"q":["bytemuck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytemuck::allocation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytemuck::checked","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytemuck::checked::CheckedCastError"],"d":["For this type of cast the alignments must be exactly the …","Marker trait for “plain old data” types that are valid …","","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this type.","The lower <em>inclusive</em> bound for valid instances of this type.","Marker trait for “plain old data” types with no uninit …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between <code>Pod</code> data …","Trait for types which are Pod when wrapped in Option.","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a higher …","A trait which indicates that a type is a …","Trait for types that can be safely created with <code>zeroed</code>.","Trait for types which are Zeroable when wrapped in Option.","Stuff to boost things in the <code>alloc</code> crate.","","","Re-interprets <code>&amp;T</code> as <code>&amp;[u8]</code>.","Re-interprets <code>&amp;mut T</code> as <code>&amp;mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","Checked versions of the casting functions exposed in crate …","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","Calls <code>U::from(self)</code>.","Perform the conversion from <code>C</code> into the underlying integral …","Perform the conversion from <code>C</code> into the underlying integral …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","Convert the wrapper type into the inner type.","Convert the wrapper type into the inner type.","Convert a mutable reference to the wrapper type into a …","Convert a mutable reference to the wrapper type into a …","Convert a reference to the wrapper type into a reference …","Convert a reference to the wrapper type into a reference …","Convert a slice to the wrapped type into a slice to the …","Convert a slice to the wrapped type into a slice to the …","Convert a mutable slice to the wrapped type into a mutable …","Convert a mutable slice to the wrapped type into a mutable …","As <code>align_to</code>, but safe because of the <code>Pod</code> bound.","As <code>align_to_mut</code>, but safe because of the <code>Pod</code> bound.","Reads the slice into a <code>T</code> value.","","","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","","Convert the inner type into the wrapper type.","Convert the inner type into the wrapper type.","Convert a mutable reference to the inner type into a …","Convert a mutable reference to the inner type into a …","Convert a reference to the inner type into a reference to …","Convert a reference to the inner type into a reference to …","Convert a slice to the inner type into a slice to the …","Convert a slice to the inner type into a slice to the …","Convert a mutable slice to the inner type into a mutable …","Convert a mutable slice to the inner type into a mutable …","Calls <code>zeroed</code>.","Calls <code>zeroed</code>.","An extension trait for <code>TransparentWrapper</code> and alloc types.","As <code>try_cast_arc</code>, but unwraps for you.","As <code>try_cast_box</code>, but unwraps for you.","As <code>try_cast_rc</code>, but unwraps for you.","As <code>try_cast_slice_arc</code>, but unwraps for you.","As <code>try_cast_slice_box</code>, but unwraps for you.","As <code>try_cast_slice_rc</code>, but unwraps for you.","As <code>try_cast_vec</code>, but unwraps for you.","Convert an <code>Arc</code> to the wrapper type into an <code>Arc</code> to the …","Convert a box to the wrapper type into a box to the inner …","Convert an <code>Rc</code> to the wrapper type into an <code>Rc</code> to the inner …","Convert a vec of the wrapper type into a vec of the inner …","This “collects” a slice of pod data into a vec of a …","Attempts to cast the content type of a <code>Arc</code>.","Attempts to cast the content type of a <code>Box</code>.","Attempts to cast the content type of a <code>Rc</code>.","Attempts to cast the content type of a <code>Arc&lt;[T]&gt;</code>.","Attempts to cast the content type of a <code>Box&lt;[T]&gt;</code>.","Attempts to cast the content type of a <code>Rc&lt;[T]&gt;</code>.","Attempts to cast the content type of a <code>Vec</code>.","Allocates a <code>Box&lt;T&gt;</code> with all of the contents being zeroed …","Allocates a <code>Box&lt;[T]&gt;</code> with all contents being zeroed out.","Allocates a <code>Vec&lt;T&gt;</code> of length and capacity exactly equal to …","Convert an <code>Arc</code> to the inner type into an <code>Arc</code> to the …","Convert a box to the inner type into a box to the wrapper …","Convert an <code>Rc</code> to the inner type into an <code>Rc</code> to the wrapper …","Convert a vec of the inner type into a vec of the wrapper …","As <code>try_zeroed_box</code>, but unwraps for you.","As <code>try_zeroed_slice_box</code>, but unwraps for you.","As <code>try_zeroed_vec</code> but unwraps for you","<code>Self</code> <em>must</em> have the same layout as the specified <code>Bits</code> …","A marker trait that allows types that have some invalid …","The things that can go wrong when casting between …","When casting to a <code>CheckedBitPattern</code> type, it is possible …","An error occurred during a true-[<code>Pod</code>] cast","","","Cast <code>T</code> into <code>U</code>","Cast <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Cast <code>&amp;T</code> into <code>&amp;U</code>.","Cast <code>&amp;[A]</code> into <code>&amp;[B]</code>.","Cast <code>&amp;mut [T]</code> into <code>&amp;mut [U]</code>.","","","","","","","Returns the argument unchanged.","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Calls <code>U::from(self)</code>.","If this function returns true, then it must be valid to …","Reads the slice into a <code>T</code> value.","","","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&amp;mut T</code> into <code>&amp;mut U</code>.","Try to convert a <code>&amp;T</code> into <code>&amp;U</code>.","Try to convert <code>&amp;[A]</code> into <code>&amp;[B]</code> (possibly with a change in …","Try to convert <code>&amp;mut [A]</code> into <code>&amp;mut [B]</code> (possibly with a …","","Re-interprets <code>&amp;[u8]</code> as <code>&amp;T</code>.","Re-interprets <code>&amp;mut [u8]</code> as <code>&amp;mut T</code>.","","Reads from the bytes as if they were a <code>T</code>.","",""],"i":[3,0,0,0,19,19,19,0,3,0,0,0,3,3,0,0,0,0,3,3,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,19,19,3,3,19,19,0,0,20,20,20,20,20,20,20,20,20,20,0,0,0,3,3,0,0,0,0,0,3,0,0,3,0,3,20,20,20,20,20,20,20,20,20,20,15,15,0,0,0,0,0,0,0,0,21,21,21,21,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,0,0,0,17,0,0,18,18,18,18,0,0,0,0,0,18,18,18,18,18,18,18,0,0,18,18,17,0,18,18,0,0,0,0,0,18,0,0,18,0,18,22],"fp":[[8,"NoUninit"],[8,"AnyBitPattern"],[4,"PodCastError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Arc"],[3,"Box"],[3,"Rc"],[3,"Vec"],[8,"Zeroable"],[15,"usize"],[8,"CheckedBitPattern"],[4,"CheckedCastError"],[8,"Contiguous"],[8,"TransparentWrapper"],[8,"TransparentWrapperAlloc"],[13,"PodCastError"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[6,4,8,6,4,6,6,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11],"n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_i8_into","read_i8_into","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_i8_into","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,24,1,2,24,1,2,24,24,24,24,24,1,2,24,1,2,24,1,2,24,1,2,1,2,1,2,1,2,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,24,25,25,25,25,25,25,24,25,25,24,24,25,25,1,2,24,25,25,1,2,24,25,25,1,2,24,25,25,1,2,25,25,24,24,25,25,1,2,24,25,25,1,2,25,25,24,24,25,25,1,2,24,25,25,1,2,25,25,24,25,25,1,2,24,25,25,1,2,1,2,1,2,1,2,1,2,26,26,24,24,26,26,24,24,26,26,24,24,26,26,24,24,26,26,24,26,26,24,24,26,26,24,26,26,24,24,26,26,24,26,26,24,26,26,24,24,26,26,1,2,24,1,2,24,26,26,1,2,24,1,2,26,26,24,24,26,26,1,2,24,1,2,26,26,24,24,26,26,1,2,24,1,2,26,26,24,26,26,1,2,24,26,26,1,2],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[[],1],[[],2],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[2],[[]],[[]],[[1,1],[[7,[3]]]],[[2,2],[[7,[3]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],8],[[],9],[[],9],[[]],[[],9],[[],9],[[]],[[],[[9,[10]]]],[[],[[9,[10]]]],[[],10],[[],9],[[],9],[[]],[[],9],[[],9],[[]],[[],[[9,[11]]]],[[],[[9,[11]]]],[[],11],[[],9],[[],9],[[]],[[],[[9,[12]]]],[[],[[9,[12]]]],[[],12],[[],9],[[],9],[[]],[[],[[9,[13]]]],[[],[[9,[13]]]],[[],13],[[],[[9,[13]]]],[[],[[9,[13]]]],[[],13],[[],9],[[],9],[[]],[[],[[9,[14]]]],[[],[[9,[14]]]],[[],14],[[],[[9,[14]]]],[[],[[9,[14]]]],[[],14],[[],9],[[],9],[[]],[[],[[9,[15]]]],[[],[[9,[15]]]],[[],9],[[],9],[16,[[9,[14]]]],[16,[[9,[14]]]],[16,14],[16,[[9,[11]]]],[16,[[9,[11]]]],[16,11],[[],17],[[],[[9,[17]]]],[[],[[9,[17]]]],[[],17],[[],17],[[]],[[],9],[[],9],[[]],[[]],[[],18],[[],[[9,[18]]]],[[],[[9,[18]]]],[[],18],[[],18],[[]],[[],9],[[],9],[[]],[[]],[[],[[9,[19]]]],[[],[[9,[19]]]],[[],19],[[],19],[[],[[9,[19]]]],[[],[[9,[19]]]],[[],19],[[],19],[[]],[[],9],[[],9],[[]],[[]],[[],[[9,[20]]]],[[],[[9,[20]]]],[[],20],[[],20],[[],[[9,[20]]]],[[],[[9,[20]]]],[[],20],[[],20],[[]],[[],9],[[],9],[[]],[[]],[[],[[9,[21]]]],[[],[[9,[21]]]],[16,20],[16,[[9,[20]]]],[16,[[9,[20]]]],[16,20],[16,20],[16,17],[16,[[9,[17]]]],[16,[[9,[17]]]],[16,17],[16,17],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[8,9],[8,9],[8],[[]],[10,9],[10,9],[10],[[]],[11,9],[11,9],[11],[[]],[12,9],[12,9],[12],[[]],[13,9],[13,9],[13],[13,9],[13,9],[13],[[]],[14,9],[14,9],[14],[14,9],[14,9],[14],[[]],[15,9],[15,9],[[]],[[14,16],9],[[14,16],9],[[14,16]],[[11,16],9],[[11,16],9],[[11,16]],[17],[17,9],[17,9],[17],[17],[[]],[[]],[[]],[18],[18,9],[18,9],[18],[18],[[]],[[]],[[]],[19,9],[19,9],[19],[19],[19,9],[19,9],[19],[19],[[]],[[]],[[]],[20,9],[20,9],[20],[20],[20,9],[20,9],[20],[20],[[]],[[]],[[]],[21,9],[21,9],[[20,16]],[[20,16],9],[[20,16],9],[[20,16]],[[20,16]],[[17,16]],[[17,16],9],[[17,16],9],[[17,16]],[[17,16]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"f32"],[6,"Result"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"usize"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[4,"Result"],[3,"TypeId"],[8,"ByteOrder"],[8,"ReadBytesExt"],[8,"WriteBytesExt"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"color_quant":{"doc":"Color quantization library","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["NeuQuant","borrow","borrow_mut","color_map_rgb","color_map_rgba","from","index_of","init","into","lookup","map_pixel","new","try_from","try_into","type_id"],"q":["color_quant","","","","","","","","","","","","","",""],"d":["","","","Returns the RGBA color map calculated from the sample.","Returns the RGBA color map calculated from the sample.","Returns the argument unchanged.","Finds the best-matching index in the color map.","Initializes the neuronal network and trains it with the …","Calls <code>U::from(self)</code>.","Lookup pixel values for color at <code>idx</code> in the colormap.","Maps the rgba-pixel in-place to the best-matching color in …","Creates a new neuronal network and trains it with the …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,[[3,[2]]]],[1,[[3,[2]]]],[[]],[1,4],[1],[[]],[[1,4],5],[1],[[6,4],1],[[],7],[[],7],[[],8]],"p":[[3,"NeuQuant"],[15,"u8"],[3,"Vec"],[15,"usize"],[4,"Option"],[15,"i32"],[4,"Result"],[3,"TypeId"]]},\
"convert_case":{"doc":"Converts to and from various cases.","t":[13,13,4,8,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11],"n":["Alternating","Camel","Case","Casing","Cobol","Flat","FromCasing","Kebab","Lower","Pascal","ScreamingSnake","Snake","Title","Toggle","Train","Upper","UpperCamel","UpperFlat","UpperSnake","all_cases","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","from_case","from_case","into","into","to_case","to_case","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["convert_case","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Alternating case strings are delimited by spaces.  …","Camel case strings are lowercase, but for every word …","Defines the type of casing a string can be.","Describes items that can be converted into a case.","Cobol case strings are delimited by hyphens <code>-</code> and are all …","Flat case strings are all lowercase, with no delimiter.  …","Holds information about parsing before converting into a …","Kebab case strings are delimited by hyphens <code>-</code> and are all …","Lowercase strings are delimited by spaces and all …","Pascal case strings are lowercase, but for every word the …","Screaming snake case is an alternative name for upper …","Snake case strings are delimited by underscores <code>_</code> and are …","Title case strings are delimited by spaces. Only the …","Toggle case strings are delimited by spaces.  All …","Train case strings are delimited by hyphens <code>-</code>.  All …","Uppercase strings are delimited by spaces and all …","Upper camel case is an alternative name for Pascal case.","Upper flat case strings are all uppercase, with no …","Upper snake case strings are delimited by underscores <code>_</code> …","Returns a vector with all case enum variants.  This was …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>FromCasing</code> struct, which saves information about …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","References <code>self</code> and converts to the given case.","","","","","","","",""],"i":[1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1,6,1,1,1,1,1,6,1,10,6,6,1,10,6,1,6,1,6,1,6,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[[]],[[]],[[]],[[]],[1,1],[[]],[[1,1],3],[[1,4],5],[[]],[[]],[1,6],[[6,1],6],[[]],[[]],[1,7],[[6,1],7],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"p":[[4,"Case"],[3,"Vec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"FromCasing"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Casing"]]},\
"crc32fast":{"doc":"Fast, SIMD-accelerated CRC32 (IEEE) checksum computation.","t":[3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11],"n":["Hasher","borrow","borrow_mut","clone","clone_into","combine","default","finalize","finish","fmt","from","hash","into","new","new_with_initial","new_with_initial_len","reset","to_owned","try_from","try_into","type_id","update","write"],"q":["crc32fast","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents an in-progress CRC32 computation.","","","","","Combine the hash state with the hash state for the …","","Finalize the hash state and return the computed CRC32 …","","","Returns the argument unchanged.","Computes the CRC32 hash of a byte slice.","Calls <code>U::from(self)</code>.","Create a new <code>Hasher</code>.","Create a new <code>Hasher</code> with an initial CRC32 state.","Create a new <code>Hasher</code> with an initial CRC32 state.","Reset the hash state.","","","","","Process the given byte slice and update the hash state.",""],"i":[0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[1,1]],[[],1],[1,2],[1,3],[[1,4],5],[[]],[[],2],[[]],[[],1],[2,1],[[2,3],1],[1],[[]],[[],6],[[],6],[[],7],[1],[1]],"p":[[3,"Hasher"],[15,"u32"],[15,"u64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"derivative":{"doc":"","t":[24],"n":["Derivative"],"q":["derivative"],"d":[""],"i":[0],"f":[0],"p":[]},\
"derive_more":{"doc":"<code>derive_more</code>","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":[4,2,13,2,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,12,12],"n":["Either","Left","Left","Right","Right","all","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","cause","clone","clone_from","clone_into","cmp","collect","consume","count","deref","deref_mut","description","either","either_into","either_with","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","find","find_map","flip","flush","fmt","fmt","fold","for_both","for_each","from","from","hash","into","into","into_future","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_left","map_right","next","next_back","nth","partial_cmp","partition","poll","position","provide","read","read_exact","read_line","read_to_end","read_to_string","read_until","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","seek","size_hint","source","to_owned","to_string","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right","write","write_all","write_fmt","0","0"],"q":["either","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","either::Either",""],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","","A value of type <code>L</code>.","","A value of type <code>R</code>.","","","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value","","","","",""],"i":[0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,32,33],"f":[0,0,0,0,0,[1,2],[1,2],[1,3],[1,4],[1,5],[1,6],[1],[1],[1,1],[[[7,[1]]],[[1,[7,7]]]],[[[7,[1]]],[[1,[7,7]]]],[1],[1,6],[1,1],[1,3],[1,4],[1,5],[1],[[]],[[]],[1,[[9,[8]]]],[[[1,[10,10]]],[[1,[10,10]]]],[[[1,[10,10]],[1,[10,10]]]],[[]],[[[1,[11,11]],1],12],[1],[[1,13]],[1,13],[1],[1],[1,3],[1],[1],[1],[[[1,[14,14]],1],2],[[1,3]],[[1,3]],[1],[[[1,[15,15]]],[[15,[1]]]],[1],[[[1,[9,9]]],[[9,[1]]]],[[[1,[15,15]]],[[15,[1]]]],[1],[1,16],[1,9],[1,9],[1,1],[1,16],[[1,17],18],[[[1,[19,19]],17],18],[1],0,[1],[[]],[15,1],[[[1,[20,20]]]],[1,15],[[]],[[]],[1],[[]],[1,1],[1,2],[1,2],[1,9],[1,9],[1,1],[1],[1],[1],[1,13],[1,1],[1,1],[1,1],[1,9],[1,9],[[1,13],9],[[[1,[21,21]],1],[[9,[12]]]],[1],[[[7,[1]],22],23],[1,[[9,[13]]]],[24],[1,[[16,[13]]]],[1,16],[[1,25],[[16,[13]]]],[[1,26],[[16,[13]]]],[[1,25],[[16,[13]]]],[[1,27,26],[[16,[13]]]],[1,9],[1],[1,9],[1,1],[1],[1],[1],[[1,28],[[16,[29]]]],[1],[1,[[9,[8]]]],[[]],[[],25],[[],15],[[],15],0,0,[[],30],[1],[1],[1,[[16,[13]]]],[1,16],[[1,31],16],0,0],"p":[[4,"Either"],[15,"bool"],[15,"str"],[3,"Path"],[3,"OsStr"],[3,"CStr"],[3,"Pin"],[8,"Error"],[4,"Option"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[15,"usize"],[8,"PartialEq"],[4,"Result"],[6,"Result"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Hash"],[8,"PartialOrd"],[3,"Context"],[4,"Poll"],[3,"Demand"],[3,"String"],[3,"Vec"],[15,"u8"],[4,"SeekFrom"],[15,"u64"],[3,"TypeId"],[3,"Arguments"],[13,"Left"],[13,"Right"]]},\
"flate2":{"doc":"A DEFLATE-based stream compression/decompression library","t":[13,3,3,3,3,3,3,3,3,13,13,4,4,13,3,3,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BufError","Compress","CompressError","Compression","Crc","CrcReader","CrcWriter","Decompress","DecompressError","Finish","Finish","FlushCompress","FlushDecompress","Full","GzBuilder","GzHeader","None","None","Ok","Partial","Status","StreamEnd","Sync","Sync","amount","best","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf_read","bufread","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","combine","comment","comment","compress","compress_vec","consume","crc","crc","decompress","decompress_vec","default","default","default","default","eq","eq","eq","eq","eq","extra","extra","fast","filename","filename","fill_buf","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_ref","get_ref","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","level","message","message","mtime","mtime","mtime_as_datetime","needs_dictionary","new","new","new","new","new","new","new","none","operating_system","operating_system","provide","provide","read","read","read","reset","reset","reset","reset","reset","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","total_in","total_in","total_out","total_out","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","write","write","write","DeflateDecoder","DeflateEncoder","GzDecoder","GzEncoder","MultiGzDecoder","ZlibDecoder","ZlibEncoder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","header","header","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","new","new","new","new","new","new","new","read","read","read","read","read","read","read","reset","reset","reset","reset","reset_data","total_in","total_in","total_in","total_in","total_out","total_out","total_out","total_out","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write","DeflateDecoder","DeflateEncoder","GzDecoder","GzEncoder","MultiGzDecoder","ZlibDecoder","ZlibEncoder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","flush","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","header","header","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","new","new","new","new","new","new","new","new_with_buf","new_with_buf","read","read","read","read","read","read","read","reset","reset","reset","reset","total_in","total_in","total_in","total_in","total_out","total_out","total_out","total_out","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write","write","DeflateDecoder","DeflateEncoder","GzDecoder","GzEncoder","ZlibDecoder","ZlibEncoder","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","drop","finish","finish","finish","finish","finish","finish","flush","flush","flush","flush","flush","flush","flush_finish","flush_finish","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","header","into","into","into","into","into","into","new","new","new","new","new","new","read","read","read","read","read","read","reset","reset","reset","reset","total_in","total_in","total_in","total_in","total_out","total_out","total_out","total_out","try_finish","try_finish","try_finish","try_finish","try_finish","try_finish","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write"],"q":["flateflate2::bufread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","flate2::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","flate2::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Indicates that forward progress is not possible due to …","Raw in-memory compression stream for blocks of data.","Error returned when a compression object is used …","When compressing data, the compression level can be …","The CRC calculated by a <code>CrcReader</code>.","A wrapper around a <code>Read</code> that calculates the CRC.","A wrapper around a <code>Write</code> that calculates the CRC.","Raw in-memory decompression stream for blocks of data.","Error returned when a decompression object finds that the …","Pending input is processed and pending output is flushed.","Pending input is processed and pending output is flushed.","Values which indicate the form of flushing to be used when …","Values which indicate the form of flushing to be used when …","All output is flushed as with <code>Flush::Sync</code> and the …","A builder structure to create a new gzip Encoder.","A structure representing the header of a gzip stream.","A typical parameter for passing to …","A typical parameter for passing to …","Indicates success.","All pending output is flushed to the output buffer, but …","Possible status results of compressing some data or …","Indicates that all input has been consumed and all output …","All pending output is flushed to the output buffer and the …","All pending output is flushed to the output buffer and the …","The number of bytes that have been used to calculate the …","Optimize for the size of data being encoded.","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume this builder, creating a reader encoder in the …","Types which operate over <code>BufRead</code> streams, both encoders …","","","","","","","","","","","Combine the CRC with the CRC for the subsequent block of …","Returns the <code>comment</code> field of this gzip stream’s header, …","Configure the <code>comment</code> field in the gzip header.","Compresses the input data into the output, consuming only …","Compresses the input data into the extra space of the …","","Get the Crc for this CrcReader.","Get the Crc for this CrcWriter.","Decompresses the input data into the output, consuming …","Decompresses the input data into the extra space in the …","","","","","","","","","","Returns the <code>extra</code> field of this gzip stream’s header, if …","Configure the <code>extra</code> field in the gzip header.","Optimize for the best speed of encoding.","Returns the <code>filename</code> field of this gzip stream’s header, …","Configure the <code>filename</code> field in the gzip header.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a mutable reference to the reader that is wrapped by …","Get a mutable reference to the writer that is wrapped by …","Get the reader that is wrapped by this CrcReader by …","Get the writer that is wrapped by this CrcWriter by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the reader that is wrapped by this CrcReader.","Get the writer that is wrapped by this CrcWriter.","Returns an integer representing the compression level, …","Retrieve the implementation’s message about why the …","Retrieve the implementation’s message about why the …","This gives the most recent modification time of the …","Configure the <code>mtime</code> field in the gzip header.","Returns the most recent modification time represented by a …","Indicates whether decompression failed due to requiring a …","Create a new CRC.","Create a new CrcReader.","Create a new CrcWriter.","Create a new blank builder with no header by default.","Creates a new object ready for compressing data that it’…","Creates a new object ready for decompressing data that it…","Creates a new description of the compression level with an …","No compression is to be performed, this may actually …","Returns the <code>operating_system</code> field of this gzip stream’s …","Configure the <code>operating_system</code> field in the gzip header.","","","Types which operate over <code>Read</code> streams, both encoders and …","","Consume this builder, creating a reader encoder in the …","Reset the CRC.","Reset the Crc in this CrcReader.","Reset the Crc in this CrcWriter.","Quickly resets this compressor without having to …","Performs the equivalent of replacing this decompression …","Returns the current crc32 checksum.","","","","","","","","Returns the total number of input bytes which have been …","Returns the total number of input bytes which have been …","Returns the total number of output bytes which have been …","Returns the total number of output bytes which have been …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the CRC with the bytes in <code>data</code>.","Types which operate over <code>Write</code> streams, both encoders and …","","Consume this builder, creating a writer encoder in the …","A DEFLATE decoder, or decompressor.","A DEFLATE encoder, or compressor.","A gzip streaming decoder","A gzip streaming encoder","A gzip streaming decoder that decodes all members of a …","A ZLIB decoder, or decompressor.","A ZLIB encoder, or compressor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying reader.","Acquires a mutable reference to the underlying stream.","Acquires a mutable reference to the underlying stream.","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying stream","Acquires a reference to the underlying reader","Acquires a reference to the underlying stream","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader","Acquires a reference to the underlying stream","Returns the header associated with this stream, if it was …","Returns the current header associated with this stream, if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this encoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Returns the underlying stream, consuming this encoder","Consumes this decoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Consumes this encoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Creates a new encoder which will read uncompressed data …","Creates a new decoder which will decompress data read from …","Creates a new encoder which will use the given compression …","Creates a new decoder from the given reader, immediately …","Creates a new decoder from the given reader, immediately …","Creates a new encoder which will read uncompressed data …","Creates a new decoder which will decompress data read from …","","","","","","","","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Resets the state of this decoder’s data","Returns the number of bytes that have been read into this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that have been read into this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","A DEFLATE decoder, or decompressor.","A DEFLATE encoder, or compressor.","A gzip streaming decoder","A gzip streaming encoder","A gzip streaming decoder that decodes all members of a …","A ZLIB decoder, or decompressor.","A ZLIB encoder, or compressor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying reader.","Acquires a mutable reference to the underlying stream.","Acquires a mutable reference to the underlying stream.","Acquires a mutable reference to the underlying stream","Acquires a mutable reference to the underlying stream","Acquires a reference to the underlying reader","Acquires a reference to the underlying stream","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader.","Acquires a reference to the underlying reader.","Acquires a reference to the underlying stream","Acquires a reference to the underlying stream","Returns the header associated with this stream, if it was …","Returns the current header associated with this stream, if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this encoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Returns the underlying stream, consuming this encoder","Consumes this decoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Consumes this encoder, returning the underlying reader.","Consumes this decoder, returning the underlying reader.","Creates a new encoder which will read uncompressed data …","Creates a new decoder which will decompress data read from …","Creates a new encoder which will use the given compression …","Creates a new decoder from the given reader, immediately …","Creates a new decoder from the given reader, immediately …","Creates a new encoder which will read uncompressed data …","Creates a new decoder which will decompress data read from …","Same as <code>new</code>, but the intermediate buffer for data is …","Same as <code>new</code>, but the intermediate buffer for data is …","","","","","","","","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Returns the number of bytes that have been read into this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that have been read into this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A DEFLATE decoder, or decompressor.","A DEFLATE encoder, or compressor.","A gzip streaming decoder","A gzip streaming encoder","A ZLIB decoder, or decompressor.","A ZLIB encoder, or compressor.","","","","","","","","","","","","","","Consumes this encoder, flushing the output stream.","Consumes this encoder, flushing the output stream.","Finish encoding this stream, returning the underlying …","Consumes this decoder, flushing the output stream.","Consumes this encoder, flushing the output stream.","Consumes this encoder, flushing the output stream.","","","","","","","Consumes this encoder, flushing the output stream.","Consumes this encoder, flushing the output stream.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a mutable reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Acquires a reference to the underlying writer.","Returns the header associated with this stream.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new encoder which will write compressed data to …","Creates a new decoder which will write uncompressed data …","Creates a new encoder which will use the given compression …","Creates a new decoder which will write uncompressed data …","Creates a new encoder which will write compressed data to …","Creates a new decoder which will write uncompressed data …","","","","","","","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Resets the state of this encoder entirely, swapping out …","Resets the state of this decoder entirely, swapping out …","Returns the number of bytes that have been written to this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that have been written to this …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","Returns the number of bytes that the compressor has …","Returns the number of bytes that the decompressor has …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","Attempt to finish this output stream, writing out final …","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[9,0,0,0,0,0,0,0,0,7,8,0,0,7,0,0,7,8,9,7,0,9,7,8,1,3,1,18,20,6,4,14,21,7,8,22,15,9,3,1,18,20,6,4,14,21,7,8,22,15,9,3,4,0,6,7,8,9,3,6,7,8,9,3,1,6,4,14,14,18,18,20,21,21,1,6,4,3,6,7,8,9,3,6,4,3,6,4,18,20,1,18,20,6,4,14,21,7,8,22,22,15,15,9,3,1,18,20,6,4,14,21,7,8,22,15,9,3,18,20,18,20,1,18,20,6,4,14,21,7,8,22,15,9,3,18,20,3,22,15,6,4,6,22,1,18,20,4,14,21,3,3,6,4,22,15,0,18,4,1,18,20,14,21,1,6,7,8,9,3,22,15,14,21,14,21,1,18,20,6,4,14,21,7,8,22,15,9,3,1,18,20,6,4,14,21,7,8,22,15,9,3,1,18,20,6,4,14,21,7,8,22,15,9,3,1,0,20,4,0,0,0,0,0,0,0,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,40,43,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,41,42,39,38,39,41,42,38,39,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,43,41,42,38,39,5,40,41,42,0,0,0,0,0,0,0,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,46,47,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,45,49,44,45,33,46,47,48,49,44,45,48,49,44,45,48,49,44,45,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,44,45,33,46,47,48,49,0,0,0,0,0,0,50,51,37,52,53,54,50,51,37,52,53,54,37,50,51,37,52,53,54,50,51,37,52,53,54,50,53,50,51,37,52,53,54,50,51,37,52,53,54,50,51,37,52,53,54,50,51,37,52,53,54,52,50,51,37,52,53,54,50,51,37,52,53,54,50,51,37,52,53,54,50,51,53,54,50,51,53,54,50,51,53,54,50,51,37,52,53,54,50,51,37,52,53,54,50,51,37,52,53,54,50,51,37,52,53,54,50,51,37,52,53,54],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,3],5],0,[6,6],[7,7],[8,8],[9,9],[3,3],[[]],[[]],[[]],[[]],[[]],[[1,1]],[6,10],[[4,[13,[[12,[11]]]]],4],[[14,7],[[16,[9,15]]]],[[14,12,7],[[16,[9,15]]]],[[[18,[17]],19]],[18,1],[20,1],[[21,8],[[16,[9,22]]]],[[21,12,8],[[16,[9,22]]]],[[],1],[[],6],[[],4],[[],3],[[6,6],23],[[7,7],23],[[8,8],23],[[9,9],23],[[3,3],23],[6,10],[[4,[13,[[12,[11]]]]],4],[[],3],[6,10],[[4,[13,[[12,[11]]]]],4],[[[18,[17]]],24],[[[20,[25]]],24],[[1,26],27],[[[18,[28]],26],27],[[[20,[28]],26],27],[[6,26],27],[[4,26],27],[[14,26],27],[[21,26],27],[[7,26],27],[[8,26],27],[[22,26],27],[[22,26],27],[[15,26],27],[[15,26],27],[[9,26],27],[[3,26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[20],[18],[20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[20],[3,2],[22,[[10,[29]]]],[15,[[10,[29]]]],[6,2],[[4,2],4],[6,[[10,[30]]]],[22,[[10,[2]]]],[[],1],[31,[[18,[31]]]],[25,[[20,[25]]]],[[],4],[[3,23],14],[23,21],[2,3],[[],3],[6,11],[[4,11],4],[32],[32],0,[[[18,[31]]],[[24,[19]]]],[[4,31,3],[[33,[31]]]],[1],[18],[20],[14],[[21,23]],[1,2],[[]],[[]],[[]],[[]],[[]],[[],34],[[],34],[14,35],[21,35],[14,35],[21,35],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[1],0,[[[20,[25]]],[[24,[19]]]],[[4,25,3],[[37,[25]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[[0,[17,25]]]]],24],[[[39,[[0,[17,25]]]]],24],[[[5,[[0,[17,25]]]]],24],[[[40,[[0,[17,25]]]]],24],[[[41,[[0,[17,25]]]]],24],[[[42,[[0,[17,25]]]]],24],[[[38,[28]],26],27],[[[39,[28]],26],27],[[[5,[28]],26],27],[[[40,[28]],26],27],[[[43,[28]],26],27],[[[41,[28]],26],27],[[[42,[28]],26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[39],[5],[40],[43],[41],[42],[38],[39],[5],[40],[43],[41],[42],[40,[[10,[6]]]],[43,[[10,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[39],[5],[40],[43],[41],[42],[[17,3],[[38,[17]]]],[17,[[39,[17]]]],[[17,3],[[5,[17]]]],[17,[[40,[17]]]],[17,[[43,[17]]]],[[17,3],[[41,[17]]]],[17,[[42,[17]]]],[[[38,[17]]],[[24,[19]]]],[[[39,[17]]],[[24,[19]]]],[[[5,[17]]],[[24,[19]]]],[[[40,[17]]],[[24,[19]]]],[[[43,[17]]],[[24,[19]]]],[[[41,[17]]],[[24,[19]]]],[[[42,[17]]],[[24,[19]]]],[38],[39],[41],[42],[39],[38,35],[39,35],[41,35],[42,35],[38,35],[39,35],[41,35],[42,35],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[[38,[[0,[17,25]]]]],[[24,[19]]]],[[[39,[[0,[17,25]]]]],[[24,[19]]]],[[[5,[[0,[17,25]]]]],[[24,[19]]]],[[[40,[[0,[17,25]]]]],[[24,[19]]]],[[[41,[[0,[17,25]]]]],[[24,[19]]]],[[[42,[[0,[17,25]]]]],[[24,[19]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[44,[[0,[31,25]]]]],24],[[[45,[[0,[31,25]]]]],24],[[[33,[[0,[31,25]]]]],24],[[[46,[[0,[31,25]]]]],24],[[[47,[[0,[31,25]]]]],24],[[[48,[[0,[31,25]]]]],24],[[[49,[[0,[31,25]]]]],24],[[[44,[28]],26],27],[[[45,[28]],26],27],[[[33,[28]],26],27],[[[46,[28]],26],27],[[[47,[28]],26],27],[[[48,[28]],26],27],[[[49,[28]],26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44],[45],[33],[46],[47],[48],[49],[44],[45],[33],[46],[47],[48],[49],[46,[[10,[6]]]],[47,[[10,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44],[45],[33],[46],[47],[48],[49],[[31,3],[[44,[31]]]],[31,[[45,[31]]]],[[31,3],[[33,[31]]]],[31,[[46,[31]]]],[31,[[47,[31]]]],[[31,3],[[48,[31]]]],[31,[[49,[31]]]],[[31,[12,[11]]],[[45,[31]]]],[[31,[12,[11]]],[[49,[31]]]],[[[44,[31]]],[[24,[19]]]],[[[45,[31]]],[[24,[19]]]],[[[33,[31]]],[[24,[19]]]],[[[46,[31]]],[[24,[19]]]],[[[47,[31]]],[[24,[19]]]],[[[48,[31]]],[[24,[19]]]],[[[49,[31]]],[[24,[19]]]],[44],[45],[48],[49],[44,35],[45,35],[48,35],[49,35],[44,35],[45,35],[48,35],[49,35],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[[44,[[0,[31,25]]]]],[[24,[19]]]],[[[45,[[0,[31,25]]]]],[[24,[19]]]],[[[33,[[0,[31,25]]]]],[[24,[19]]]],[[[46,[[0,[31,25]]]]],[[24,[19]]]],[[[47,[[0,[31,25]]]]],[[24,[19]]]],[[[48,[[0,[31,25]]]]],[[24,[19]]]],[[[49,[[0,[31,25]]]]],[[24,[19]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[37,[25]]]],[[[50,[25]]],[[24,[25]]]],[[[51,[25]]],[[24,[25]]]],[[[37,[25]]],[[24,[25]]]],[[[52,[25]]],[[24,[25]]]],[[[53,[25]]],[[24,[25]]]],[[[54,[25]]],[[24,[25]]]],[[[50,[25]]],24],[[[51,[25]]],24],[[[37,[25]]],24],[[[52,[25]]],24],[[[53,[25]]],24],[[[54,[25]]],24],[[[50,[25]]],[[24,[25]]]],[[[53,[25]]],[[24,[25]]]],[[[50,[[0,[28,25]]]],26],27],[[[51,[[0,[28,25]]]],26],27],[[[37,[[0,[28,25]]]],26],27],[[[52,[[0,[28,25]]]],26],27],[[[53,[[0,[28,25]]]],26],27],[[[54,[[0,[28,25]]]],26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[25]]]],[[[51,[25]]]],[[[37,[25]]]],[[[52,[25]]]],[[[53,[25]]]],[[[54,[25]]]],[[[50,[25]]]],[[[51,[25]]]],[[[37,[25]]]],[[[52,[25]]]],[[[53,[25]]]],[[[54,[25]]]],[[[52,[25]]],[[10,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,3],[[50,[25]]]],[25,[[51,[25]]]],[[25,3],[[37,[25]]]],[25,[[52,[25]]]],[[25,3],[[53,[25]]]],[25,[[54,[25]]]],[[[50,[[0,[31,25]]]]],[[24,[19]]]],[[[51,[[0,[31,25]]]]],[[24,[19]]]],[[[37,[[0,[31,25]]]]],[[24,[19]]]],[[[52,[[0,[31,25]]]]],[[24,[19]]]],[[[53,[[0,[31,25]]]]],[[24,[19]]]],[[[54,[[0,[31,25]]]]],[[24,[19]]]],[[[50,[25]],25],[[24,[25]]]],[[[51,[25]],25],[[24,[25]]]],[[[53,[25]],25],[[24,[25]]]],[[[54,[25]],25],[[24,[25]]]],[[[50,[25]]],35],[[[51,[25]]],35],[[[53,[25]]],35],[[[54,[25]]],35],[[[50,[25]]],35],[[[51,[25]]],35],[[[53,[25]]],35],[[[54,[25]]],35],[[[50,[25]]],24],[[[51,[25]]],24],[[[37,[25]]],24],[[[52,[25]]],24],[[[53,[25]]],24],[[[54,[25]]],24],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[[50,[25]]],[[24,[19]]]],[[[51,[25]]],[[24,[19]]]],[[[37,[25]]],[[24,[19]]]],[[[52,[25]]],[[24,[19]]]],[[[53,[25]]],[[24,[19]]]],[[[54,[25]]],[[24,[19]]]]],"p":[[3,"Crc"],[15,"u32"],[3,"Compression"],[3,"GzBuilder"],[3,"GzEncoder"],[3,"GzHeader"],[4,"FlushCompress"],[4,"FlushDecompress"],[4,"Status"],[4,"Option"],[15,"u8"],[3,"Vec"],[8,"Into"],[3,"Compress"],[3,"CompressError"],[4,"Result"],[8,"BufRead"],[3,"CrcReader"],[15,"usize"],[3,"CrcWriter"],[3,"Decompress"],[3,"DecompressError"],[15,"bool"],[6,"Result"],[8,"Write"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"str"],[3,"SystemTime"],[8,"Read"],[3,"Demand"],[3,"GzEncoder"],[3,"String"],[15,"u64"],[3,"TypeId"],[3,"GzEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"MultiGzDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]},\
"flo_curves":{"doc":"flo_curves","t":[8,8,8,0,0,10,0,10,10,10,0,0,10,10,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,13,13,8,8,8,3,4,4,3,13,13,13,13,3,13,13,13,13,8,8,13,13,13,13,13,13,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,5,5,5,11,11,11,11,11,11,11,11,10,11,11,12,5,5,5,5,5,5,5,5,5,5,5,5,5,10,11,11,12,11,11,11,11,11,11,11,11,11,10,5,5,5,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,5,11,11,10,5,5,5,11,5,0,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,5,5,10,11,11,12,11,11,11,5,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,12,12,12,12,13,13,8,3,8,13,13,4,13,3,3,3,4,4,13,13,13,13,13,4,3,4,3,3,8,16,13,6,13,13,13,13,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,10,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,12,11,11,5,5,11,11,11,11,11,11,12,11,11,11,5,5,12,12,8,3,3,8,8,8,8,8,8,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,10,10,11,10,8,8,16,10,10,10,5,5,5,5,5,5,11,11,11,10,11,11,11,5,10],"n":["BezierCurve","BezierCurveFactory","Line","arc","bezier","control_points","debug","end_point","from_points","from_points","geo","line","points","start_point","Circle","CircularArc","arc","borrow","borrow","borrow_mut","borrow_mut","center","clone","clone","clone_into","clone_into","from","from","into","into","new","radius","to_bezier_curve","to_curves","to_owned","to_owned","to_path","try_from","try_from","try_into","try_into","type_id","type_id","Arch","Arch","BezierCurve","BezierCurve2D","BezierCurveFactory","Curve","CurveCategory","CurveFeatures","CurveSection","Cusp","Cusp","DoubleInflectionPoint","DoubleInflectionPoint","EvenWalkIterator","Linear","Linear","Loop","Loop","NormalCurve","Normalize","Parabolic","Parabolic","Point","Point","SingleInflectionPoint","SingleInflectionPoint","Tangent","basis","bezier_coefficients","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","bounding_box","bounding_box","bounding_box4","characteristics","characterize_cubic_bezier","characterize_curve","chord_length","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","control_points","control_points","control_points","control_points","control_polygon_length","curve_intersects_curve_clip","curve_intersects_line","curve_intersects_ray","curve_length","de_casteljau2","de_casteljau3","de_casteljau4","derivative2","derivative3","derivative4","distort_curve","distort_path","end_point","end_point","end_point","end_point","eq","eq","eq","estimate_length","estimate_length","estimate_length","fast_bounding_box","fast_bounding_box","fast_bounding_box","features","features_for_cubic_bezier","features_for_curve","find_extremities","find_extremities","find_extremities","find_extremities","find_self_intersection_point","fit_curve","fit_curve_cubic","fit_from_points","fit_from_points","fit_from_points","fmt","fmt","fmt","from","from","from","from","from","from","from","from_curve","from_curve","from_curve","from_points","from_points","get_bounding_box","into","into","into","into","into","into","into_iter","is_tiny","move_point","new","next","normal_at_pos","offset","offset_lms_sampling","offset_scaling","original_curve_t_values","overlapping_region","path","point_at_pos","point_at_pos","point_at_pos","point_at_pos","reverse","reverse","reverse","search_bounds4","search_with_bounds","search_with_bounds","search_with_bounds","section","section","section","section_t_for_original_t","solve_basis_for_t","solve_curve_for_t","solve_curve_for_t_along_axis","start_point","start_point","start_point","start_point","subdivide","subdivide","subdivide","subdivide4","subsection","t_for_point","t_for_point","t_for_point","t_for_t","tangent","tangent_at_pos","to_normal","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vary_by","walk_curve_evenly","walk_curve_unevenly","0","0","0","1","1","0","1","Add","Anticlockwise","BezierPath","BezierPathBuilder","BezierPathFactory","Clockwise","Collided","CollidedGraphPath","Exterior","GraphEdge","GraphEdgeRef","GraphPath","GraphPathEdgeKind","GraphRayCollision","Interior","Intersect","Intersection","Merged","Path","PathCombine","PathCut","PathDirection","PathIntersection","PathLabel","PathWithIsClockwise","PointIter","RemoveInteriorPoints","SimpleBezierPath","SingleEdge","Subtract","Uncategorised","Visited","algorithms","all_edge_refs","all_edges","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounding_box","bounding_box","bounding_box","build","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collide","collide_or_merge","combine_overlapping_points","control_points","curve_to","edge","edge_collision_count","edge_kind","edge_label","edge_refs_for_point","edges_for_point","end_point","end_point_index","eq","eq","eq","eq","exterior_path","exterior_paths","exterior_paths","fast_bounding_box","fast_bounding_box","fast_bounding_box","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","following_edge_ref","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_merged_paths","from_path","from_path","from_path","from_points","get_bounding_box","get_edge","hash","heal_exterior_gaps","interior_path","intersecting_path","into","into","into","into","into","into","into","into","into","into","into","into","is_clockwise","is_intersection","is_reversed","kind","label","line_to","merge","new","num_points","path_add","path_add_chain","path_bounding_box","path_combine","path_contains_point","path_cut","path_fast_bounding_box","path_full_intersect","path_intersect","path_intersects_line","path_intersects_path","path_intersects_ray","path_remove_interior_points","path_remove_overlapped_points","path_sub","path_to_curves","point_position","points","points_are_clockwise","ray_collisions","reset_edge_kinds","reverse_edges_for_point","reversed","reversed","reversed","round","self_collide","set_edge_kind","set_edge_kind_connected","set_edge_kinds_by_ray_casting","set_edge_label","set_exterior_by_adding","set_exterior_by_intersecting","set_exterior_by_removing_interior_points","set_exterior_by_subtracting","start","start_point","start_point","start_point_index","to_curves","to_curves","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","FillSettings","RayCollision","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","flood_fill_concave","flood_fill_convex","fmt","from","from","into","into","new","position","to_owned","to_owned","trace_outline_concave","trace_outline_convex","try_from","try_from","try_into","try_into","type_id","type_id","what","with_fit_error","with_min_gap","with_step","bezier_path_to_rust_definition","graph_path_svg_string","0","1","BoundingBox","Bounds","Coord2","Coordinate","Coordinate2D","Coordinate2DExt","Coordinate3D","CoordinateExt","Geo","HasBoundingBox","Point","add","borrow","borrow","borrow_mut","borrow_mut","bounds_for_points","bounds_for_points","clone","clone","clone_into","clone_into","coords","coords","distance_to","distance_to","distance_to","dot","dot","dot","empty","empty","eq","eq","fmt","fmt","from","from","from","from","from_biggest_components","from_biggest_components","from_components","from_components","from_min_max","from_min_max","from_smallest_components","from_smallest_components","get","get","get_bounding_box","get_bounding_box","into","into","into","into","is_empty","is_empty","is_nan","is_nan","is_near_to","is_near_to","len","len","magnitude","magnitude","max","max","min","min","mul","origin","origin","overlaps","overlaps","round","round","smooth","smooth","sub","sweep_against","sweep_self","to_owned","to_owned","to_unit_vector","to_unit_vector","try_from","try_from","try_into","try_into","type_id","type_id","union_bounds","union_bounds","unit_vector","unit_vector_at_angle","x","x","x","y","y","y","z","Line","Line2D","Point","coefficients","distance_to","from_points","line_clip_to_bounds","line_coefficients_2d","line_coefficients_2d_unnormalized","line_intersects_line","line_intersects_ray","line_to_bezier","point_at_pos","point_at_pos","point_at_pos","points","pos_for_point","pos_for_point","pos_for_point","ray_intersects_ray","which_side"],"q":["flo_curves","","","","","","","","","","","","","","flo_curves::arc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","flo_curves::bezierflo_curves::bezier::CurveFeatures","","","","","flo_curves::bezier::pathflo_curves::bezier::path::CollidedGraphPath","","flo_curves::bezier::path::GraphRayCollision","","flo_curves::bezier::path::PathCombine","","","","","flo_curves::bezier::path::algorithms","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","flo_curves::debug","","flo_curves::geo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","flo_curves::line","","","","","","","","","","","","","","","","","","","",""],"d":["Trait implemented by things representing a cubic bezier …","Trait implemented by bezier curves that can create new …","Represents a straight line","Describing circular arcs","Routines for describing, querying and manipulating Bezier …","The control points in this curve","","The end point of this curve","Creates a new bezier curve of the same type from some …","Creates a new line from points","Traits for basic geometric definitions","Manipulating and describing lines","Returns the two points that mark the start and end of this …","The start point of this curve","Represents a circle in 2 dimensions","Represents an arc of a circle in 2 dimensions","Returns an object representing an arc from this circle","","","","","The center of this circle","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new circle with a center and a radius","The radius of this circle","Converts this arc to a bezier curve","Returns a set of bezier curves that approximate this circle","","","Returns a path that approximates this circle","","","","","","","A simple curve that does not change direction or …","A simple curve that does not change direction or …","Trait implemented by things representing a cubic bezier …","Functions supported on 2D bezier curves","Trait implemented by bezier curves that can create new …","Represents a Bezier curve","Possible types of a two-dimensional cubic bezier curve","Describes the features of a two-dimensional cubic bezier …","Represents a subsection of a bezier curve","A curve with a cusp (an abrupt change in direction)","A curve with a cusp","A curve that changes direction twice","A curve that changes direction twice (and the t value …","Iterator implementation that performs an even walk along a …","The control points are in a line","The control points are in a line","A curve containing a loop","A curve containing a loop and the two t values where it …","Trait implemented by bezier curves where we can compute …","Changes a point and its tangent into a normal","A curve that can be represented as a quadratic curve …","A curve that can be represented as a quadratic curve …","The control points are all at the same position","All control points are in the same position","A curve that changes direction once","A curve that changes direction once (and the t value where …","A structure that can be used to compute the tangent of a …","The cubic bezier weighted basis function","Computes the bezier coefficients (A, B, C, D) for a bezier …","","","","","","","","","","","","","Computes the bounds of this bezier curve","Computes the bounds of this bezier curve","Computes the bounds of this bezier curve","Finds the upper and lower points in a cubic curve’s …","Finds the characteristics of this curve: for example if it …","Determines the characteristics of a particular bezier …","Discovers the ‘character’ of a particular bezier …","Returns the length of the chord of a bezier curve","","","","","","","","","The control points in this curve","","The control points in this curve","","Returns the length of the control polygon for a bezier …","Determines the points at which two curves intersect using …","Find the t values where a curve intersects a line","Find the t values where a curve intersects a ray","Estimates the length of a bezier curve within a particular …","de Casteljau’s algorithm for lines","de Casteljau’s algorithm for quadratic bezier curves","de Casteljau’s algorithm for cubic bezier curves","Returns the 3rd derivative of a cubic bezier curve (2nd of …","Returns the 1st derivative of a quadratic bezier curve (or …","Returns the 1st derivative of a cubic bezier curve","Distorts a curve using an arbitrary function","Distorts a path using an arbitrary function","The end point of this curve","","The end point of this curve","","","","","Attempts to estimate the length of this curve","Attempts to estimate the length of this curve","Attempts to estimate the length of this curve","Faster but less accurate bounding box for a curve","Faster but less accurate bounding box for a curve","Faster but less accurate bounding box for a curve","Finds the features of this curve (the characteristics and …","Determines the characteristics of a paritcular bezier …","Discovers what kind of features a curve has and where they …","Finds the t values of the extremities of a curve (these …","Finds the t values where this curve has extremities","Finds the t values where this curve has extremities","Finds the t values where this curve has extremities","If a cubic curve contains a loop, finds the t values where …","Creates a bezier curve that fits a set of points with a …","Fits a bezier curve to a subset of points","Generates a curve by attempting to find a best fit against …","Generates a curve by attempting to find a best fit against …","Generates a curve by attempting to find a best fit against …","","","","Returns the argument unchanged.","Creates a structure that can computes the tangents for a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new bezier curve of this type from an equivalent …","Creates a new bezier curve of this type from an equivalent …","Creates a new bezier curve of this type from an equivalent …","Creates a new bezier curve of the same type from some …","","Computes the bounds of this bezier curve","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if this section is so small as to represent a …","Moves the point at ‘t’ on the curve by the offset …","Creates a new curve section from a region of another …","","Computes the normal vector to the curve at the specified t …","Computes a series of curves that approximate an offset …","Produces an offset curve by performing a least-mean-square …","Computes a series of curves that approximate an offset …","Returns the original t values (t_min, t_max) that this …","If <code>curve2</code> overlaps <code>curve1</code>, returns two sets of <code>t</code> values …","Manipulates multiple Bezier curves joined into a path","Given a value t from 0 to 1, returns a point on this curve","Given a value t from 0 to 1, returns a point on this curve","Given a value t from 0 to 1, returns a point on this curve","Given a value t from 0 to 1, returns a point on this curve","Reverses the direction of this curve","Reverses the direction of this curve","Reverses the direction of this curve","Performs a subdivision search on a curve for a point …","Given a function that determines if a searched-for point …","Given a function that determines if a searched-for point …","Given a function that determines if a searched-for point …","Create a section from this curve. Consider calling …","Create a section from this curve. Consider calling …","Create a section from this curve. Consider calling …","Given a ‘t’ value on the original curve, returns the …","Solves for t in a single dimension for a bezier curve …","Given a point that is close to or on the specified bezier …","Searches along the x or y axis for a point within <code>accuracy</code> …","The start point of this curve","","The start point of this curve","","Given a value t from 0 to 1, finds a point on this curve …","Given a value t from 0 to 1, finds a point on this curve …","Given a value t from 0 to 1, finds a point on this curve …","Subdivides a cubic bezier curve at a particular point, …","Creates a sub-section from this curve section (dividing it …","Given a point that is on or very close to the curve, …","Given a point that is on or very close to the curve, …","Given a point that is on or very close to the curve, …","Returns the t value on the full curve for a t value on the …","Calculates the tangent at a particular point","Computes the tangent vector to the curve at the specified …","Computes the normal at a point, given its tangent","","","","","","","","","","","","","","","","","","","","","","","Changes this iterator into one that varies distance with …","Walks a bezier curve by moving forward a set amount at …","Walks a bezier curve by dividing it into a number of …","","","","","","","","Adds a series of paths","","Trait representing a path made out of bezier sections","Used to build a bezier path","Trait implemented by types that can construct new bezier …","","Some of the edges had collisions in them","Indicates the result of colliding two graph paths","An exterior edge","Represents an edge in a graph path","Reference to a graph edge","A graph path is a path where each point can have more than …","Kind of a graph path edge","Represents a collision between a ray and a GraphPath","An interior edge","Intersects a series a paths (with the first path)","Collision against an intersection point","None of the edges has collisions in them","Sets the result to a particular path","Description of an arithmetic operation to perform on a …","The result of a path cut operation","Winding direction of a particular path","The result of a path cut operation","Label attached to a path used for arithmetic","Trait implemented by paths that can determine if their …","Type of an iterator over the points in this curve. This …","Sets the result to a path with its interior points removed.","Basic Bezier path type","Collision against a single edge","Subtracts a series of paths (from the first path)","An edge that hasn’t been categorised yet","An edge that is uncategorised but has been visited","","Returns an iterator of all the edges in this graph, as …","Returns an iterator of all edges in this graph","","","","","","","","","","","","","","","","","","","","","","","","","Finds the bounds of this path","Finds the bounds of this path","Computes the bounds of this bezier curve","Builds the path for this builder","","","","","","","","","","","","","","","","","","","","","Collides this path against another, generating a merged …","Collides this path against another, generating a merged …","Finds any points that have approximately the same …","The control points in this curve","Adds a curve to a particular point","Returns the edge this collision is for","Computes the collision count for a point along an edge in …","Returns the type of the edge pointed to by an edgeref","Returns the label of the edge pointed to by an edgeref","Returns the edge refs for a particular point","Returns an iterator of the edges that leave a particular …","The end point of this curve","Returns the index of the end point of this edge","","","","","The path that was outside of the ‘cut’ path","Finds the exterior edges and turns them into a series of …","The path that was outside of the ‘cut’ path for the …","Finds a loose bounding box for this path (more quickly …","Finds a loose bounding box for this path (more quickly …","Faster but less accurate bounding box for a curve","","","","","","","","","","Given an edge ref, returns the edge ref that follows it","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new graph path by merging (not colliding) a set …","Creates a new instance of this path from the points in …","Creates a new instance of this path from the points in …","Creates a graph path from a bezier path","Creates a new instance of this path from a set of points","","Returns the GraphEdge for an edgeref","","Finds any gaps in the edges marked as exterior and …","The path that was inside the ‘cut’ path","The path that was intersecting between the two paths","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this path is ordered in a clockwise direction","Returns true if this collision is at an intersection","Returns true if this edge is going backwards around the …","Returns if this is an interior or an exterior edge in the …","The label attached to this edge","Adds a line to the specified point","Merges in another path","Creates a new graph path with no points","Returns the number of points in this graph. Points are …","Generates the path formed by adding two sets of paths","Adds multiple paths in a single operation","Finds the bounds of a path","Performs a series of path combining operations to generate …","Returns true if a particular point is within a bezier path","Cuts a path (<code>path1</code>) into two along another path (<code>path2</code>), …","Finds the bounds of a path using the looser ‘fast’ …","Intersects two paths, returning both the path that is the …","Generates the path formed by intersecting two sets of paths","Determines the intersections of a path and a line","Finds the points where a path intersects another path","Determines the intersections of a path and a ray.","Generates the path formed by removing any interior points …","Generates the path formed by removing any interior points …","Generates the path formed by subtracting two sets of paths","Converts a path to a series of bezier curves","Returns the position of a particular point","Retrieves an iterator over the points in this path","Determines if a set of points are in a clockwise ordering …","Finds all collisions between a ray and this path","Resets the edge kinds in this path by setting them all to …","Returns an iterator of the edges that arrive at a …","Creates a reversed version of this path","Creates a reversed version of this path","Creates a reversed version of this edge ref","Rounds all of the points in this path to a particular …","Finds any collisions between existing points in the graph …","Sets the kind of a single edge","Sets the kind of an edge and any connected edge where …","Sets the edge kinds by performing ray casting","Sets the label of a single edge","Given a labelled graph path, marks exterior edges by …","Given a labelled graph path, marks exterior edges by …","Given a path that intersects itself (ie, only contains …","Given a labelled graph path, marks exterior edges by …","Creates a new bezier path builder with the specified start …","Retrieves the initial point of this path","The start point of this curve","Returns the index of the start point of this edge","Changes this path into a set of bezier curves","Changes this path into a set of bezier curves","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Options that affect the fill algorithm","Represents a collision between a ray and an object","","","","","","","","","Creates the default set of fill options","","Creates a Bezier path by flood-filling a convex area whose …","Creates a Bezier path by flood-filling a convex area whose …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new collision at a specific point","Where this collision occurred","","","Traces the outline of a complex area using ray-casting","Given a ray-casting function, traces the outline of a …","","","","","","","The object that this ray colided with","Creates a new fill options from this one by setting the …","Sets the minimum gap size that a fill can ‘escape’ …","Creates a new fill options from this one by setting the …","Writes out a path as a Rust simple bezier path definition","Writes out the graph path as an SVG string","","","Trait implemented by things representing axis-aligned …","Type representing a bounding box","Represents a 2D point","Represents a value that can be used as a coordinate in a …","Represents a coordinate with a 2D position","Extra functions introduced for 2D coordinate types","Represents a coordinate with a 3D position","Extra functions provided for coordinate types","Simple base trait implemented by things representing …","Trait implemented by types that have a bounding box …","The type of a point in this geometry","","","","","","Returns a bounding box containing the specified points","Returns a bounding box containing the specified points","","","","","","","Computes the distance between this coordinate and another …","Computes the distance between this coordinate and another …","","Computes the dot product for this vector along with …","Computes the dot product for this vector along with …","","Returns an empty bounding box","Returns an empty bounding box","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a point made up of the biggest components of the …","","Creates a new coordinate from the specified set of …","","Returns a bounding box with the specified minimum and …","","Returns a point made up of the smallest components of the …","","Retrieves the component at the specified index","","Returns the bounding box that encloses this item","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","True if this bounding box is empty","True if this bounding box is empty","Returns true if this coordinate has a NaN component","Returns true if this coordinate has a NaN component","True if this point is within max_distance of another point","True if this point is within max_distance of another point","The number of components in this coordinate","","Computes the magnitude of this vector","Computes the magnitude of this vector","Returns the maximum point of this bounding box","","Returns the minimum point of this bounding box","","","Returns the origin coordinate","","Returns true if this bounding box overlaps another","Returns true if this bounding box overlaps another","Round this coordinate so that it is accurate to a certain …","Round this coordinate so that it is accurate to a certain …","Generates a smoothed version of a set of coordinates, …","Generates a smoothed version of a set of coordinates, …","","Sweeps two sets of objects to find the collisions between …","Sweeps a set of objects with bounding boxes to find the …","","","Treating this as a vector, returns a unit vector in the …","Treating this as a vector, returns a unit vector in the …","","","","","","","Creates the union of this and another bounding box","Creates the union of this and another bounding box","Creates a unit vector along the x axis","Creates a unit vector at an angle in radians measured from …","","","X component of this coordinate","","","Y component of this coordinate","","Represents a straight line","Trait implemented by a 2D line","","Returns the coefficients (a, b, c) for this line, such …","Returns the distance from a point to the closest point …","Creates a new line from points","Determines if a 2D line has intersected a bounding box …","For a two-dimensional line, computes the coefficients of …","For a two-dimensional line, computes the coefficients of …","Returns the point at which two lines intersect (if they …","Returns the point at which a line and a ray intersect (if …","Changes a line to a bezier curve","Given a value ‘t’ from 0 to 1, returns the point at …","Given a value ‘t’ from 0 to 1, returns the point at …","Given a value ‘t’ from 0 to 1, returns the point at …","Returns the two points that mark the start and end of this …","Given a point (assumed to be on the line), returns the ‘t…","Given a point (assumed to be on the line), returns the ‘t…","Given a point (assumed to be on the line), returns the ‘t…","Returns the point at which two rays intersect (if they …","Returns a value indicating which side of the line the …"],"i":[0,0,0,0,0,16,0,16,7,53,0,0,53,16,0,0,3,3,5,3,5,3,3,5,3,5,3,5,3,5,3,3,5,3,3,5,3,3,5,3,5,3,5,14,18,0,0,0,0,0,0,0,14,18,14,18,0,14,18,14,18,0,0,14,18,14,18,14,18,0,0,0,26,27,15,17,14,18,26,27,15,17,14,18,16,16,16,0,55,0,0,0,15,17,14,18,15,17,14,18,16,15,17,15,0,0,0,0,0,0,0,0,0,0,0,0,0,16,15,17,15,15,14,18,16,16,16,16,16,16,55,0,0,0,16,16,16,0,0,0,7,7,7,15,14,18,26,26,27,15,17,14,18,7,7,7,7,15,15,26,27,15,17,14,18,27,17,0,17,27,56,0,0,0,17,0,0,16,16,16,17,16,16,16,0,16,16,16,16,16,16,17,0,0,0,16,15,17,15,16,16,16,0,17,16,16,16,17,26,56,57,15,17,14,18,26,27,15,17,14,18,26,27,15,17,14,18,26,27,15,17,14,18,27,0,0,58,59,60,59,60,40,40,42,39,0,0,0,39,38,0,36,0,0,0,0,0,36,42,35,38,42,0,0,0,0,0,0,41,42,0,35,42,36,36,0,32,32,34,46,35,36,37,32,38,33,39,40,42,43,34,46,35,36,37,32,38,33,39,40,42,43,41,41,33,34,35,36,37,32,38,33,39,40,42,43,35,36,37,32,38,33,39,40,42,43,32,32,32,33,34,35,32,32,32,32,32,33,33,35,36,37,39,46,32,43,41,41,33,35,36,37,32,33,39,40,42,43,32,34,46,35,36,37,37,37,32,38,33,39,39,40,42,43,32,9,9,32,9,33,32,37,32,46,43,34,46,35,36,37,32,38,33,39,40,42,43,61,35,33,33,33,34,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,41,0,32,32,32,41,41,37,32,32,32,32,32,32,32,32,32,32,34,41,33,33,41,41,35,36,37,32,38,33,39,40,42,43,34,46,35,36,37,32,38,33,39,40,42,43,34,46,35,36,37,32,38,33,39,40,42,43,34,46,35,36,37,32,38,33,39,40,42,43,62,63,64,65,66,67,68,69,70,0,0,47,48,47,48,47,48,47,48,48,48,0,0,48,47,48,47,48,47,47,47,48,0,0,47,48,47,48,47,48,47,48,48,48,0,0,50,50,0,0,0,0,0,0,0,0,0,0,71,50,50,51,50,51,13,13,50,51,50,51,1,1,2,2,50,2,2,50,13,13,50,51,50,51,50,50,50,51,2,50,2,50,13,51,2,50,2,50,72,51,50,50,50,51,13,13,2,2,2,2,2,50,2,2,13,51,13,51,50,2,50,13,13,2,2,2,2,50,0,0,50,51,2,2,50,51,50,51,50,51,13,13,73,74,1,75,50,1,75,50,75,0,0,76,76,76,53,0,0,0,0,0,0,53,53,53,53,53,53,53,0,76],"f":[0,0,0,0,0,[[]],0,[[]],[[]],[[]],0,0,[[]],[[]],0,0,[[[3,[[0,[1,2]]]],4,4],[[5,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],0,[[[3,[[0,[6,1,2]]]]],[[3,[[0,[6,1,2]]]]]],[[[5,[[0,[6,1,2]]]]],[[5,[[0,[6,1,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[1,2]],4],[[3,[[0,[1,2]]]]]],0,[[[5,[[0,[1,2]]]]],7],[[[3,[[0,[1,2]]]]],[[8,[7]]]],[[]],[[]],[[[3,[[0,[1,2]]]]],9],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[4,2,2,2,2],2],[12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[2,2,2,2],13],[[],14],[[],14],[[],14],[[],4],[[[15,[[0,[6,2]]]]],[[15,[[0,[6,2]]]]]],[[[17,[[0,[6,16]]]]],[[17,[[0,[6,16]]]]]],[14,14],[18,18],[[]],[[]],[[]],[[]],[[]],[[[15,[2]]]],[[[17,[16]]]],0,[[],4],[4,19],[[],19],[[],19],[4,4],[[4,2,2],2],[[4,2,2,2],2],[[4,2,2,2,2],2],[[2,2],2],[[2,2,2]],[[2,2,2,2]],[[4,4],[[20,[8]]]],[[4,4],20],[[]],[[[15,[2]]],2],[[[17,[16]]]],0,[[[15,[[0,[21,2]]]],15],22],[[14,14],22],[[18,18],22],[[],4],[[],4],[[],4],[[],13],[[],13],[[],13],[4,18],[4,18],[4,18],[[2,2,2,2],[[8,[4]]]],[[],[[8,[4]]]],[[],[[8,[4]]]],[[],[[8,[4]]]],[4,20],[4,[[20,[[8,[[0,[7,16]]]]]]]],[4,[[8,[[0,[7,16]]]]]],[4,[[20,[8]]]],[4,[[20,[8]]]],[4,[[20,[8]]]],[[[15,[[0,[23,2]]]],24],25],[[14,24],25],[[18,24],25],[[]],[[],[[26,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],[[15,[2]]]],[[[15,[2]]],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[16]]],22],[4,7],[[4,4],[[17,[16]]]],[[[27,[16]]],20],[4],[[4,4],8],[[28,4],[[20,[8]]]],[[4,4],8],[[[17,[16]]]],[[],20],0,[4],[4],[4],[[[17,[16]],4]],[[],7],[[],7],[[],7],[4,[[8,[4]]]],[[4,29],[[8,[4]]]],[[4,29],[[8,[4]]]],[[4,29],[[8,[4]]]],[[4,4],17],[[4,4],17],[[4,4],17],[[[17,[16]],4],4],[[4,4,4,4,4],19],[[],[[20,[4]]]],[4,[[20,[4]]]],[[]],[[[15,[2]]],2],[[[17,[16]]]],0,[4],[4],[4],[[4,2,2,2,2]],[[[17,[16]],4,4],[[17,[16]]]],[[],[[20,[4]]]],[[],[[20,[4]]]],[[],[[20,[4]]]],[[[17,[16]],4],4],[[[26,[16]],4]],[4],[[],[[8,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[27,[16]],30],30],[[4,4],[[27,[16]]]],[12,30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[32,[[0,[2,1]],31]]],30],[[[32,[[0,[2,1]],31]]],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[[33,[2,31]]],13],[[[34,[9]]],9],[35,35],[36,36],[37,37],[[[32,[6,6]]],[[32,[6,6]]]],[[[38,[6,6]]],[[38,[6,6]]]],[[[33,[6,6]]],[[33,[6,6]]]],[39,39],[40,40],[[[42,[[0,[6,41]]]]],[[42,[[0,[6,41]]]]]],[[[43,[[0,[6,9]]]]],[[43,[[0,[6,9]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[32,[[0,[2,1]],31]],[32,[[0,[2,1]],31]],4],[[32,[[0,[2,1]],31]]]],[[[32,[[0,[2,1]],31]],[32,[[0,[2,1]],31]],4],[[38,[[0,[2,1]],31]]]],[[[32,[[0,[2,1]],31]],4],22],[[[33,[2,31]]]],[[[34,[9]]],[[34,[9]]]],[35,37],[[[32,[[0,[2,1]],40]],37,4],[[20,[44]]]],[[[32,[[0,[2,1]],31]],37],36],[[[32,[[0,[2,1]],31]],37],31],[[[32,[[0,[2,1]],31]],12],30],[[[32,[[0,[2,1]],31]],12],30],[[[33,[2,31]]]],[[[33,[31]]],12],[[35,35],22],[[36,36],22],[[37,37],22],[[39,39],22],0,[[[32,[[0,[2,1]],31]]],[[8,[9]]]],0,[[],13],[[],13],[[[33,[2,31]]],13],[[35,24],25],[[36,24],25],[[37,24],25],[[[32,[[0,[1,2,23]],31]],24],25],[[[33,[23,31]],24],25],[[39,24],25],[[40,24],25],[[[42,[[0,[23,41]]]],24],25],[[[43,[[0,[23,9]]]],24],25],[[[32,[[0,[2,1]]]],37],37],[[]],[[]],[[]],[[]],[[[33,[2,31]]],37],[[]],[33,37],[[]],[[]],[[]],[[]],[[],39],[[]],[[]],[[]],[45,[[32,[[0,[2,1]],31]]]],[[]],[[]],[31,[[32,[[0,[2,1]],31]]]],[45],[[[33,[2,31]]],13],[[[32,[[0,[2,1]],31]],37],[[33,[[0,[2,1]],31]]]],[37],[[[32,[[0,[2,1]],31]]],22],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[35,22],[[[33,[31]]],22],[[[33,[31]]],36],[[[33,[31]]],31],[[[34,[9]]],[[34,[9]]]],[[[32,[[0,[2,1]],31]],[32,[[0,[2,1]],31]]],[[32,[[0,[2,1]],31]]]],[[],[[32,[[0,[2,1]],31]]]],[[[32,[[0,[2,1]],31]]],12],[[8,8,4],[[8,[9]]]],[[8,4],[[8,[9]]]],[[],13],[[[42,[9]],4],[[8,[9]]]],[[],22],[[8,8,4],[[46,[9]]]],[[],13],[[8,8,4],[[43,[9]]]],[[8,8,4],[[8,[9]]]],[[],30],[4,8],[[],30],[[8,4],[[8,[9]]]],[[8,4],[[8,[9]]]],[[8,8,4],[[8,[9]]]],[[],30],[[[32,[[0,[2,1]],31]],12],[[0,[2,1]]]],[[]],[30,22],[[[32,[[0,[2,1]],31]]],8],[[[32,[[0,[2,1]],31]]]],[[[32,[[0,[2,1]],31]],12],30],[[],9],[[],9],[37,37],[[[32,[[0,[2,1]],31]],4]],[[[32,[[0,[2,1]],31]],4]],[[[32,[[0,[2,1]],31]],37,36]],[[[32,[[0,[2,1]],31]],37,36]],[[[32,[[0,[2,1]],40]],29]],[[[32,[[0,[2,1]],31]],37,31]],[[[32,[[0,[2,1]],40]]]],[[[32,[[0,[2,1]],40]]]],[[[32,[[0,[2,1]],40]]]],[[[32,[[0,[2,1]],40]]]],[[],[[34,[9]]]],[[]],[[[33,[2,31]]]],[[[33,[31]]],12],[[],[[8,[7]]]],[[],[[8,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[47,[6,6]]],[[47,[6,6]]]],[48,48],[[]],[[]],[[],48],[[48,48],22],[48,[[20,[8]]]],[48,20],[[48,24],25],[[]],[[]],[[]],[[]],[[],47],0,[[]],[[]],[48,[[8,[[47,[20]]]]]],[48,[[8,[47]]]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,[[48,4],48],[[48,[20,[4]]],48],[[48,4],48],[[],49],[[32,8],49],0,0,0,0,0,0,0,0,0,0,0,0,0,[[50,50],50],[[]],[[]],[[]],[[]],[45],[45],[50,50],[[[51,[[0,[6,2]]]]],[[51,[[0,[6,2]]]]]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[50,50],4],[[],4],[[],4],[[50,50],4],[[]],[[]],[[50,50],22],[[[51,[[0,[21,2]]]],51],22],[[50,24],25],[[[51,[[0,[23,2]]]],24],25],[[],50],[[],50],[[]],[[]],[[]],[[50,50],50],[[]],[[],50],[[]],[[],[[51,[2]]]],[[]],[[50,50],50],[12,4],[[50,12],4],[[],13],[[[51,[2]]],13],[[]],[50],[50],[[]],[[],22],[[],22],[[],22],[[],22],[4,22],[4,22],[[],12],[[],12],[[],4],[[],4],[[]],[[[51,[2]]]],[[]],[[[51,[2]]]],[[50,4],50],[[]],[[],50],[[],22],[[],22],[4],[4],[[],8],[[],8],[[50,50],50],[[],30],[[],30],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[]],[[]],[[]],[[[52,[4]]]],[[],4],[[],4],[50,4],[[],4],[[],4],[50,4],[[],4],0,0,0,[[]],[[],4],[[]],[[],[[20,[53]]]],[[]],[[]],[[],20],[[],20],[[],7],[4],[4],[4],[[]],[[],4],[[],4],[[],4],[[],20],[[],54]],"p":[[8,"Coordinate2D"],[8,"Coordinate"],[3,"Circle"],[15,"f64"],[3,"CircularArc"],[8,"Clone"],[8,"BezierCurveFactory"],[3,"Vec"],[8,"BezierPathFactory"],[4,"Result"],[3,"TypeId"],[15,"usize"],[8,"BoundingBox"],[4,"CurveCategory"],[3,"Curve"],[8,"BezierCurve"],[3,"CurveSection"],[4,"CurveFeatures"],[3,"SmallVec"],[4,"Option"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Tangent"],[3,"EvenWalkIterator"],[15,"u32"],[8,"Fn"],[8,"Iterator"],[8,"Copy"],[3,"GraphPath"],[3,"GraphEdge"],[3,"BezierPathBuilder"],[4,"GraphRayCollision"],[4,"GraphPathEdgeKind"],[3,"GraphEdgeRef"],[4,"CollidedGraphPath"],[4,"PathDirection"],[3,"PathLabel"],[8,"BezierPath"],[4,"PathCombine"],[3,"PathIntersection"],[15,"i64"],[8,"IntoIterator"],[3,"PathCut"],[3,"RayCollision"],[3,"FillSettings"],[3,"String"],[3,"Coord2"],[3,"Bounds"],[8,"Into"],[8,"Line"],[15,"i8"],[8,"BezierCurve2D"],[8,"NormalCurve"],[8,"Normalize"],[13,"SingleInflectionPoint"],[13,"DoubleInflectionPoint"],[13,"Loop"],[8,"PathWithIsClockwise"],[13,"Collided"],[13,"Merged"],[13,"SingleEdge"],[13,"Intersection"],[13,"Path"],[13,"RemoveInteriorPoints"],[13,"Add"],[13,"Subtract"],[13,"Intersect"],[8,"Geo"],[8,"HasBoundingBox"],[8,"CoordinateExt"],[8,"Coordinate2DExt"],[8,"Coordinate3D"],[8,"Line2D"]]},\
"float_cmp":{"doc":"float-cmp","t":[8,8,8,3,3,16,16,16,8,10,14,11,11,10,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,10,11,11,12,12,11,11],"n":["ApproxEq","ApproxEqRatio","ApproxEqUlps","F32Margin","F64Margin","Flt","Margin","U","Ulps","approx_eq","approx_eq","approx_eq_ratio","approx_eq_ratio","approx_eq_ulps","approx_ne","approx_ne","approx_ne_ratio","approx_ne_ratio","approx_ne_ulps","approx_ne_ulps","assert_approx_eq","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","epsilon","epsilon","epsilon","epsilon","fmt","fmt","from","from","from","from","into","into","next","prev","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ulps","ulps","ulps","ulps","ulps","zero","zero"],"q":["float_cmp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A trait for approximate equality comparisons.","ApproxEqRatio is a trait for approximate equality …","ApproxEqUlps is a trait for approximate equality …","This type defines a margin within two <code>f32</code> values might be …","This type defines a margin within two <code>f64</code> values might be …","","This type type defines a margin within which two values …","","","This method tests that the <code>self</code> and <code>other</code> values are equal …","","This method tests if <code>self</code> and <code>other</code> are nearly equal by …","This method tests if <code>self</code> and <code>other</code> are nearly equal by …","This method tests for <code>self</code> and <code>other</code> values to be …","This method tests that the <code>self</code> and <code>other</code> values are not …","This method tests that the <code>self</code> and <code>other</code> values are not …","This method tests if <code>self</code> and <code>other</code> are not nearly equal …","This method tests if <code>self</code> and <code>other</code> are not nearly equal …","This method tests for <code>self</code> and <code>other</code> values to be not …","This method tests for <code>self</code> and <code>other</code> values to be not …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The next representable number above this one","The previous representable number below this one","","","","","","","","","The number of representable values or ULPs (Units of Least …","","","","","",""],"i":[0,0,0,0,0,13,14,15,0,14,0,16,16,13,14,14,16,16,13,13,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,15,15,3,4,3,4,3,4,3,4,15,3,4,3,4,3,4],"f":[0,0,0,0,0,0,0,0,0,[1,2],0,[[],2],[[],2],[[],2],[1,2],[1,2],[[],2],[[],2],[[],2],[[],2],0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],3],[[],4],[[3,5],3],[[4,6],4],0,0,[[3,7],8],[[4,7],8],[[],3],[[]],[[]],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[]],[[3,11],3],[[4,12],4],0,0,[[],3],[[],4]],"p":[[8,"Into"],[15,"bool"],[3,"F32Margin"],[3,"F64Margin"],[15,"f32"],[15,"f64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[15,"i32"],[15,"i64"],[8,"ApproxEqUlps"],[8,"ApproxEq"],[8,"Ulps"],[8,"ApproxEqRatio"]]},\
"gif":{"doc":"GIF en- and decoding library Build Status","t":[12,12,13,3,13,13,13,4,13,13,4,13,13,13,13,13,3,4,3,4,3,4,3,4,4,13,4,4,13,13,13,3,13,13,13,13,13,13,13,13,3,18,13,13,13,4,13,13,13,3,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","0","Any","AnyExtension","Application","Background","BackgroundColor","Block","BlockFinished","BlockStart","ColorOutput","Comment","Control","Control","Data","DataEnd","DecodeOptions","Decoded","Decoder","DecodingError","DecodingFormatError","DisposalMethod","Encoder","EncodingError","Extension","Extension","ExtensionData","Extensions","Finite","Format","Format","Frame","Frame","GlobalPalette","Image","Indexed","Infinite","Io","Io","Keep","MemoryLimit","NONE","Nothing","Previous","RGBA","Repeat","Repetitions","Save","Skip","StreamingDecoder","SubBlockFinished","Text","Trailer","Trailer","V87a","V89a","Version","allow_unknown_blocks","bg_color","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_size","build","check_frame_consistency","check_lzw_end_code","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","current_frame","current_frame_mut","default","delay","dispose","drop","eq","eq","eq","eq","eq","eq","eq","fill_buffer","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_indexed_pixels","from_palette_pixels","from_rgb","from_rgb_speed","from_rgba","from_rgba_speed","from_u8","from_u8","from_u8","get_mut","get_ref","global_palette","hash","hash","height","height","height","interlaced","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_known","last_ext","left","line_length","needs_user_input","new","new","new","new","new_control_ext","next_frame_info","palette","palette","provide","provide","provide","read_info","read_into_buffer","read_next_frame","set_color_output","set_extensions","set_memory_limit","set_repeat","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","top","transparent","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","version","width","width","width","write_extension","write_frame","write_global_palette","write_raw_extension","0","0","0","0","0","0","0","1","1","0","0","0","0","0","delay","flags","trns","0"],"q":["gifgif::Decoded","","","","","","","","","gif::DecodingError","","gif::EncodingError","","gif::ExtensionData","","","","gif::Repeat"],"d":["","","StreamingDecoder is not required to take any action.","A newtype wrapper around an arbitrary extension ID.","Application extension.","Restore to background color.","Index of the background color in the global palette.","Known GIF block labels.","Decoded the last (or only) sub-block of a block.","The start of a block.","Output mode for the image data","Comment extension.","Control extension. Use <code>ExtensionData::new_control_ext</code> to …","Control extension.","Decoded some data of the current frame.","No more data available the current frame.","Options for opening a GIF decoder.","Indicates whether a certain object has been decoded","GIF decoder","Decoding error.","An error returned in the case of the image not being …","Disposal method","GIF encoder.","Encoding error.","Known GIF extension labels.","Extension block.","Extension data.","Configures how extensions should be handled","Finite number of repetitions","Returned if the image is found to be malformed.","Returned if the to image is not encodable as a gif.","A GIF frame","Decoded all information of the next frame.","Global palette.","Image block.","The decoder returns the raw indexed data.","Infinite number of repetitions","Wraps <code>std::io::Error</code>.","Wraps <code>std::io::Error</code>.","Do not dispose.","Memory limit in bytes. <code>MemoryLimit(0)</code> means that there is …","Enforce no memory limit.","Decoded nothing.","Restore to previous.","The decoder expands the image data to 32bit RGBA. This …","Number of repetitions","Sets the number of repetitions","Saves all extention data","Skips the data of unknown extensions and extracts the data …","GIF decoder which supports streaming","Decoded a sub-block. More sub-block are available.","Plain Text extension.","Image trailer.","Decoded the image trailer.","Version 87a, from May 1987.","Version 89a, from July 1989.","One version number of the GIF standard.","Configure if unknown blocks are allowed to be decoded.","Index of the background color in the global palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Buffer containing the image data. Only indices unless …","Output buffer size","Return a builder that allows configuring limits etc.","Configure if frames must be within the screen descriptor.","Configure if LZW encoded blocks must end with a marker end …","","","","","","","","","","","","","","","","","","","","","Current frame info as a ref.","Current frame info as a mutable ref.","","Frame delay in units of 10 ms.","Disposal method.","","","","","","","","","Reads data of the current frame into a pre-allocated …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a frame from indexed pixels in the global palette.","Creates a frame from a palette and indexed pixels.","Creates a frame from pixels in RGB format.","Creates a frame from pixels in RGB format.","Creates a frame from pixels in RGBA format.","Creates a frame from pixels in RGBA format.","Converts <code>u8</code> to <code>Option&lt;Self&gt;</code>","Converts <code>u8</code> to <code>Option&lt;Self&gt;</code>","Converts <code>u8</code> to a <code>Extension</code> if it is known.","Gets a mutable reference to the writer instance used by …","Gets a reference to the writer instance used by this …","The global color palette","","","Height of the image","Height of the image","Height of the frame.","True if the image is interlaced.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns writer instance used by this encoder","Decode the label as a known extension.","Returns the data of the last extension that has been …","Offset from the left border of the canvas.","Line length of the current frame","True if the frame needs user input to be displayed.","Creates a new streaming decoder","Create a new decoder with default options.","Creates a new encoder.","Creates a new decoder builder","Constructor for control extension data.","Returns the next frame info","Returns the color palette relevant for the current (next) …","Frame local color palette if available.","","","","Reads the logical screen descriptor including the global …","Reads the data of the current frame into a pre-allocated …","Reads the next frame from the image.","Configure how color data is decoded.","Configure whether extensions are saved or skipped.","Configure a memory limit for decoding.","Write an extension block that signals a repeat behaviour.","","","","","","","","","","","","","","","","","Offset from the top border of the canvas.","Transparent index (if available).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the internal state of the decoder. ","The version number of the GIF standard used in this image.","Width of the image","Width of the image","Width of the frame.","Writes an extension to the image.","Writes a frame to the image.","Writes the global color palette.","Writes a raw extension to the image.","","","","","","","","","","","","","","","Frame delay.","Flags.","Transparent index.",""],"i":[8,13,6,0,9,6,24,0,24,24,0,9,31,9,24,24,0,0,0,0,0,0,0,0,0,7,0,0,14,19,25,0,24,24,7,12,14,19,25,6,0,13,24,6,12,0,31,18,18,0,24,9,7,24,11,11,0,1,3,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,10,3,3,1,1,6,7,8,9,10,11,12,13,1,14,6,7,8,9,10,11,12,13,1,14,15,15,10,10,10,17,6,7,8,9,18,11,12,3,6,7,8,9,10,23,23,19,19,18,24,11,12,13,1,25,25,14,15,3,31,17,6,7,8,8,9,10,23,19,19,19,18,24,11,12,13,1,25,25,14,10,10,10,10,10,10,6,7,9,17,17,3,8,11,15,3,10,10,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,17,8,15,10,3,10,15,3,17,1,31,3,3,10,23,19,25,1,3,3,1,15,1,17,23,19,25,6,7,8,9,10,11,12,13,1,14,23,19,25,10,10,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,15,3,31,17,6,7,8,9,10,23,19,18,24,11,12,13,1,25,14,15,15,15,3,10,17,17,17,17,37,38,39,40,41,42,43,40,41,44,45,46,47,48,49,49,49,50],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[3,[[5,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,4],[[],1],[[1,2]],[[1,2]],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[1,1],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,10],[15,10],[[],10],0,0,[[[17,[16]]]],[[6,6],2],[[7,7],2],[[8,8],2],[[9,9],2],[[18,18],2],[[11,11],2],[[12,12],2],[3,[[20,[2,19]]]],[[6,21],22],[[7,21],22],[[8,21],22],[[9,21],22],[[10,21],22],[[23,21],22],[[23,21],22],[[19,21],22],[[19,21],22],[[18,21],22],[[24,21],22],[[11,21],22],[[12,21],22],[[13,21],22],[[1,21],22],[[25,21],22],[[25,21],22],[[14,21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,8],[[]],[[]],[[]],[26,19],[23,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,25],[[]],[[27,27,[5,[28]]],10],[[27,27,[5,[28]]],10],[[27,27],10],[[27,27,29],10],[[27,27],10],[[27,27,29],10],[28,[[5,[6]]]],[28,[[5,[7]]]],[28,[[5,[9]]]],[[[17,[16]]]],[[[17,[16]]]],[3,5],[8],[11],[15,27],[3,27],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[16]]],[[30,[16]]]],[8,[[5,[9]]]],[15],0,[3,4],0,[[],15],[[],[[20,[3,19]]]],[[16,27,27],[[20,[[17,[16]],25]]]],[[],1],[[27,6,2,[5,[28]]],31],[3,[[20,[[5,[10]],19]]]],[3,[[20,[19]]]],0,[32],[32],[32],[[1,33],[[20,[[3,[33]],19]]]],[3,[[20,[19]]]],[3,[[20,[[5,[10]],19]]]],[[1,12]],[[15,18]],[[1,13]],[[[17,[16]],14],[[20,[25]]]],[23,[[5,[34]]]],[19,[[5,[34]]]],[25,[[5,[34]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[],35],0,0,[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[15,[[20,[19]]]],[15,11],[15,27],[3,27],0,[[[17,[16]],31],[[20,[25]]]],[[[17,[16]],10],[[20,[25]]]],[[[17,[16]]],[[20,[[17,[16]],25]]]],[[[17,[16]],8],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"DecodeOptions"],[15,"bool"],[3,"Decoder"],[15,"usize"],[4,"Option"],[4,"DisposalMethod"],[4,"Block"],[3,"AnyExtension"],[4,"Extension"],[3,"Frame"],[4,"Version"],[4,"ColorOutput"],[3,"MemoryLimit"],[4,"Repeat"],[3,"StreamingDecoder"],[8,"Write"],[3,"Encoder"],[4,"Extensions"],[4,"DecodingError"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"DecodingFormatError"],[4,"Decoded"],[4,"EncodingError"],[3,"Error"],[15,"u16"],[15,"u8"],[15,"i32"],[6,"Result"],[4,"ExtensionData"],[3,"Demand"],[8,"Read"],[8,"Error"],[3,"String"],[3,"TypeId"],[13,"GlobalPalette"],[13,"BackgroundColor"],[13,"BlockStart"],[13,"SubBlockFinished"],[13,"BlockFinished"],[13,"Frame"],[13,"Data"],[13,"Format"],[13,"Io"],[13,"Format"],[13,"Io"],[13,"Repetitions"],[13,"Control"],[13,"Finite"]]},\
"glifparser":{"doc":"A parser and writer for UFO <code>.glif</code> files.","t":[2,2,8,2,2,2,2,2,13,2,2,2,2,2,2,2,2,2,13,4,8,2,2,2,2,2,2,2,8,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,2,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,10,2,11,10,11,12,12,3,4,13,8,3,13,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,3,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,3,8,3,3,3,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,6,4,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,8,8,4,13,13,2,13,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,11,10,12,11,11,12,11,11,12,0,10,11,12,5,11,11,12,12,12,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,12,12,5,5,0,10,11,12,12,13,4,13,13,4,13,13,3,3,13,13,3,4,13,4,2,4,13,3,3,6,3,13,13,13,13,13,13,3,13,4,4,4,4,13,13,13,13,13,13,13,13,13,3,3,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,12,12,12,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,12,12,12,12,17,3,8,8,11,11,11,11,12,11,11,11,11,11,11,12,11,10,12,12,12,11,11,11,11,11,11,10,10,11,11,11,11,11,12,8,6,6,8,16,8,10,10,10,10,10,2,13,13,2,13,3,13,4,8,8,13,13,2,13,8,8,4,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,12,12,12,12,12,12,12,3,3,12,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,13,13,13,4,4,13,13,3,3,4,3,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,18,18,3,18,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,8,10,13,6,13,13,13,8,6,3,4,8,8,8,13,13,13,13,6,4,16,4,6,6,13,8,13,13,8,8,8,13,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,10,11,11,11,11,0,10,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,8,4,16,16,8,13,8,8,8,13,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,10,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,5,5,8,8,8,6,6,6,3,3,8,8,8,8,11,11,11,11,12,12,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,10,10,11,11,11,11,10,11,11,13,13,13,4,13,4,4,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,8,3,4,8,3,13,13,13,18,13,3,8,8,4,13,13,8,13,4,18,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,12,12,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,12,12,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Anchor","CapType","Codepoint","Color","Component","ComponentRect","Contour","FlattenedGlif","Float","Glif","GlifComponent","GlifImage","GlifString","Guideline","GuidelinePoint","Handle","Image","ImageCodec","Integer","IntegerOrFloat","IsValid","JoinType","MFEKGlif","Outline","OutlineType","Pedantry","Point","PointData","PointLike","PointType","VWSContour","WhichHandle","abs","abs","abs_sub","abs_sub","acos","acos","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","anchor","approx_eq","asin","asin","asinh","asinh","atan","atan","atan2","atan2","atanh","atanh","borrow","borrow_mut","cbrt","cbrt","ceil","ceil","classify","clone","clone_into","color","component","contour","cos","cos","cosh","cosh","default","descendants","deserialize","display","div","div","div","div","div","div","div","div","div","div","div","div","div","epsilon","eq","error","exp","exp","exp2","exp2","exp_m1","exp_m1","floor","floor","fmt","fmt","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_str","from_str_radix","glif","guideline","hash","height","holding_float","holding_integer","hypot","hypot","image","infinity","integer_decode","into","is_finite","is_infinite","is_nan","is_normal","is_one","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_zero","ln","ln","ln_1p","ln_1p","log","log","log10","log10","log2","log2","matrix","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","nan","neg","neg_infinity","neg_zero","next","one","outline","partial_cmp","pedantry","point","postorder","postorder_with_size_hint","powf","powf","powi","powi","preorder","preorder_with_size_hint","prev","read","read_from_filename","read_from_filename_pedantic","read_pedantic","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","round","round","serialize","set_x","set_y","signum","signum","sin","sin","sin_cos","sin_cos","sinh","sinh","sqrt","sqrt","string","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","tan","tan","tanh","tanh","to_bits","to_degrees","to_i64","to_owned","to_radians","to_string","to_u64","trunc","trunc","try_from","try_from","try_into","type_id","ulps","unwrap_float","unwrap_integer","write","write_to_filename","x","xml","xml","y","zero","0","0","Anchor","AnchorType","Base","FromOption","GlifAnchor","Mark","atype","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class","class","clone","clone","clone","clone_into","clone_into","clone_into","data","default","default","default","descendants","descendants","descendants","deserialize","deserialize","deserialize","eq","eq","eq","equivalent","fmt","fmt","fmt","from","from","from","from","from_glif","from_option","height","height","height","into","into","into","is_base","is_mark","new","new","new","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap_base","unwrap_mark","x","x","xml","y","y","Color","a","as_plist_value","b","borrow","borrow_mut","clone","clone_into","default","descendants","deserialize","eq","fmt","from","from","from_rgba","from_str","g","height","into","into","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","r","serialize","to_owned","to_string","try_from","try_into","type_id","Component","ComponentRect","FlattenedGlif","Forest","GlifComponent","GlifComponents","Node","Tree","abandon","append","append","append","back","back","back_mut","back_mut","back_mut","base","bfs","bfs","bfs_children","bfs_children_mut","bfs_children_mut","bfs_mut","bfs_mut","bfs_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","data","data_mut","deep_clone","deep_clone_forest","default","default","default","default","default","default","degree","degree","deref","descendants","descendants","descendants","descendants","descendants","descendants","descendants","deserialize","deserialize","deserialize","deserialize","detach","div","div","div","div","div","div","div","div","div","div","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","filename","flattened","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_rect_and_name","from_tuple","from_tuple","front","front","front_mut","front_mut","front_mut","glif","has_no_child","has_no_child","hash","hash","hash","hash","height","height","height","height","height","height","height","identifier","insert_next_sib","insert_prev_sib","into","into","into","into","into","into","into","into_bfs","into_bfs","into_iter","into_iter","into_iter","iter","iter","iter_mut","iter_mut","iter_mut","matrix","matrix","maxx","maxy","minx","miny","name","ne","ne","ne","neg","neg","new","new","new","new","new","node_count","node_count","parent","partial_cmp","partial_cmp","partial_cmp","pop_back","pop_back","pop_back","pop_front","pop_front","pop_front","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","prepend","prepend","prepend","push_back","push_back","push_back","push_front","push_front","push_front","refers_to","root","root","root_mut","serialize","serialize","serialize","serialize","set_file_name","split","split","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_component","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec","xOffset","xScale","xml","xyScale","yOffset","yScale","yxScale","ColorNotRGBA","ContourLenOneUnexpected","ContourLenZeroUnexpected","ContourNoNext","ContourNoPrevious","GlifComponentsCyclical","GlifContourHasBadPointType","GlifFileIoError","GlifFilenameInsane","GlifFilenameNotSet","GlifInputError","GlifLibError","GlifNotUtf8","GlifOutlineHasBadPointType","GlifParserError","GlifParserResult","GlifStringConversionError","HasControlCharacter","ImageIoError","ImageNotDecodable","ImageNotLoaded","ImageNotPNG","LenZero","PedanticXmlParseError","PointIdxOutOfBounds","TypeConversionError","XmlParseError","XmlWriteError","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","descendants","descendants","fmt","fmt","fmt","fmt","from","from","from","from","from","from","height","height","into","into","mfek","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","provide","provide","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","ci","idx","len","pi","pi","ptype","ptype","req_type","req_variant","c","idx","MoreContoursThanOps","MoreLayersThanVecOps","MoreOpsThanContours","MoreVecOpsThanLayers","UpgradeContourOpsError","borrow","borrow_mut","clone","clone_into","descendants","deserialize","eq","fmt","fmt","from","height","into","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","provide","serialize","to_owned","to_string","try_from","try_into","type_id","FromXML","Glif","GlifLike","IntoXML","Lib","None","Plist","XMLConversion","Xml","advance_xml","anchors","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","components","default","default","descendants","descendants","deserialize","deserialize","eq","eq","filename","filename","filename","filename_is_sane","flattened","fmt","fmt","from","from","from","from","from_xml","guidelines","height","height","images","into","into","lib","mfek","name","name","name","name_to_filename","name_to_filename","new","note","order","outline","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","read","read_from_filename","read_from_filename_pedantic","read_pedantic","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unicode","width","write","write_to_filename","xml","xml","xml","0","0","Bevel","CapType","Circle","Circle","ContourOperations","Custom","DashAlongPath","DashContour","DashCull","Difference","Fixed","HistoryEntry","InterpolationType","Intersect","JoinType","Layer","LayerOperation","Linear","MFEKContour","MFEKGlif","MFEKOutline","MFEKPointData","Miter","Null","Off","Off","Off","On","PAPContour","PatternAlongPath","PatternCopies","PatternHandleDiscontinuity","PatternStretch","PatternSubdivide","Repeated","Round","Round","Simple","Single","Spacing","Split","Square","Union","VWSContour","VWSHandle","VariableWidthStroke","XOR","anchors","area_cutoff","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cap_end_type","cap_start_type","center_pattern","cleanly_downgradable","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","component_rects","components","contour_idx","copies","cull","dash_desc","default","default","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","downgrade","downgrade_contour_ops","downgrade_contour_ops","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","filename","filename","flattened","flattened","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","glyph","guidelines","guidelines","handles","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","history","include_last_path","inner","interpolation","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_vertical","join_type","layer","layer_idx","layers","left_offset","name","name","normal_offset","note","operation","order","paint_cap","paint_join","pattern","pattern_scale","point_idx","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","prevent_overdraw","remove_external","remove_internal","reverse_culling","reverse_path","right_offset","selected","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","simplify","spacing","stretch","stroke_width","subdivide","tangent_offset","tangent_offset","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_skia_paths","to_string","to_string","to_string","traits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_pass_culling","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","upgrade_contour_ops","upgrade_contour_ops","width","width","data","data","data","0","0","0","DEFAULT_LAYER_FORMAT_STR","Layer","ToLayerContentsPlist","ToLayerInfoPlist","borrow","borrow_mut","clone","clone_into","color","descendants","deserialize","eq","fmt","from","height","images","into","merge_layercontents_plists","name","operation","outline","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","serialize","to_glyphs_dir","to_layercontents_plist","to_layerinfo_plist","to_layerinfo_plist","to_owned","try_from","try_into","type_id","visible","DowngradeOutline","MFEKGlifContourOperations","MFEKOutlineContourOperations","ManageContourOperations","Output","UpgradeOutline","cleanly_downgradable","downgrade","downgrade_contour_ops","upgrade","upgrade_contour_ops","CData","CData","CannotParse","Comment","Comment","Element","Element","Error","FromXML","IntoXML","MalformedXml","ProcessingInstruction","Text","Text","TryIntoXML","XMLConversion","XMLNode","as_cdata","as_comment","as_element","as_mut_element","as_processing_instruction","as_text","attributes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","children","clone","clone","clone_into","clone_into","descendants","descendants","descendants","description","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_xml","from_xml_string","from_xml_string","from_xml_string","get_child","get_mut_child","get_text","height","height","height","into","into","into","into_xml","into_xml","into_xml","name","namespace","namespaces","new","parse","parse_all","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","prefix","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","provide","take_child","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_xml","type_id","type_id","type_id","write","write_with_config","xml","0","0","0","0","0","0","1","Guideline","GuidelinePoint","angle","as_plist_dict","at","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color","color","data","data","default","default","descendants","descendants","deserialize","deserialize","eq","eq","fmt","fmt","from","from","from_x_y_angle","height","height","identifier","identifier","into","into","into","name","name","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","xml","y","BMP","Bitmap","Data","DataLoadState","DataOrBitmap","Decoded","GIF","GlifImage","Image","ImageCodec","ImageData","JPEG","Loaded","LoadedDecodeFailed","NotTried","PNG","TIFF","TriedAndFailed","Unknown","WebP","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codec","color","color","data","data","data","decode","descendants","descendants","descendants","descendants","descendants","descendants","deserialize","eq","eq","eq","eq","eq","eq","filename","filename","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_filename","from_filename","guess_codec","height","height","height","height","height","height","identifier","into","into","into","into","into","into","load","matrix","matrix","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","serialize","set_matrix","state","to_image_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_xml","type_id","type_id","type_id","type_id","type_id","type_id","xOffset","xScale","xyScale","yOffset","yScale","yxScale","0","height","pixels","width","0","1","2","3","4","5","Affine","FLIP_X","FLIP_Y","GlifMatrix","IDENTITY","ToSkiaMatrix","as_coeffs","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","descendants","descendants","deserialize","determinant","eq","eq","fmt","fmt","from","from","from","height","height","into","into","into","inverse","is_finite","is_nan","map_unit_square","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","new","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","rotate","scale","scale_non_uniform","serialize","skia","to_owned","to_owned","to_skia_matrix","to_skia_matrix","transform_rect_bbox","translate","try_from","try_from","try_into","try_into","type_id","type_id","ToSkiaMatrix","to_skia_matrix","Close","Contour","Cubic","Cubic","CurveTo","FromKurbo","GlifContour","GlifOutline","GlifOutlineType","IntoGlifPoints","IntoKurbo","IntoPenOperations","LineTo","Mixed","MoveTo","OnlyCorners","Outline","OutlineType","Output","PenOperations","PenOperationsContour","PenOperationsPath","QuadTo","QuadToCubic","Quadratic","Quadratic","RefigurePointTypes","Reverse","RoundToInt","Spiro","SplitPenOperations","ToOutline","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_smooth","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","components","contour","contour_prev_next","contour_prev_next_handles","contours","create","default","default","default","default","deref","deref_mut","descendants","descendants","descendants","descendants","deserialize","deserialize","deserialize","eq","eq","eq","eq","equivalent","equivalent","figure_type","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_kurbo","from_kurbo","from_skia_path","from_skoutline","get_type","has_n_contours","has_n_contours","hash","hash","hash","height","height","height","height","into","into","into","into","into","into","into_glifpoints","into_glifpoints","into_kurbo","into_kurbo","into_kurbo_vec","into_kurbo_vec","into_kurbo_vec","into_pen_operations","into_pen_operations","into_xml","is_close","is_curve_to","is_line_to","is_move_to","is_open","is_point_smooth_within","is_quad_to","is_valid","is_valid","len","new","otype","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","quad_to_cubic","refigure_point_types","refigure_point_types","refigure_point_types","round_to_int","serialize","serialize","serialize","simplify","skia","split_pen_operations","split_pen_operations","to_outline","to_outline","to_owned","to_owned","to_owned","to_owned","to_reversed","to_reversed","to_reversed","to_skia_path","to_skia_paths","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap_close","unwrap_curve_to","unwrap_line_to","unwrap_move_to","unwrap_quad_to","upgrade","xml","xml","0","0","0","0","1","1","2","CheckSmooth","End","Error","Error","GenericPrevNext","Head","PrevNext","Reverse","State","Tail","borrow","borrow_mut","check_smooth","clone","clone_into","contour_prev_next","contour_prev_next_handles","descendants","eq","equivalent","fmt","from","hash","height","idx_at_start_or_end","idx_is_insane","idx_is_sane","idx_sane","idx_which_end","into","is_closed","is_open","is_point_smooth","is_point_smooth_within","next","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prev","prev_next","reverse","reverse","reverse","to_owned","to_reversed","try_from","try_into","type_id","cubic_outline","quadratic_outline","ConicsToCubics","FromSkOutline","FromSkiaPath","SkContour","SkOutline","SkPointTuple","SkiaPaths","SkiaPointTransforms","SplitSkiaPath","ToSkiaPath","ToSkiaPaths","TryIntoPointType","borrow","borrow","borrow_mut","borrow_mut","calc_x","calc_y","clone","clone","clone_into","clone_into","closed","combined","conics_to_cubics","conics_to_cubics","default","default","descendants","descendants","eq","from","from","from_skia_path","from_skoutline","height","height","into","into","into","new","open","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","split_skia_path","to_owned","to_owned","to_skia_path","to_skia_paths","try_from","try_from","try_into","try_into","try_into_pointtype","type_id","type_id","AdvanceWidth","Always","Anchor","FloatClass","GlifParser","Level","Mend","Never","OpenType","Pedantry","TrueType","Ufo","UfoSpecErrorsOnly","UfoSpecOutdatedOnly","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","descendants","descendants","descendants","descendants","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","height","height","height","height","into","into","into","into","is_advance_width","is_always","is_anchor","is_glif_parser","is_never","is_open_type","is_sfnt","is_true_type","is_ufo","is_ufo_spec_errors_only","is_ufo_spec_outdated_only","level","maybe_round","mend","new","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","should_mend","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap_advance_width","unwrap_always","unwrap_anchor","unwrap_glif_parser","unwrap_never","unwrap_open_type","unwrap_true_type","unwrap_ufo","unwrap_ufo_spec_errors_only","unwrap_ufo_spec_outdated_only","A","At","B","Colocated","Curve","FromKurboPoint","GlifPoint","Handle","IsValid","KurboPoint","Line","Move","Neither","ORIGIN","OffCurve","Point","PointData","PointLike","PointType","QClose","QCurve","ToKurboPoint","Undefined","WhichHandle","ZERO","a","add","add","add_assign","add_assign","apply_matrix","as_kpoint","as_kpoint","as_kpoint","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","default","default","default","default","default","default","descendants","descendants","descendants","descendants","descendants","descendants","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","distance","distance_squared","eq","eq","eq","eq","eq","eq","expand","expect_valid","expect_valid","expect_valid","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fields","from_handle","from_kurbo","from_kurbo","from_kurbo_offcurve","from_str","from_str","from_x_y_a_b_type","from_x_y_type","from_x_y_type","handle","handle_as_gpoint","handle_as_kpoint","handle_as_point","handle_or_colocated","hash","hash","hash","height","height","height","height","height","height","into","into","into","into","into","into","into","into","is_finite","is_nan","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid_oncurve","lerp","midpoint","name","name","name","new","new","new","opposite","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","ptype","ptype","round","round_to_int","round_to_int","serialize","serialize","serialize","serialize","serialize","serialize","set_handle","set_x","set_x","set_x","set_y","set_y","set_y","smooth","smooth","sub","sub","sub","sub_assign","sub_assign","to_kurbo","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_vec2","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","x","x","x","x","x","x","x32","x32","x32","x64","x64","x64","xml","y","y","y","y","y","y","y32","y32","y32","y64","y64","y64","0","1","GlifString","GlifStringLenOne","ToGlifString","as_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","descendants","descendants","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","from","from","from_str","height","height","into","into","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","serialize","serialize","to_glif_string","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["glifparserglifparser::IntegerOrFloat","","glifparser::anchor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::componentglifparser::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::error::GlifParserError","","","","","","","","","","","","","","","","","","","","glifparser::error::GlifStringConversionError","","glifparser::error::mfek","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif::Lib","","glifparser::glif::mfekglifparser::glif::mfek::ContourOperations","","","glifparser::glif::mfek::PatternCopies","glifparser::glif::mfek::PatternHandleDiscontinuity","glifparser::glif::mfek::PatternSubdivide","glifparser::glif::mfek::layer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif::mfek::traits","","","","","","","","","","","glifparser::glif::xml","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif::xml::Error","glifparser::glif::xml::XMLNode","","","","","","glifparser::guideline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::image::DataOrBitmap","","","","glifparser::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::matrix::skia","","glifparser::outlineglifparser::outline::PenOperations","","","","","","","glifparser::outline::contour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::outline::create","","glifparser::outline::skia","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::pedantry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::pointglifparser::point::Handle","","glifparser::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","A generic container for an “integer or a float”.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",".glif <code>&lt;anchor&gt;</code> + ufo2ft <code>_</code> mark/base determination","","","","","","","","","","","","","","","","","","","","","impl’s/struct for shared <code>&lt;image&gt;</code>/<code>&lt;guideline&gt;</code>/layer color …",".glif <code>&lt;component&gt;</code>","","","","","","","","","","","","","","","","","","","","","","","","","Provides main error type <code>GlifParserError</code> &amp; its impl’s","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","<code>Glif</code> (<code>&lt;glif&gt;</code> toplevel), read/write modules, + <code>Lib</code>",".glif <code>&lt;guideline&gt;</code>","","","","","","",".glif <code>&lt;image&gt;</code> w/ability to read to a bitmap if filename …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Shared behavior between <code>&lt;component&gt;</code>, <code>&lt;image&gt;</code> based on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",".glif <code>&lt;outline&gt;</code> and <code>&lt;contour&gt;</code>","","When reading .glif files, how strict ought we to be? Can …",".glif <code>&lt;point&gt;</code>","","","","","","note: powi always i32 regardless of i_iof","","","","Read UFO .glif XML to Glif struct. This should only be …","If you have a known filename, it is always preferable to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enforcers for UFO format string rules — no control …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Give back the float we’re holding…panic if we’re …","Give back the float we’re holding…panic if we’re …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a default value for this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","List of <code>Node</code>s as its children.","","","Composed of <code>data</code> and a list of its child <code>Node</code>s. Size …","Composed of a root <code>Node</code> and a list of its child <code>Node</code>s.","Removes and returns the given <code>Tree</code>’s children.","Adds all the forest’s trees at back of children list.","Add all the forest’s trees at back of children list","Adds all the forest’s trees at back of children list.","","Returns the last child of this node, or None if it has no …","Returns a mutable reference to the last child of this node,","Returns a mutable pointer to the last child of the forest, …","Returns a mutable pointer to the last child of this node, …","","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator in a breadth-first manner, …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reference of its associated data.","Mutable reeference of its associated data.","Clones the node deeply and creates a new tree.","Clones the node’s descendant nodes as a forest.","","","","","","","Returns the number of child nodes in <code>Forest</code>.","Returns the number of child nodes in <code>Node</code>.","","","","","","","","","","","","","The subtree departs from its parent and becomes an …","","","","","","","","","","","","","","","","","","","","","","","","Check that all components in your .glif file really …","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Constructs tree from tuple notations.","Construct forest from tuple notations.","Returns the first child of the forest, or <code>None</code> if it is …","Returns the first child of this node, or None if it has no …","Returns a mutable reference to the first child of this …","Returns a mutable pointer to the first child of the forest,","Returns a mutable pointer to the first child of this node, …","","Returns <code>true</code> if <code>Forest</code> is empty.","Returns <code>true</code> if <code>Node</code> has no child nodes.","","","","","","","","","","","","","Inserts sib tree after <code>self</code>. The newly inserted node will …","Inserts sib tree before <code>self</code>. The newly inserted node will …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Provides a forward iterator with owned data in a …","Provides a forward iterator with owned data in a …","","","","Provides a forward iterator over child <code>Node</code>s.","Provides a forward iterator over child <code>Node</code>s","Provides a forward iterator over child <code>Node</code>s with mutable …","Provides a forward iterator over child <code>Node</code>s with mutable …","Provides a forward iterator over child <code>Node</code>s with mutable …","","","","","","","","","","","","","Creates a <code>Tree</code> containing only root node associated with …","Makes an empty <code>Forest</code>.","","","","Returns the number of all child nodes in <code>Forest</code>.","Returns the number of all child nodes in <code>Node</code>, including …","Returns the parent node of this node, or None if it is the …","","","","Removes and returns the last child.","Remove and return the first child.","Removes and return the last child.","Removes and returns the first child.","Remove and return the first child.","Removes and return the first child.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds all the forest’s trees at front of children list.","Add all the forest’s trees at front of children list","Adds all the forest’s trees at front of children list.","Adds the tree as the last child.","Add the tree as the last child.","Adds the tree as the last child.","Adds the tree as the first child.","Add the tree as the first child.","Adds the tree as the first child.","","Reference of the root node.","","Mutable reference of the root node.","","","","","Sets the filename of a component relative to its base’s …","","","","","","","","","","","","","","","Must have filename set, and that file must be readable, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Color (for guidelines, images, etc) not RGBA","A requested point index is out of bounds","","No next on an open contour","No previous on an open contour.","Components of the glyph form a loop","","OS error when reading glif","Glif filename doesn’t match name in XML","Glif filename not set","The XML is valid, but doesn’t meet the UFO .glif spec",".glif has invalid ","Glif isn’t UTF8","Self-built Outline/Contour error.","","","","","OS error when reading image","Image not decodable","Image not yet read","Image not PNG","","The XML making up the glif is invalid","","Error for use by parse() trait (FromStr)","The XML making up the glif is invalid","Failures when writing glif XML","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A UFO .glif","","","","","","","This variant is highly undesirable to see as output and …","","","","","","","","","","","Note that these components are not yet parsed or checked …","","","","","","","","","","","It’s up to the API consumer to set this.","","Flatten a UFO .glif with components.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","",".glif guidelines. Note: glif may have more guidelines, not …","","","glifparser does support reading the data of images and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","glif private library","","","","","","","","This is an arbitrary glyph comment, exactly like the …","","","","","","","","","","","Read UFO .glif XML to Glif struct. This should only be …","If you have a known filename, it is always preferable to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is an intermediary form used in MFEKglif and other …","","","","","no splitting","no handling","no stretching","stretch the pattern","","","","","","","","","","split each curve at its midpoint","","stretch the spacing between the pattern","handle by splitting","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Note that these components are not yet parsed or checked …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","It’s up to the API consumer to set this.","Flatten a UFO .glif with components.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","This is an arbitrary glyph comment, exactly like the …reate UFO(3) specification layer layercontents.plist’s …","Create UFO(3) specification layer layerinfo.plist’s for …","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Safety","","","","","","","","","","Safety","Safety","","","","","","","","Vec (layers) → Vec (contours) → which may or may not …","","","","","","","Returns data receivable by <code>upgrade_contour_ops</code>","","Meant for cleanly re-adding previously culled ops","","","This library is unable to process this XML. This can occur …","","","Represents an XML element.","","Errors that can occur parsing XML","","","The XML is invalid","","","","","","","","","","","","","The Element attributes","","","","","","","","Children","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Find a child element with the given name and return a …","Find a child element with the given name and return a …","Returns the inner text/cdata of this element, if any.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The name of the Element.  Does not include any namespace …","This elements namespace, if any","The full list of namespaces, if any","Create a new empty element with given name","Parses some data into an Element","Parses some data into a list of <code>XMLNode</code>s","","","","","","","This elements prefix, if any","","","","","","","","Find a child element with the given name, remove and …","","","","","","","","","","","","","","Writes out this element as the root element in an new XML …","Writes out this element as the root element in a new XML …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","<code>pixels</code> always RGBA8888","","","","Image has been loaded and decoded to a bitmap","","","","","","","Image loaded from disk to data, but not yet decoded","Image loaded, but decoding it to a bitmap failed","Image loading hasn’t even been attempted yet","","","Image loading tried, but failed to read from disk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitmap is guaranteed to always be in RGBA8888 format. …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2D affine transform.","A transform that is flipped on the x-axis.","A transform that is flipped on the y-axis. Useful for …","","The identity transform.","","Get the coefficients of the transform.","","","","","","","","","","","","","","Compute the determinant of this transform.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Compute the inverse transform.","Is this map finite?","Is this map NaN?","Creates an affine transformation that takes the unit …","","","","","","","","","","","","","Construct an affine transform from coefficients.","","","","","","","","","An affine transform representing rotation.","An affine transform representing uniform scaling.","An affine transform representing non-uniform scaling with …","","","","","","","Compute the bounding box of a transformed rectangle.","An affine transform representing translation.","","","","","","","","","","","","","","<code>kurbo::BezPath</code> to type (most useful for <code>Outline</code>)","","","","","Type (most useful on <code>Outline</code>) to <code>kurbo::BezPath</code>","","","","Should always be used even if first point at <code>(0. , 0.)</code>.","","","","","Representation of glyph data as pen operations, rather …","A list of pen operations that should contain one and only …","A list of lists of pen operations creating an outline of …","","","","","Only knocks out <em>exactly equal</em> floats. For colocated within …","Reverse the logical (visual) order of Bézier splines in a …","This trait is primarily intended for easing <code>.glif</code> equality …","","Split a long vec of pen operations into constitutent …","","","","","","","","","","","","","","","","","","","","","","","","","By default, create a move_to to origin.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Implemented via <code>crate::outline::IntoPenOperations</code>.","Implemented via <code>crate::outline::IntoPenOperations</code>.","In case you want to use <code>PenOperations</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This validates the UFO <code>.glif</code> point <code>smooth</code> attribute.","","","","Generic prev/next given an index for <code>Vec&lt;T&gt;</code>.","","Return the previous and next index, given an index. As …","Reverse the logical (visual) order of Bézier splines in a …","Is contour open or closed?","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns whether the index is sane given the vec it’s …","Returns which end we have, given an index.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return the previous and next index, given an index.","Following semantics of std::slice::reverse Performance …","Following semantics of std::slice::reverse Performance …","Following semantics of std::slice::reverse Performance …","","","","","","","","","","Get an outline from a Skia path. Outline is guaranteed to …","","","","glifparser returns for you two Skia paths when called on …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Glifparser’s permissive attitude to the spec","","","","Strict to a UFO that will be used to make an OpenType …","","Strict to a UFO that will be used to make a TrueType font. …","Strict to the UFO spec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",".glif “curve” (cubic Bézier point to be followed by …","","A “close to the source” .glif <code>&lt;point&gt;</code>","A handle on a point","","A 2D point.",".glif “line”",".glif “move”, can act as any point type!","TODO: Deprecate Neither.","The point at the origin; (0, 0).",".glif “offcurve” or “”","A Skia-friendly point","API consumers may put any clonable type as an associated …","","","TODO: Remove. DEPRECATED",".glif “qcurve” (quadratic Bézier point to be followed …","","","For use by <code>Point::handle_or_colocated</code> TODO: Replace with …","The point (0, 0).","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded up to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Euclidean distance.","Squared Euclidean distance.","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded away from zero …","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded down to the …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Make a point from its x and y position, handles and type","","","","","","","Make a point from its x and y position, handles and type","Make a point from its x and y position and type","Make a point from its x and y position and type","","","","","Return an x, y position for a point, or one of its …","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Is this point finite?","Is this point NaN?","You’ll need to redefine this if you want to use it on …","You’ll need to redefine this if you want to use it on …","You’ll need to redefine this if you want to use it on …","","","<code>validate_data</code> parameter allows you to define an <code>is_valid</code> …","","","Linearly interpolate between two points.","Determine the midpoint of two points.","","","","Create a new <code>Point</code> with the provided <code>x</code> and <code>y</code> coordinates.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded to the nearest …","","","","","","","","","This function is intended for use by generic functions …","","","","","","","","","","","","","","","","","","","","","","","Convert this point into a <code>Vec2</code>.","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded towards zero to …","","","","","","","","","","","","","","","","","","","","","","The x coordinate.","","","","","","","","","","","","","The y coordinate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[]],[[1,1],1],[[]],[1,1],[[]],[1,1],[[]],[[1,2]],[[1,3]],[[1,4]],[[1,5]],[[1,6]],[[1,1]],[[1,7]],[[1,8]],[[1,9]],[[1,10]],[[1,11]],[[1,12]],[[1,13]],0,[[1,1],14],[[]],[1,1],[[]],[1,1],[1,1],[[]],[[1,1],1],[[]],[[]],[1,1],[[]],[[]],[[]],[1,1],[[]],[1,1],[1,15],[1,1],[[]],0,0,0,[[]],[1,1],[1,1],[[]],[[],1],[11,11],[[],[[16,[1]]]],[[],17],[[1,12]],[[1,8]],[[1,11]],[[1,13]],[[1,5]],[[1,6]],[[1,10]],[[1,9]],[[1,4]],[[1,2]],[[1,3]],[[1,1]],[[1,7]],[[]],[[1,1],14],0,[1,1],[[]],[1,1],[[]],[1,1],[[]],[[]],[1,1],[[1,18],[[16,[19]]]],[[1,18],[[16,[19]]]],[[]],[1,1],[2,1],[11,1],[9,1],[5,1],[8,1],[6,1],[10,1],[13,1],[7,1],[[]],[[],[[20,[1]]]],[3,1],[4,1],[12,1],[5,1],[21,[[16,[1]]]],[[21,5],[[16,[1]]]],0,0,[1],[[],11],[1,[[16,[12,7]]]],[1,[[16,[7,12]]]],[[1,1],1],[[]],0,[[],1],[1],[[]],[1,14],[1,14],[1,14],[1,14],[1,14],[1,14],[[],14],[[],14],[1,14],[1,14],[1,1],[[]],[1,1],[[]],[[]],[[1,1],1],[[]],[1,1],[[]],[1,1],0,[[1,1],1],[[]],[[],1],[[]],[[]],[[1,1],1],[[],1],[[]],[[]],[[],1],[[1,2]],[[1,7]],[[1,12]],[[1,5]],[[1,1]],[[1,4]],[[1,13]],[[1,11]],[[1,6]],[[1,10]],[[1,9]],[[1,3]],[[1,8]],[[1,1,1],1],[[]],[[],1],[1],[[],1],[[],1],[1,1],[[],1],0,[[1,1],[[20,[22]]]],0,0,[[]],[[]],[[1,1],1],[[]],[7],[[1,7],1],[[]],[[]],[1,1],[21,[[16,[[24,[23]],25]]]],[[[0,[[27,[26]],28]]],[[16,[[24,[23]],25]]]],[[[0,[[27,[26]],28]],29],[[16,[[24,[23]],25]]]],[[21,29],[[16,[[24,[23]],25]]]],[[]],[1,1],[[1,8]],[[1,4]],[[1,7]],[[1,13]],[[1,1]],[[1,2]],[[1,5]],[[1,12]],[[1,3]],[[1,10]],[[1,11]],[[1,9]],[[1,6]],[1,1],[[]],[1,16],[1],[1],[[]],[1,1],[1,1],[[]],[1],[[]],[[]],[1,1],[[]],[1,1],0,[[1,9]],[[1,3]],[[1,11]],[[1,8]],[[1,10]],[[1,13]],[[1,7]],[[1,1]],[[1,6]],[[1,12]],[[1,5]],[[1,4]],[[1,2]],[[]],[1,1],[1,1],[[]],[1,5],[[]],[1,[[20,[6]]]],[[]],[[]],[[],17],[1,[[20,[8]]]],[1,1],[[]],[21,[[16,[1]]]],[[],16],[[],16],[[],30],[[1,1],1],[1,12],[1,7],[24,[[16,[17,25]]]],[24,[[16,[25]]]],[[],1],0,[31,32],[[],1],[[],1],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[33,33],[[[34,[[0,[28,23]]]]],[[34,[[0,[28,23]]]]]],[35,35],[[]],[[]],[[]],0,[[],33],[[],[[34,[[0,[36,23]]]]]],[[],35],[11,11],[11,11],[11,11],[[],[[16,[33]]]],[[],[[16,[[34,[23]]]]]],[[],[[16,[35]]]],[[33,33],14],[[[34,[[0,[37,23]]]],34],14],[[35,35],14],[[],14],[[33,18],38],[[[34,[[0,[39,23]]]],18],38],[[35,18],38],[[]],[[],33],[[]],[[]],[[35,29],[[16,[[34,[23]],25]]]],[20,33],[[],11],[[],11],[[],11],[[]],[[]],[[]],[33,14],[33,14],[[],33],[[12,12,[20,[17]],23,33],[[34,[23]]]],[[1,1,[20,[40]]],35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,16],[[[34,[23]]],16],[35,16],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],30],[[],30],[[],30],[33],[33],0,0,[[[34,[23]]],32],0,0,0,0,[41,42],0,[[]],[[]],[41,41],[[]],[[],41],[11,11],[[],[[16,[41]]]],[[41,41],14],[[41,18],38],[[]],[[],41],[[1,1,1,1],41],[21,[[16,[41]]]],0,[[],11],[[]],[41],[[]],[[]],[[]],[[]],0,[41,16],[[]],[41,17],[[],16],[[],16],[[],30],0,0,0,0,0,0,0,0,[43,44],[[43,44]],[[44,44]],[[45,44]],[44,[[20,[45]]]],[45,[[20,[45]]]],[43,[[20,[[46,[45]]]]]],[44,[[20,[[46,[45]]]]]],[45,[[20,[[46,[45]]]]]],0,[44,[[49,[[48,[47]]]]]],[45,[[50,[[48,[47]]]]]],[45,[[49,[[48,[47]]]]]],[43,[[49,[[48,[51]]]]]],[45,[[49,[[48,[51]]]]]],[43,[[50,[[48,[51]]]]]],[44,[[49,[[48,[51]]]]]],[45,[[50,[[48,[51]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,43],[44,44],[52,52],[53,53],[[[54,[[0,[28,23]]]]],[[54,[[0,[28,23]]]]]],[55,55],[[]],[[]],[[]],[[]],[[]],[[]],[[43,43],22],[[44,44],22],[[45,45],22],[45],[45],[45,43],[45,44],[[],44],[[],45],[[],52],[[],53],[[],[[54,[[0,[36,23]]]]]],[[],55],[44,11],[45,11],[43],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[[],[[16,[52]]]],[[],[[16,[53]]]],[[],[[16,[[54,[23]]]]]],[[],[[16,[55]]]],[45,43],[[43,43],43],[[43,43],43],[[43,43],43],[[43,44],43],[[43,43],43],[43,43],[43,43],[[43,44],43],[[43,44],43],[[43,44],43],[43],[44],[[43,43],14],[[44,44],14],[[45,45],14],[[52,52],14],[[53,53],14],[[[54,[[0,[37,23]]]],54],14],[[55,55],14],[[],14],[[],14],[[],14],0,[20,[[16,[25]]]],[[43,18],[[16,[19]]]],[[43,18],[[16,[19]]]],[[44,18],[[16,[19]]]],[[44,18],[[16,[19]]]],[[45,18],[[16,[19]]]],[[45,18],[[16,[19]]]],[[52,18],38],[[53,18],38],[[[54,[[0,[39,23]]]],18],38],[[55,18],38],[[]],[56,43],[50,43],[57,44],[[]],[49,44],[[]],[[]],[[]],[[]],[[]],[[12,12,12,12,17],55],[[],43],[[],44],[44,[[20,[45]]]],[45,[[20,[45]]]],[43,[[20,[[46,[45]]]]]],[44,[[20,[[46,[45]]]]]],[45,[[20,[[46,[45]]]]]],0,[44,14],[45,14],[43],[44],[45],[52],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[45,43]],[[45,43]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,[[50,[[48,[58]]]]]],[44,[[49,[[48,[58]]]]]],[43,58],[44,58],[45],[44,47],[45,47],[43,51],[44,51],[45,51],[52,59],0,0,0,0,0,0,[[43,43],14],[[44,44],14],[[45,45],14],[43,44],[43,44],[[],43],[[],44],[[],52],[[],53],[[],[[54,[23]]]],[44,11],[45,11],[45,[[20,[45]]]],[[43,43],[[20,[22]]]],[[44,44],[[20,[22]]]],[[45,45],[[20,[22]]]],[43,[[20,[43]]]],[44,[[20,[43]]]],[45,[[20,[43]]]],[43,[[20,[43]]]],[44,[[20,[43]]]],[45,[[20,[43]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[43,44]],[[44,44]],[[45,44]],[[43,43]],[[44,43]],[[45,43]],[[43,43]],[[44,43]],[[45,43]],[[52,24],14],[43,45],0,[43,[[46,[45]]]],[52,16],[53,16],[[[54,[23]]],16],[55,16],[[52,[27,[26]]]],[43],[45],[[43,43],44],[[43,43],44],[[43,43],44],[[43,43],44],[[44,44],44],[[44,43],44],[[44,43],44],[[44,43],44],[[44,44],44],[[44,44],44],[[44,44],44],[[44,43],44],[52,[[16,[[54,[23]],25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,0,[52,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[25,25],[[]],[11,11],[11,11],[[60,18],38],[[60,18],38],[[25,18],[[16,[19]]]],[[25,18],38],[[]],[61,25],[[]],[62,25],[63,25],[64,25],[[],11],[[],11],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65],[65],[[]],[[],17],[[],17],[[],16],[[],16],[[],16],[[],16],[[],30],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[66,66],[[]],[11,11],[[],[[16,[66]]]],[[66,66],14],[[66,18],[[16,[19]]]],[[66,18],38],[[]],[[],11],[[]],[[]],[[]],[[]],[[]],[65],[66,16],[[]],[[],17],[[],16],[[],16],[[],30],0,0,0,0,0,0,0,0,0,[[[24,[23]]],32],0,[[]],[[]],[[]],[[]],[67,67],[[[24,[[0,[28,23]]]]],[[24,[[0,[28,23]]]]]],[[]],[[]],0,[[],67],[[],[[24,[[0,[36,23]]]]]],[11,11],[11,11],[[],[[16,[67]]]],[[],[[16,[[24,[23]]]]]],[[67,67],14],[[[24,[[0,[37,23]]]],24],14],[[],20],[[[24,[23]]],20],0,[[[24,[23]]],[[16,[14,25]]]],[[[24,[23]],20],[[16,[[24,[23]],25]]]],[[67,18],38],[[[24,[[0,[39,23]]]],18],38],[[]],[[]],[[[68,[23]]],[[24,[23]]]],[[[27,[21]]],[[24,[23]]]],[[],69],0,[[],11],[[],11],0,[[]],[[]],0,0,[[],17],[[[24,[23]]],17],0,[[21,14],17],[[[24,[23]]],17],[[],[[24,[23]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,[[16,[[24,[23]],25]]]],[[[0,[[27,[26]],28]]],[[16,[[24,[23]],25]]]],[[[0,[[27,[26]],28]],29],[[16,[[24,[23]],25]]]],[[21,29],[[16,[[24,[23]],25]]]],[67,16],[[[24,[23]]],16],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],30],[[],30],0,0,[24,[[16,[17,25]]]],[24,[[16,[25]]]],0,[[],32],[[[24,[23]]],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[70,[23]]],14],[71,71],[[[68,[[0,[28,23]]]]],[[68,[[0,[28,23]]]]]],[[[72,[[0,[28,23]]]]],[[72,[[0,[28,23]]]]]],[[[73,[[0,[28,23]]]]],[[73,[[0,[28,23]]]]]],[[[74,[[0,[28,23]]]]],[[74,[[0,[28,23]]]]]],[75,75],[76,76],[77,77],[78,78],[[[79,[[0,[28,23]]]]],[[79,[[0,[28,23]]]]]],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],71],[[],[[68,[[0,[36,23]]]]]],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],0,[[],[[16,[71]]]],[[],[[16,[[68,[23]]]]]],[[],[[16,[[72,[23]]]]]],[[],[[16,[[73,[23]]]]]],[[],[[16,[[74,[23]]]]]],[[],[[16,[75]]]],[[],[[16,[76]]]],[[],[[16,[77]]]],[[],[[16,[78]]]],[[],[[16,[[79,[23]]]]]],[[],[[16,[80]]]],[[],[[16,[81]]]],[[],[[16,[82]]]],[[],[[16,[83]]]],[[],[[16,[84]]]],[[],[[16,[85]]]],[[],[[16,[86]]]],[[],[[16,[87]]]],[[[70,[23]]],[[88,[23]]]],[[[70,[23]]]],[[[68,[23]]]],[[[68,[[0,[37,23]]]],68],14],[[[72,[[0,[37,23]]]],72],14],[[[73,[[0,[37,23]]]],73],14],[[[74,[[0,[37,23]]]],74],14],[[75,75],14],[[76,76],14],[[77,77],14],[[78,78],14],[[[79,[[0,[37,23]]]],79],14],[[80,80],14],[[81,81],14],[[82,82],14],[[83,83],14],[[84,84],14],[[85,85],14],[[86,86],14],[[87,87],14],[[],14],[[[68,[23]]],20],0,[[[68,[23]],20],[[16,[[68,[23]],25]]]],0,[[71,18],38],[[[68,[[0,[39,23]]]],18],38],[[[72,[[0,[39,23]]]],18],38],[[[73,[[0,[39,23]]]],18],38],[[[74,[[0,[39,23]]]],18],38],[[75,18],38],[[76,18],38],[[77,18],38],[[78,18],38],[[[79,[[0,[39,23]]]],18],38],[[80,18],38],[[81,18],38],[[82,18],38],[[83,18],[[16,[19]]]],[[83,18],38],[[84,18],38],[[85,18],[[16,[19]]]],[[85,18],38],[[86,18],38],[[86,18],[[16,[19]]]],[[87,18],38],[[],71],[[]],[[[24,[23]]],[[68,[23]]]],[[]],[[]],[[[90,[[89,[23]]]]],[[73,[23]]]],[[]],[90,[[73,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,[[16,[83]]]],[21,[[16,[85]]]],[21,[[16,[86]]]],0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,[71],[[]],[[]],[[]],[[]],[[[73,[23]]],[[91,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[68,[23]]],17],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[71,16],[[[68,[23]]],16],[[[72,[23]]],16],[[[73,[23]]],16],[[[74,[23]]],16],[75,16],[76,16],[77,16],[78,16],[[[79,[23]]],16],[80,16],[81,16],[82,16],[83,16],[84,16],[85,16],[86,16],[87,16],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[70,[23]],[20,[92]]],93],[[],17],[[],17],[[],17],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,[[[70,[23]]],[[16,[66]]]],[[[68,[23]]],[[16,[66]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[94,[[0,[28,23]]]]],[[94,[[0,[28,23]]]]]],[[]],0,[11,11],[[],[[16,[[94,[23]]]]]],[[[94,[[0,[37,23]]]],94],14],[[[94,[[0,[39,23]]]],18],38],[[]],[[],11],0,[[]],[42,42],0,0,0,[[]],[[]],[[]],[[]],[[[94,[23]]],16],[[[94,[23]],11],17],[[],42],[[],[[20,[42]]]],[[[94,[23]]],[[20,[42]]]],[[]],[[],16],[[],16],[[],30],0,0,0,0,0,0,0,[[],14],[[],88],[[]],[[],70],[[],[[16,[66]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[95,[[20,[21]]]],[95,[[20,[21]]]],[95,[[20,[32]]]],[95,[[20,[32]]]],[95,20],[95,[[20,[21]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[64,[[20,[96]]]],0,[95,95],[32,32],[[]],[[]],[11,11],[11,11],[11,11],[64,21],[[95,95],14],[[32,32],14],[[],14],[[],14],[[95,18],[[16,[19]]]],[[32,18],[[16,[19]]]],[[64,18],[[16,[19]]]],[[64,18],[[16,[19]]]],[[]],[[]],[[]],[[],69],[17,69],[17,69],[17,69],[32,[[20,[32]]]],[32,[[20,[32]]]],[32,[[20,[[97,[21]]]]]],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[],32],[[],32],[[],32],0,0,0,[21,32],[[],[[16,[32,64]]]],[[],[[16,[[90,[95,98]],64]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[65],[32,[[20,[32]]]],[[]],[[]],[[],17],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],[[69,[32]]]],[[],30],[[],30],[[],30],[32,[[16,[63]]]],[[32,99],[[16,[63]]]],[[],32],0,0,0,0,0,0,0,0,0,0,[[[100,[23]]],101],0,[[]],[[]],[[]],[[]],[102,102],[[[100,[[0,[28,23]]]]],[[100,[[0,[28,23]]]]]],[[]],[[]],[[[100,[23]],[103,[41]]],[[100,[23]]]],0,[[[100,[23]],[103,[23]]],[[100,[23]]]],0,[[],102],[[],[[100,[[0,[36,23]]]]]],[11,11],[11,11],[[],[[16,[102]]]],[[],[[16,[[100,[23]]]]]],[[102,102],14],[[[100,[[0,[37,23]]]],100],14],[[102,18],38],[[[100,[[0,[39,23]]]],18],38],[[]],[[]],[[12,12,1],[[100,[23]]]],[[],11],[[],11],[[[100,[23]],[103,[17]]],[[100,[23]]]],0,[[]],[102],[[]],[[[100,[23]],[103,[17]]],[[100,[23]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[102,16],[[[100,[23]]],16],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],30],[[],30],0,[[[100,[23]]],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[108,[[16,[[90,[3]],25]]]],0,0,[108,[[16,[25]]]],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[[],[[16,[107]]]],[[104,104],14],[[105,105],14],[[106,106],14],[[107,107],14],[[108,108],14],[[109,109],14],0,0,[[104,18],38],[[105,18],38],[[106,18],38],[[107,18],38],[[108,18],38],[[109,18],38],[[]],[[]],[[]],[[]],[[]],[[]],[[[103,[110]]],[[16,[107,25]]]],[[[103,[110]]],[[16,[108,25]]]],[106,109],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],[[]],[[]],[[]],[[]],[108,[[16,[25]]]],[107,59],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[107,16],[[107,[103,[111]]]],0,[[107,112],[[16,[108,25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[107,[[69,[32]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[111],[[]],[[]],[[]],[[]],[111,111],[59,59],[[]],[[]],[[],111],[[],59],[11,11],[11,11],[[],[[16,[111]]]],[111,2],[[111,111],14],[[59,59],14],[[111,18],[[16,[19]]]],[[59,18],38],[113,111],[[]],[[]],[[],11],[[],11],[[]],[[]],[59,111],[111,111],[111,14],[111,14],[114,111],[[111,115],115],[[111,116],116],[[111,117],117],[[111,118]],[[111,119]],[[111,120],120],[[111,115],115],[[111,121],121],[[111,111],111],[[111,122],122],[[111,123],123],[[111,111]],[[],111],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,111],[2,111],[[2,2],111],[111,16],0,[[]],[[]],[111,124],[59,124],[[111,114],114],[[],111],[[],16],[[],16],[[],16],[[],16],[[],30],[[],30],0,[[],124],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[91,[23]],11],[[16,[14,25]]]],[125,125],[126,126],[127,127],[128,128],[[]],[[]],[[]],[[]],0,0,[[[91,[23]],11],[[16,[25]]]],[[[91,[23]],11],[[16,[25]]]],0,0,[[],125],[[],126],[[],127],[[],128],[128,90],[128,90],[11,11],[11,11],[11,11],[11,11],[[],[[16,[126]]]],[[],[[16,[127]]]],[[],[[16,[128]]]],[[125,125],14],[[126,126],14],[[127,127],14],[[128,128],14],[[],14],[[],14],[128],[[125,18],38],[[126,18],38],[[127,18],38],[[128,18],38],[116,125],[[]],[[]],[[]],[126,127],[[]],[[[90,[129]]],128],[115],[115,[[88,[23]]]],[130,[[88,[23]]]],[131,[[88,[23]]]],[128,126],[11,14],[11,14],[126],[127],[128],[[],11],[[],11],[[],11],[[],11],[125,[[90,[132]]]],[125,116],[[]],[[]],[[]],[[]],[[]],[[[91,[23]]]],[[],[[16,[115,25]]]],[[],[[16,[115,25]]]],[[],[[16,[[90,[116]],25]]]],[[[91,[23]]],[[16,[[90,[116]],25]]]],[[[88,[23]]],[[16,[[90,[116]],25]]]],[[],[[16,[[90,[125]],25]]]],[[[91,[23]]],[[16,[[90,[125]],25]]]],[[[91,[23]]],32],[125,14],[125,14],[125,14],[125,14],[[[91,[23]]],14],[[[91,[23]],11,12],[[16,[14,25]]]],[125,14],[133,14],[125,14],[125,11],[[],128],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[91,[23]]]],[[[88,[23]]]],[[]],[126,16],[127,16],[128,16],[125],0,[[],134],[133,134],[[],88],[134,[[88,[23]]]],[[]],[[]],[[]],[[]],[[]],[[[91,[23]]],[[91,[23]]]],[[[88,[23]]],[[88,[23]]]],[[[91,[23]],[20,[92]]],[[20,[130]]]],[[[88,[23]],[20,[92]]],93],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[128,[[16,[[88,[23]],25]]]],[[],16],[[],30],[[],30],[[],30],[[],30],[125],[125],[125,132],[125,132],[125],[[[88,[23]]],[[70,[23]]]],[[[91,[23]]],32],[129,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[11,[[16,[14,25]]]],[135,135],[[]],[11,[[16,[25]]]],[11,[[16,[25]]]],[11,11],[[135,135],14],[[],14],[[135,18],38],[[]],[135],[[],11],[11,[[16,[14]]]],[11,14],[11,14],[11,16],[11,[[16,[[20,[135]]]]]],[[]],[[],14],[[],14],[11,[[16,[14,25]]]],[[11,12],[[16,[14,25]]]],[11,[[16,[11]]]],[[]],[[]],[[]],[[]],[11,[[16,[11]]]],[11,16],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],30],[128,[[88,[23]]]],[128,[[88,[23]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[93,93],[92,92],[[]],[[]],0,[93,130],[[]],[131,131],[[],93],[[],92],[11,11],[11,11],[[93,93],14],[[]],[[]],[130],[131],[[],11],[[],11],[93,130],[[]],[[]],[[],92],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],131],[[]],[[]],[[[20,[92]]],[[20,[130]]]],[[[20,[92]]],93],[[],16],[[],16],[[],16],[[],16],[[],[[20,[136]]]],[[],30],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,29],[137,137],[138,138],[139,139],[[]],[[]],[[]],[[]],[[],29],[[],137],[[],138],[11,11],[11,11],[11,11],[11,11],[[29,29],14],[[137,137],14],[[138,138],14],[[139,139],14],[[],14],[[],14],[[],14],[[],14],[[29,18],38],[[137,18],38],[[138,18],38],[[139,18],38],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[139,14],[137,14],[139,14],[138,14],[137,14],[138,14],[138,14],[138,14],[138,14],[137,14],[137,14],0,[[138,1,139],12],0,[[138,137],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,14],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],30],[[],30],[[],30],[[],30],[139],[137],[139],[138],[137],[138],[138],[138],[137],[137],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[120,120],[[120,140],120],[120],[[120,140]],[[[89,[23]],111]],[[],120],[[],120],[[],120],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[120,120],[120,120],[132,132],[136,136],[141,141],[[[89,[[0,[28,23]]]]],[[89,[[0,[28,23]]]]]],[142,142],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],120],[[],132],[[],136],[[],141],[[],[[89,[[0,[36,23]]]]]],[[],142],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[[],[[16,[120]]]],[[],[[16,[132]]]],[[],[[16,[136]]]],[[],[[16,[141]]]],[[],[[16,[[89,[23]]]]]],[[],[[16,[142]]]],[[120,120],2],[[120,120],2],[[120,120],14],[[132,132],14],[[136,136],14],[[141,141],14],[[[89,[[0,[37,23]]]],89],14],[[142,142],14],[120,120],[[]],[[]],[[]],[120,120],[[120,18],[[16,[19]]]],[[120,18],[[16,[19]]]],[[132,18],38],[[136,18],38],[[136,18],[[16,[19]]]],[[141,18],38],[[[89,[[0,[39,23]]]],18],38],[[142,18],38],[[],120],[[]],[[]],[89,132],[21,136],[[]],[125,136],[116,136],[116,136],[116,136],[141,136],[89,141],[[],141],[[],141],[20,141],[[[20,[132]]],141],[[]],[[]],[132,[[89,[23]]]],[21,142],[[]],[143,142],[[14,136,[20,[17]],[20,[23]]],[[89,[23]]]],[[89,142],132],[120],[[120,136],132],[120,132],[21,[[16,[136]]]],[21,[[16,[142]]]],[136,[[89,[23]]]],[136,132],[136,[[89,[23]]]],[[[89,[23]],142],141],[[[89,[23]],142],132],[[[89,[23]],142],120],[[[89,[23]],142],[[89,[23]]]],[[[89,[23]],142,144,144]],[132],[136],[142],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[145,120],[[]],[[]],[[]],[[]],[[]],[[]],[142,143],[120,14],[120,14],[[],14],[[],14],[[],14],[132,14],[136,14],[[[89,[23]]],14],[142,14],[136,14],[[120,120,2],120],[[120,120],120],[[132,[20,[17]]],132],0,0,[[2,2],120],[[],132],[[],[[89,[23]]]],[142,142],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[120,120],[132],[[[89,[23]]]],[120,16],[132,16],[136,16],[141,16],[[[89,[23]]],16],[142,16],[[[89,[23]],142,141]],[1],[[132,1]],[[[89,[23]],1]],[1],[[132,1]],[[[89,[23]],1]],0,0,[120,120],[[120,120],140],[[120,140],120],[[120,140]],[120],[[],120],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[120,140],[120,120],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],1],[132,1],[[[89,[23]]],1],0,0,0,[[],12],[[],12],[[],12],[[],2],[[],2],[[],2],[132,32],[[],1],[132,1],[[[89,[23]]],1],0,0,0,[[],12],[[],12],[[],12],[[],2],[[],2],[[],2],0,0,0,0,0,[146,17],[40,17],[146,17],[40,17],[[]],[[]],[[]],[[]],[146,146],[40,40],[[]],[[]],[[],146],[[],40],[146],[40],[146],[40],[11,11],[11,11],[[],[[16,[146]]]],[[],[[16,[40]]]],[[146,146],14],[[40,40],14],[[146,18],38],[[146,18],38],[[40,18],38],[[40,18],38],[[]],[[]],[21,[[16,[146,60]]]],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[146,16],[40,16],[[],146],[[]],[[]],[[],17],[[],17],[17,[[16,[146,60]]]],[17,[[16,[146,60]]]],[[],16],[[],16],[17,[[16,[40,60]]]],[[],16],[[],16],[[],30],[[],30]],"p":[[4,"IntegerOrFloat"],[15,"f64"],[15,"u8"],[15,"isize"],[15,"u32"],[15,"i64"],[15,"i32"],[15,"u64"],[15,"i8"],[15,"u16"],[15,"usize"],[15,"f32"],[15,"i16"],[15,"bool"],[4,"FpCategory"],[4,"Result"],[3,"String"],[3,"Formatter"],[3,"Error"],[4,"Option"],[15,"str"],[4,"Ordering"],[8,"PointData"],[3,"Glif"],[4,"GlifParserError"],[3,"Path"],[8,"AsRef"],[8,"Clone"],[3,"Pedantry"],[3,"TypeId"],[8,"Codepoint"],[3,"Element"],[4,"AnchorType"],[3,"Anchor"],[3,"GlifAnchor"],[8,"Default"],[8,"PartialEq"],[6,"Result"],[8,"Debug"],[3,"GlifStringLenOne"],[3,"Color"],[4,"Value"],[3,"Tree"],[3,"Forest"],[3,"Node"],[3,"Pin"],[3,"Iter"],[3,"Splitted"],[3,"BfsForest"],[3,"BfsTree"],[3,"IterMut"],[3,"GlifComponent"],[3,"GlifComponents"],[3,"Component"],[3,"ComponentRect"],[3,"TreeWalk"],[3,"ForestWalk"],[3,"IntoIter"],[3,"GlifMatrix"],[4,"GlifStringConversionError"],[3,"FromUtf8Error"],[3,"Error"],[4,"EmitterError"],[4,"Error"],[3,"Demand"],[4,"UpgradeContourOpsError"],[4,"Lib"],[3,"MFEKGlif"],[6,"GlifParserResult"],[6,"MFEKOutline"],[3,"MFEKPointData"],[3,"HistoryEntry"],[3,"MFEKContour"],[4,"ContourOperations"],[4,"PatternCopies"],[4,"PatternSubdivide"],[4,"PatternHandleDiscontinuity"],[4,"PatternStretch"],[3,"PAPContour"],[3,"VWSContour"],[3,"DashCull"],[3,"DashContour"],[4,"InterpolationType"],[3,"VWSHandle"],[4,"JoinType"],[4,"CapType"],[4,"LayerOperation"],[6,"Outline"],[3,"Point"],[3,"Vec"],[6,"Contour"],[3,"SkiaPointTransforms"],[3,"SkiaPaths"],[3,"Layer"],[4,"XMLNode"],[8,"Error"],[4,"Cow"],[3,"Global"],[3,"EmitterConfig"],[3,"Guideline"],[3,"Dictionary"],[3,"GuidelinePoint"],[8,"Into"],[4,"DataLoadState"],[4,"DataOrBitmap"],[3,"ImageData"],[3,"GlifImage"],[3,"Image"],[4,"ImageCodec"],[3,"PathBuf"],[3,"Affine"],[8,"GlifLike"],[3,"TranslateScale"],[3,"Rect"],[3,"BezPath"],[4,"PathEl"],[4,"PathSeg"],[3,"Ellipse"],[3,"Circle"],[3,"KurboPoint"],[3,"CubicBez"],[3,"QuadBez"],[3,"Line"],[3,"Matrix"],[4,"PenOperations"],[4,"GlifOutlineType"],[4,"OutlineType"],[3,"GlifOutline"],[6,"GlifContour"],[6,"Path"],[6,"SkOutline"],[3,"GlifPoint"],[6,"PenOperationsContour"],[6,"PenOperationsPath"],[4,"End"],[4,"PointType"],[4,"Mend"],[4,"Level"],[4,"FloatClass"],[3,"Vec2"],[4,"Handle"],[4,"WhichHandle"],[15,"char"],[8,"Fn"],[8,"PointLike"],[3,"GlifString"],[13,"Integer"],[13,"Float"],[8,"FromOption"],[8,"FlattenedGlif"],[13,"GlifFileIoError"],[13,"GlifFilenameNotSet"],[13,"GlifFilenameInsane"],[13,"GlifComponentsCyclical"],[13,"XmlParseError"],[13,"PedanticXmlParseError"],[13,"XmlWriteError"],[13,"GlifInputError"],[13,"ImageIoError"],[13,"ContourNoPrevious"],[13,"ContourNoNext"],[13,"GlifOutlineHasBadPointType"],[13,"PointIdxOutOfBounds"],[13,"GlifContourHasBadPointType"],[13,"TypeConversionError"],[13,"HasControlCharacter"],[8,"FromXML"],[8,"IntoXML"],[13,"Plist"],[13,"Xml"],[13,"VariableWidthStroke"],[13,"PatternAlongPath"],[13,"DashAlongPath"],[13,"Fixed"],[13,"Split"],[13,"Simple"],[8,"ToLayerContentsPlist"],[8,"ToLayerInfoPlist"],[8,"ManageContourOperations"],[8,"DowngradeOutline"],[8,"UpgradeOutline"],[8,"TryIntoXML"],[13,"MalformedXml"],[13,"Element"],[13,"Comment"],[13,"CData"],[13,"Text"],[13,"ProcessingInstruction"],[13,"Data"],[13,"Bitmap"],[8,"ToSkiaMatrix"],[8,"IntoGlifPoints"],[8,"FromKurbo"],[8,"SplitPenOperations"],[8,"IntoKurbo"],[8,"IntoPenOperations"],[8,"QuadToCubic"],[8,"RefigurePointTypes"],[8,"RoundToInt"],[8,"ToOutline"],[8,"Reverse"],[13,"MoveTo"],[13,"LineTo"],[13,"QuadTo"],[13,"CurveTo"],[8,"GenericPrevNext"],[8,"PrevNext"],[8,"CheckSmooth"],[8,"State"],[8,"ConicsToCubics"],[8,"FromSkiaPath"],[8,"FromSkOutline"],[8,"SplitSkiaPath"],[8,"ToSkiaPath"],[8,"ToSkiaPaths"],[8,"TryIntoPointType"],[8,"IsValid"],[8,"FromKurboPoint"],[8,"ToKurboPoint"],[13,"At"],[8,"ToGlifString"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","tn":["AllocError","CapacityOverflow","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","raw","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","EntryRef","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryRef","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","Vacant","VacantEntry","VacantEntryRef","Values","ValuesMut","allocator","and_modify","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","entry","entry_ref","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_many_key_value_mut","get_many_key_value_unchecked_mut","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_unique_unchecked","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key","into_key_value","into_keys","into_mut","into_mut","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next","next","or_default","or_default","or_insert","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","raw_entry","raw_entry_mut","raw_table","remove","remove","remove","remove","remove_entry","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry","replace_entry_with","replace_entry_with","replace_entry_with","replace_key","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","0","0","0","0","0","0","Difference","Drain","DrainFilter","Entry","HashSet","Intersection","IntoIter","Iter","Occupied","OccupiedEntry","SymmetricDifference","Union","Vacant","VacantEntry","allocator","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","insert","insert","insert_unique_unchecked","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_value","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","next","next","next","next","next","next","next","next","or_insert","remove","remove","replace","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","0","0","Bucket","RawDrain","RawIntoIter","RawIter","RawIterHash","RawTable","allocator","as_mut","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","bucket_index","buckets","capacity","clear","clear_no_drop","clone","clone","clone","clone_from","clone_from_with_hasher","clone_into","clone_into","clone_into","copy_from_nonoverlapping","data_end","default","drain","drain_iter_from","drop","drop","drop","drop","erase","erase_entry","erase_no_drop","find","from","from","from","from","from","from","get","get_many_mut","get_many_unchecked_mut","get_mut","insert","insert_entry","insert_no_grow","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_from","is_empty","iter","iter","iter","iter_hash","len","new","new_in","next","next","next","next","read","reflect_insert","reflect_remove","remove","remove_entry","replace_bucket_with","reserve","shrink_to","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_insert_no_grow","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_with_capacity","try_with_capacity_in","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","write"],"q":["hashbrown","","","","","","","","","","","","","","","","","","","","hashbrown::TryReserveError","hashbrown::hash_maphashbrown::hash_map::Entry","","hashbrown::hash_map::EntryRef","","hashbrown::hash_map::RawEntryMut","","hashbrown::hash_sethashbrown::hash_set::Entry","","hashbrown::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","","Returns the argument unchanged.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Calls <code>U::from(self)</code>.","Experimental and unsafe <code>RawTable</code> API. This module is only …","","","","","The layout of the allocation request that failed.","Dummy default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code> in …","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code> in …","An owning iterator over the keys of a <code>HashMap</code> in arbitrary …","An owning iterator over the values of a <code>HashMap</code> in …","An iterator over the entries of a <code>HashMap</code> in arbitrary …","A mutable iterator over the entries of a <code>HashMap</code> in …","An iterator over the keys of a <code>HashMap</code> in arbitrary order. …","An occupied entry.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code> in arbitrary …","A mutable iterator over the values of a <code>HashMap</code> in …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","Gets the given key’s corresponding entry by reference in …","","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash and matching …","Access an immutable entry by hash and matching function.","","Creates a <code>RawEntryMut</code> from the given key.","Access an immutable entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an immutable entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntryRef’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Insert a key-value pair into the map without checking if …","Set the value of an entry with a custom hasher function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates a consuming iterator, that is, one that moves each …","Creates an iterator over the entries of a <code>HashMap</code> in …","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Creates a consuming iterator visiting all the keys in …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntryRef into a mutable reference to …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Returns a mutable reference to the <code>RawTable</code> used …","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it. Keeps …","Takes the value out of the entry, and returns it. Keeps …","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map. …","Take the ownership of the key and value from the map. …","Replaces the entry, returning the old key and value. The …","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate. …","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","","","","","","","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A view into a single entry in a set, which may either be …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","An occupied entry.","A view into an occupied entry in a <code>HashSet</code>. It is part of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A vacant entry.","A view into a vacant entry in a <code>HashSet</code>. It is part of the …","Returns a reference to the underlying allocator.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","Gets the given value’s corresponding entry in the set …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value in the set, if any, that …","Returns a reference to this entry’s value.","Gets a reference to the value in the entry.","Gets a reference to the value that would be used when …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry with the VacantEntry’s value.","Insert a value the set without checking if the value …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","Take ownership of the value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","","","","","","","","","Ensures a value is in the entry by inserting if it was …","Removes a value from the set. Returns whether the value was","Takes the value out of the entry, and returns it. Keeps …","Adds a value to the set, replacing the existing value, if …","Replaces the entry, returning the old value. The new value …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …","","","A reference to a hash table bucket containing a <code>T</code>.","Iterator which consumes elements without freeing the table …","Iterator which consumes a table and returns elements.","Iterator which returns a raw pointer to every full bucket …","Iterator over occupied buckets that could match a given …","A raw hash table with an unsafe API.","Returns a reference to the underlying allocator.","","","","","","","","","","","","","","","","Returns a pointer to an element in the table.","Returns the index of a bucket from a <code>Bucket</code>.","Returns the number of buckets in the table.","Returns the number of elements the map can hold without …","Removes all elements from the table without freeing the …","Marks all table buckets as empty without dropping their …","","","","","Variant of <code>clone_from</code> to use when a hasher is available.","","","","","Returns pointer to one past last element of data table.","","Returns an iterator which removes all elements from the …","Returns an iterator which removes all elements from the …","","","","","Erases an element from the table, dropping it in place.","Finds and erases an element from the table, dropping it in …","Erases an element from the table without dropping it.","Searches for an element in the table.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to an element in the table.","Attempts to get mutable references to <code>N</code> entries in the …","","Gets a mutable reference to an element in the table.","Inserts a new element into the table, and returns its raw …","Inserts a new element into the table, and returns a …","Inserts a new element into the table, without growing the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns an iterator which consumes all elements from the …","Returns <code>true</code> if the table contains no elements.","Returns an iterator over every element in the table. It is …","","","Returns an iterator over occupied buckets that could match …","Returns the number of elements in the table.","Creates a new empty hash table without allocating any …","Creates a new empty hash table without allocating any …","","","","","","Refresh the iterator so that it reflects an insertion into …","Refresh the iterator so that it reflects a removal from …","Removes an element from the table, returning it.","Finds and removes an element from the table, returning it.","Temporary removes a bucket, applying the given function to …","Ensures that at least <code>additional</code> items can be inserted …","Shrinks the table to fit <code>max(self.len(), min_size)</code> …","","","","","","","","","","","","","Attempts to insert a new element without growing the table …","","","","","","","Tries to ensure that at least <code>additional</code> items can be …","Attempts to allocate a new hash table with at least enough …","Attempts to allocate a new hash table using the given …","","","","","","","Allocates a new hash table with at least enough capacity …","Allocates a new hash table using the given allocator, with …",""],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,62,0,0,0,0,0,0,0,0,0,0,0,0,9,10,12,0,0,0,0,0,0,0,0,9,10,12,0,0,0,0,8,9,10,12,9,10,12,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,8,8,14,15,16,8,8,14,15,16,8,8,8,8,18,8,35,8,8,8,8,8,8,14,21,22,23,24,15,16,17,25,26,9,27,28,29,10,30,31,12,33,34,35,35,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,26,29,8,26,29,26,29,8,27,30,33,8,27,8,27,8,8,8,8,8,27,30,33,8,8,8,9,27,28,10,30,31,12,33,34,28,27,8,28,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,8,8,14,21,22,23,24,15,16,17,18,25,27,31,34,27,8,27,30,33,8,8,8,8,27,10,30,31,12,33,34,27,8,8,14,21,22,23,24,15,16,17,25,14,21,22,23,24,15,16,17,18,25,10,12,9,10,12,9,10,12,10,12,8,8,8,8,27,30,33,8,27,30,33,30,33,27,30,33,30,33,8,8,8,8,14,21,22,23,24,15,16,17,18,25,8,14,15,16,35,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,35,8,8,8,8,8,8,64,65,66,67,68,69,0,0,0,0,0,0,0,0,50,0,0,0,50,0,42,42,42,42,42,43,51,48,49,44,45,46,47,50,52,53,42,43,51,48,49,44,45,46,47,50,52,53,42,42,42,43,44,45,46,47,42,42,43,44,45,46,47,42,42,42,42,42,49,42,42,42,42,42,43,51,48,44,45,46,47,50,52,53,42,42,43,51,48,49,44,45,46,47,50,52,53,42,42,50,52,53,42,42,42,42,42,50,53,42,42,42,43,51,48,49,44,45,46,47,50,52,53,42,42,43,51,48,49,44,45,46,47,53,42,42,42,42,42,42,43,51,48,43,51,48,49,44,45,46,47,50,42,52,42,52,42,42,42,42,43,51,48,49,44,45,46,47,42,42,42,42,43,44,45,46,47,42,43,51,48,49,44,45,46,47,50,52,53,42,43,51,48,49,44,45,46,47,50,52,53,42,42,43,51,48,49,44,45,46,47,50,52,53,42,42,42,42,42,70,71,0,0,0,0,0,0,40,54,54,54,54,40,55,59,58,61,54,40,55,59,58,61,40,40,40,40,40,40,54,40,55,40,40,54,40,55,54,40,40,40,40,54,40,59,58,40,40,40,40,54,40,55,59,58,61,40,40,40,40,40,40,40,54,40,55,59,58,61,40,55,59,58,61,40,40,40,59,58,40,40,40,40,55,59,58,61,54,55,55,40,40,40,40,40,55,59,58,54,40,55,54,40,55,59,58,61,40,54,40,55,59,58,61,40,40,40,54,40,55,59,58,61,40,40,54],"f":[0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[1,3],4],[[]],0,0,[[]],0,[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]],[[10,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]],[[12,[11,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]],[[10,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]],[[12,[11,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[0,7]]]]],13],[[[8,[[0,[0,7]]]]]],[[[8,[7,7,7,[0,[0,7]]]]],[[8,[7,7,7,[0,[0,7]]]]]],[14,14],[15,15],[16,16],[[[8,[7,7,7,[0,[0,7]]]],[8,[7,7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[8,2],[[],8],[[[8,[[0,[0,7]]]]],[[17,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[18,[[0,[0,7]]]]]],[18],[8,10],0,[8,[[12,[11]]]],[[8,8],2],[[8,19]],[[8,19]],[[8,19]],[[8,3],4],[[[14,[20,20]],3],4],[[21,3],4],[[[22,[20,20,[0,[0,7]]]],3],4],[[[23,[20,20,[0,[0,7]]]],3],4],[[[24,[20,[0,[0,7]]]],3],4],[[[15,[20]],3],4],[[[16,[20]],3],4],[[17,3],4],[[[25,[20]],3],4],[[[26,[[0,[0,7]]]],3],4],[[[9,[20,20,[0,[0,7]]]],3],4],[[[27,[20,20,[0,[0,7]]]],3],4],[[[28,[[0,[0,7]]]],3],4],[[[29,[[0,[0,7]]]],3],4],[[[10,[20,20,[0,[0,7]]]],3],4],[[[30,[20,20,[0,[0,7]]]],3],4],[[[31,[20,[0,[0,7]]]],3],4],[[[12,[[32,[[0,[11,20]]]],[0,[11,20]],20,[0,[0,7]]]],3],4],[[[33,[[32,[[0,[11,20]]]],[0,[11,20]],20,[0,[0,7]]]],3],4],[[[34,[[32,[[0,[11,20]]]],[0,[11,20]],[0,[0,7]]]],3],4],[[[35,[20,20,[0,[0,7]]]],3],4],[[[35,[20,20,[0,[0,7]]]],3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[[0,[0,7]]]],36],[[9,[[0,[0,7]]]]]],[[[29,[[0,[0,7]]]],36],37],[19,8],[[[26,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[29,[[0,[0,7]]]]],37],[[[26,[[0,[0,7]]]],36],[[9,[[0,[0,7]]]]]],[[[29,[[0,[0,7]]]],36],37],[8,37],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[8,37],[[[27,[[0,[0,7]]]]]],[8,37],[[[27,[[0,[0,7]]]]]],[8,37],[8,37],[8,37],[8,37],[8,37],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]]],[8],[8,37],[[[9,[[0,[0,7]]]]],[[27,[[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[28,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]],[[30,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[31,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]],[[33,[11,[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[34,[11,[0,[0,7]]]]]],[[[28,[[0,[0,7]]]],36]],[[[27,[[0,[0,7]]]]]],[8],[[[28,[[0,[0,7]]]],36]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,14],[[[8,[[0,[0,7]]]]],[[22,[[0,[0,7]]]]]],[8,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[27,[[0,[0,7]]]]]],[[[31,[[0,[0,7]]]]]],[[[34,[11,[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[23,[[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[24,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],2],[[[8,[[0,[0,7]]]]],14],[[[8,[[0,[0,7]]]]],21],[[[27,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[31,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[34,[11,[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],15],[[[8,[[0,[0,7]]]]],13],[14,13],[21,13],[[[22,[[0,[0,7]]]]],13],[[[23,[[0,[0,7]]]]],13],[[[24,[[0,[0,7]]]]],13],[15,13],[16,13],[[[17,[[0,[0,7]]]]],13],[25,13],[14,37],[21,37],[[[22,[[0,[0,7]]]]],37],[[[23,[[0,[0,7]]]]],37],[[[24,[[0,[0,7]]]]],37],[15,37],[16,37],[[[17,[[0,[0,7]]]]],37],[18,37],[25,37],[[[10,[38,[0,[0,7]]]]]],[[[12,[11,38,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]],39]],[[[12,[11,[0,[0,7]]]],39]],[[[10,[[0,[0,7]]]],39]],[[[12,[11,[0,[0,7]]]],39]],[[[8,[[0,[0,7]]]]],[[29,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[26,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],40],[8,37],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[8,37],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]],[[10,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]],[[12,[11,[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[8,13]],[[[8,[[0,[0,7]]]]]],[[8,13]],[8],[14],[21],[[[22,[[0,[0,7]]]]]],[[[23,[[0,[0,7]]]]]],[[[24,[[0,[0,7]]]]]],[15],[16],[[[17,[[0,[0,7]]]]]],[18],[25],[[]],[[]],[[]],[[]],[[],41],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[8,[[5,[35]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[8,13],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[8,[[0,[0,7]]]]],16],[[[8,[[0,[0,7]]]]],25],[13,8],[[13,[0,[0,7]]],[[8,[[0,[0,7]]]]]],[[],8],[[[0,[0,7]]],[[8,[[0,[0,7]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[42],[[42,42],42],[[42,42],42],[[42,42],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[[0,[0,7]]]]],13],[[[42,[[0,[0,7]]]]]],[[[42,[7,7,[0,[0,7]]]]],[[42,[7,7,[0,[0,7]]]]]],[43,43],[[[44,[[0,[0,7]]]]],[[44,[[0,[0,7]]]]]],[[[45,[[0,[0,7]]]]],[[45,[[0,[0,7]]]]]],[[[46,[[0,[0,7]]]]],[[46,[[0,[0,7]]]]]],[[[47,[[0,[0,7]]]]],[[47,[[0,[0,7]]]]]],[[[42,[7,7,[0,[0,7]]]],[42,[7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[42,2],[[],42],[[42,42],45],[[[42,[[0,[0,7]]]]],[[48,[[0,[0,7]]]]]],[[[42,[[0,[0,7]]]]],[[49,[[0,[0,7]]]]]],[[[49,[[0,[0,7]]]]]],[42,50],[[42,42],2],[[42,19]],[[42,19]],[[42,3],4],[[[43,[20]],3],4],[[[51,[20,[0,[0,7]]]],3],4],[[[48,[20,[0,[0,7]]]],3],4],[[44,3],4],[[45,3],4],[[46,3],4],[[47,3],4],[[[50,[20,[0,[0,7]]]],3],4],[[[52,[20,[0,[0,7]]]],3],4],[[[53,[20,[0,[0,7]]]],3],4],[[]],[8,42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,42],[42,37],[[[50,[[0,[0,7]]]]]],[[[52,[[0,[0,7]]]]]],[[[53,[[0,[0,7]]]]]],[42],[42],[42],[42],[42,2],[[[50,[[0,[0,7]]]]],[[52,[[0,[0,7]]]]]],[[[53,[[0,[0,7]]]]]],[42],[[42,42],44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,43],[[[42,[[0,[0,7]]]]],[[51,[[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[53,[[0,[0,7]]]]]],[[42,42],2],[[[42,[[0,[0,7]]]]],2],[[42,42],2],[[42,42],2],[[[42,[[0,[0,7]]]]],43],[[[42,[[0,[0,7]]]]],13],[43,13],[[[51,[[0,[0,7]]]]],13],[[[48,[[0,[0,7]]]]],13],[43,37],[[[51,[[0,[0,7]]]]],37],[[[48,[[0,[0,7]]]]],37],[[[49,[[0,[0,7]]]]],37],[44,37],[45,37],[46,37],[47,37],[[[50,[[0,[0,7]]]]]],[42,2],[[[52,[[0,[0,7]]]]]],[42,37],[[[52,[[0,[0,7]]]]]],[[42,13]],[[[42,[[0,[0,7]]]]]],[[42,13]],[42],[43],[[[51,[[0,[0,7]]]]]],[[[48,[[0,[0,7]]]]]],[[[49,[[0,[0,7]]]]]],[44],[45],[46],[47],[[42,42],42],[[42,42],46],[42,37],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[42,13],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[42,42],47],[13,[[42,[0]]]],[13,42],[[],[[42,[0]]]],[[],42],0,0,0,0,0,0,0,0,[[[40,[[0,[0,7]]]]]],[54],[54],[54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[[0,[0,7]]]],13],54],[[[40,[[0,[0,7]]]],54],13],[[[40,[[0,[0,7]]]]],13],[[[40,[[0,[0,7]]]]],13],[[[40,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]]],[54,54],[[[40,[7,[0,[0,7]]]]],[[40,[7,[0,[0,7]]]]]],[55,55],[[[40,[7,[0,[0,7]]]],[40,[7,[0,[0,7]]]]]],[[[40,[7,[0,[0,7]]]],[40,[7,[0,[0,7]]]],56]],[[]],[[]],[[]],[[54,54]],[[[40,[[0,[0,7]]]]],57],[[],[[40,[[0,[0,7,38]]]]]],[[[40,[[0,[0,7]]]]],[[58,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]],55],[[58,[[0,[0,7]]]]]],[54],[[[40,[[0,[0,7]]]]]],[[[59,[[0,[0,7]]]]]],[[[58,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]],54]],[[[40,[[0,[0,7]]]],36,60],2],[[[40,[[0,[0,7]]]],54]],[[[40,[[0,[0,7]]]],36,60],[[37,[54]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[[0,[0,7]]]],36,60],37],[[[40,[[0,[0,7]]]],60],37],[[[40,[[0,[0,7]]]],60],37],[[[40,[[0,[0,7]]]],36,60],37],[[[40,[[0,[0,7]]]],36,56],54],[[[40,[[0,[0,7]]]],36,56]],[[[40,[[0,[0,7]]]],36],54],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[[0,[0,7]]]]],[[59,[[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[[40,[[0,[0,7]]]],55],[[59,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]],2],[[[40,[[0,[0,7]]]]],55],[[[59,[[0,[0,7]]]]],55],[[[58,[[0,[0,7]]]]],55],[[[40,[[0,[0,7]]]],36],[[61,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]],13],[[],[[40,[0]]]],[[[0,[0,7]]],[[40,[[0,[0,7]]]]]],[55,[[37,[54]]]],[[[59,[[0,[0,7]]]]],37],[[[58,[[0,[0,7]]]]],37],[[[61,[[0,[0,7]]]]],[[37,[54]]]],[54],[[55,54]],[[55,54]],[[[40,[[0,[0,7]]]],54]],[[[40,[[0,[0,7]]]],36,60],37],[[[40,[[0,[0,7]]]],54],2],[[[40,[[0,[0,7]]]],13,56]],[[[40,[[0,[0,7]]]],13,56]],[55],[[[59,[[0,[0,7]]]]]],[[[58,[[0,[0,7]]]]]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[40,[[0,[0,7]]]],36],[[5,[54]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[40,[[0,[0,7]]]],13,56],[[5,[1]]]],[13,[[5,[[40,[0]],1]]]],[[13,[0,[0,7]]],[[5,[[40,[[0,[0,7]]]],1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[13,[[40,[0]]]],[[13,[0,[0,7]]],[[40,[[0,[0,7]]]]]],[54]],"p":[[4,"TryReserveError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"HashMap"],[4,"RawEntryMut"],[4,"Entry"],[8,"Sized"],[4,"EntryRef"],[15,"usize"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[8,"IntoIterator"],[8,"Debug"],[3,"IterMut"],[3,"IntoIter"],[3,"IntoKeys"],[3,"IntoValues"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Borrow"],[3,"OccupiedEntryRef"],[3,"VacantEntryRef"],[3,"OccupiedError"],[15,"u64"],[4,"Option"],[8,"Default"],[8,"FnOnce"],[3,"RawTable"],[3,"String"],[3,"HashSet"],[3,"Iter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Drain"],[3,"DrainFilter"],[4,"Entry"],[3,"IntoIter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Bucket"],[3,"RawIter"],[8,"Fn"],[3,"NonNull"],[3,"RawDrain"],[3,"RawIntoIter"],[8,"FnMut"],[3,"RawIterHash"],[13,"AllocError"],[4,"DefaultHashBuilder"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"]]},\
"image":{"doc":"Overview","t":[12,12,12,12,13,8,13,13,13,13,13,18,18,18,4,18,18,13,3,4,8,4,13,2,3,3,8,8,13,13,6,6,13,13,3,8,8,8,2,4,13,13,13,13,4,2,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,13,8,16,8,3,13,13,13,8,3,16,3,13,13,13,13,13,13,6,13,13,13,6,3,13,13,13,13,13,13,6,13,13,13,6,3,16,13,13,13,13,13,13,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,0,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,0,11,5,5,5,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,8,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,3,3,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,13,3,13,13,4,13,13,4,13,13,13,3,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,12,12,12,12,13,13,3,13,13,13,3,13,13,13,13,13,4,4,6,13,13,3,4,13,13,13,13,3,4,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,4,3,13,4,13,13,13,3,13,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,2,2,13,2,4,2,13,2,13,2,13,2,13,5,11,11,2,11,11,0,2,5,5,2,11,5,5,5,5,5,5,5,11,11,2,2,2,2,5,2,2,11,2,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,5,5,3,16,8,11,11,5,5,11,11,5,5,5,11,5,5,5,5,11,11,5,5,5,10,11,11,5,11,11,10,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12],"n":["0","0","0","0","A8","AnimationDecoder","Avif","Bgr8","Bgra8","Bmp","Bmp","CHANNEL_COUNT","COLOR_MODEL","COLOR_TYPE","ColorType","DEFAULT_MAX_VALUE","DEFAULT_MIN_VALUE","Dds","Delay","DynamicImage","EncodableLayout","ExtendedColorType","Farbfeld","FlatSamples","Frame","Frames","GenericImage","GenericImageView","Gif","Gif","GrayAlphaImage","GrayImage","Hdr","Ico","ImageBuffer","ImageDecoder","ImageDecoderRect","ImageEncoder","ImageError","ImageFormat","ImageLuma16","ImageLuma8","ImageLumaA16","ImageLumaA8","ImageOutputFormat","ImageResult","ImageRgb16","ImageRgb32F","ImageRgb8","ImageRgba16","ImageRgba32F","ImageRgba8","Jpeg","Jpeg","L1","L16","L16","L2","L4","L8","L8","La1","La16","La16","La2","La4","La8","La8","Luma","LumaA","OpenExr","Pixel","Pixel","PixelWithColorType","Pixels","Png","Png","Pnm","Primitive","Progress","Reader","Rgb","Rgb1","Rgb16","Rgb16","Rgb2","Rgb32F","Rgb32F","Rgb32FImage","Rgb4","Rgb8","Rgb8","RgbImage","Rgba","Rgba1","Rgba16","Rgba16","Rgba2","Rgba32F","Rgba32F","Rgba32FImage","Rgba4","Rgba8","Rgba8","RgbaImage","SubImage","Subpixel","Tga","Tiff","Tiff","Unknown","Unsupported","WebP","adjust_contrast","apply","apply","apply","apply","apply","apply2","apply2","apply2","apply2","apply2","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_without_alpha","apply_without_alpha","as_bytes","as_bytes","as_flat_samples","as_flat_samples_f32","as_flat_samples_mut","as_flat_samples_u16","as_flat_samples_u8","as_luma16","as_luma8","as_luma_alpha16","as_luma_alpha8","as_mut_luma16","as_mut_luma8","as_mut_luma_alpha16","as_mut_luma_alpha8","as_mut_rgb16","as_mut_rgb32f","as_mut_rgb8","as_mut_rgba16","as_mut_rgba32f","as_mut_rgba8","as_raw","as_rgb16","as_rgb32f","as_rgb8","as_rgba16","as_rgba32f","as_rgba8","bits_per_pixel","blend","blend","blend","blend","blend","blend_pixel","blend_pixel","blend_pixel","blur","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","brighten","buffer","buffer","buffer_mut","bytes_per_pixel","can_read","can_write","change_bounds","channel_count","channel_count","channels","channels","channels","channels","channels","channels4","channels4","channels4","channels4","channels4","channels_mut","channels_mut","channels_mut","channels_mut","channels_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codecs","collect_frames","color","color_type","convert","copy_from","copy_from","copy_within","copy_within","copy_within","crop","crop_imm","current","default","default","delay","deref","deref","deref_mut","deref_mut","dimensions","dimensions","dimensions","dimensions","dimensions","enumerate_pixels","enumerate_pixels_mut","enumerate_rows","enumerate_rows_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","expand_palette","expand_palette","extensions_str","filter3x3","flat","fliph","flipv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_channels","from_channels","from_channels","from_channels","from_channels","from_decoder","from_extension","from_fn","from_mime_type","from_numer_denom_ms","from_parts","from_path","from_pixel","from_raw","from_saturating_duration","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_vec","get_pixel","get_pixel","get_pixel","get_pixel","get_pixel_checked","get_pixel_mut","get_pixel_mut","get_pixel_mut","get_pixel_mut","get_pixel_mut_checked","grayscale","guess_format","has_alpha","has_color","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","huerotate","image_dimensions","imageops","in_bounds","in_bounds","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","inner","inner_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_bytes","into_flat_samples","into_frames","into_iter","into_iter","into_luma16","into_luma8","into_luma_alpha16","into_luma_alpha8","into_raw","into_reader","into_rgb16","into_rgb32f","into_rgb8","into_rgba16","into_rgba32f","into_rgba8","into_vec","invert","invert","invert","invert","invert","invert","io","left","load","load_from_memory","load_from_memory_with_format","map","map","map","map","map","map2","map2","map2","map2","map2","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_without_alpha","map_without_alpha","math","new","new","new","new","new_luma16","new_luma8","new_luma_a16","new_luma_a8","new_rgb16","new_rgb32f","new_rgb8","new_rgba16","new_rgba32f","new_rgba8","next","next","numer_denom_ms","open","original_color_type","original_color_type","partial_cmp","pixels","pixels","pixels","pixels_mut","put_pixel","put_pixel","put_pixel","put_pixel","read_image","read_image","read_image_with_progress","read_image_with_progress","read_rect","read_rect","read_rect_with_progress","remaining","resize","resize_exact","resize_to_fill","rotate180","rotate270","rotate90","rows","rows_mut","sample_layout","save","save","save_buffer","save_buffer_with_format","save_with_format","save_with_format","scanline_bytes","scanline_bytes","set_limits","set_limits","sub_image","sub_image","sub_image","thumbnail","thumbnail_exact","to_bytes","to_image","to_luma","to_luma","to_luma","to_luma","to_luma","to_luma16","to_luma32f","to_luma8","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha16","to_luma_alpha32f","to_luma_alpha8","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb16","to_rgb32f","to_rgb8","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba16","to_rgba32f","to_rgba8","top","total","total_bytes","total_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsafe_get_pixel","unsafe_get_pixel","unsafe_get_pixel","unsafe_put_pixel","unsafe_put_pixel","unsafe_put_pixel","unsharpen","view","view","view","width","width","width","width","write_buffer_with_format","write_image","write_to","write_to","0","0","0","0","0","0","0","0","0","0","0","0","0","ConvertBuffer","EnumeratePixels","EnumeratePixelsMut","EnumerateRows","EnumerateRowsMut","Pixels","PixelsMut","Rows","RowsMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","convert","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","bmp","gif","jpeg","png","tiff","webp","BmpDecoder","BmpEncoder","borrow","borrow","borrow_mut","borrow_mut","color_type","dimensions","encode","encode_with_palette","from","from","get_palette","into","into","into_reader","new","new","read_image","read_rect_with_progress","set_indexed_color","try_from","try_from","try_into","try_into","type_id","type_id","write_image","Finite","GifDecoder","GifEncoder","GifReader","Infinite","Repeat","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","color_type","dimensions","encode","encode_frame","encode_frames","fmt","from","from","from","from","into","into","into","into","into_frames","into_reader","new","new","new_with_speed","read","read_image","read_to_end","set_repeat","to_owned","try_encode_frames","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_limits","0","Centimeters","Inches","JpegDecoder","JpegEncoder","PixelAspectRatio","PixelDensity","PixelDensityUnit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color_type","default","density","dimensions","dpi","encode","encode_image","eq","eq","fmt","fmt","from","from","from","from","into","into","into","into","into_reader","new","new","new_with_quality","read_image","scale","set_pixel_density","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","write_image","Adaptive","ApngDecoder","Avg","Best","CompressionType","Default","Fast","FilterType","Huffman","NoFilter","Paeth","PngDecoder","PngEncoder","PngReader","Rle","Sub","Up","apng","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color_type","default","default","dimensions","encode","eq","eq","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_frames","into_reader","is_apng","new","new","new_with_quality","read","read_image","read_to_end","scanline_bytes","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_limits","write_image","TiffDecoder","TiffEncoder","TiffReader","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","color_type","dimensions","encode","from","from","from","into","into","into","into_reader","new","new","read","read_image","read_to_end","set_limits","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_image","WebPDecoder","borrow","borrow_mut","color_type","dimensions","from","into","into_frames","into_reader","new","read_image","try_from","try_into","type_id","vp8","Frame","Vp8Decoder","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decode_frame","default","fmt","for_display","from","from","get_buf_size","height","into","into","keyframe","new","pixel_type","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ubuf","vbuf","width","ybuf","Color","Decoding","DecodingError","DimensionError","DimensionMismatch","Encoding","EncodingError","Exact","FailedAlready","Format","Generic","GenericFeature","ImageError","ImageFormatHint","ImageResult","InsufficientMemory","IoError","LimitError","LimitErrorKind","Limits","Name","NoMoreData","Parameter","ParameterError","ParameterErrorKind","PathExtension","Unknown","Unsupported","Unsupported","UnsupportedError","UnsupportedErrorKind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_hint","format_hint","format_hint","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_format_and_kind","from_format_hint","from_format_hint","from_kind","from_kind","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","kind","kind","kind","new","new","provide","provide","provide","provide","provide","provide","source","source","source","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","limits","supported","0","0","0","0","ColumnMajorPacked","Error","FlatSamples","ImagePacked","NormalForm","NormalFormRequired","PixelPacked","RowMajorPacked","SampleLayout","TooLarge","Unaliased","View","ViewMut","WrongColor","as_mut","as_mut_slice","as_ref","as_slice","as_view","as_view_mut","as_view_with_mut_samples","blend_pixel","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","bounds","channel_stride","channels","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_hint","column_major_packed","dimensions","dimensions","eq","eq","eq","extents","extents","fits","fits","flat","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_mut_sample","get_mut_sample","get_mut_sample","get_pixel","get_pixel","get_pixel_mut","get_sample","get_sample","get_sample","has_aliased_samples","has_aliased_samples","hash","hash","hash","height","height_stride","image_mut_slice","image_mut_slice","image_mut_slice","image_slice","image_slice","image_slice","in_bounds","in_bounds","in_bounds","in_bounds","in_bounds_index","in_bounds_index","index","index","index","index_ignoring_bounds","index_ignoring_bounds","index_mut","into","into","into","into","into","into","into_inner","into_inner","is_normal","is_normal","layout","min_length","min_length","min_length","min_length","partial_cmp","provide","put_pixel","row_major_packed","samples","samples","samples","shrink_to","shrink_to","shrink_to","shrink_to","strides_cwh","strides_cwh","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into_buffer","try_upgrade","type_id","type_id","type_id","type_id","type_id","type_id","width","width_stride","with_monocolor","0","0","BiLevel","CatmullRom","CatmullRom","ColorMap","FilterType","Gaussian","Gaussian","Lanczos3","Lanczos3","Nearest","Nearest","Triangle","Triangle","blur","borrow","borrow_mut","brighten","clone","clone_into","colorops","contrast","crop","crop_imm","dither","eq","filter3x3","flip_horizontal","flip_horizontal_in","flip_horizontal_in_place","flip_vertical","flip_vertical_in","flip_vertical_in_place","fmt","from","grayscale","grayscale_alpha","grayscale_with_type","grayscale_with_type_alpha","horizontal_gradient","huerotate","index_colors","into","invert","overlay","overlay_bounds","replace","resize","rotate180","rotate180_in","rotate180_in_place","rotate270","rotate270_in","rotate90","rotate90_in","thumbnail","tile","to_owned","try_from","try_into","type_id","unsharpen","vertical_gradient","BiLevel","Color","ColorMap","borrow","borrow_mut","brighten","brighten_in_place","clone","clone_into","contrast","contrast_in_place","dither","from","grayscale","grayscale_alpha","grayscale_with_type","grayscale_with_type_alpha","has_lookup","has_lookup","huerotate","huerotate_in_place","index_colors","index_of","index_of","into","invert","lookup","lookup","map_color","map_color","to_owned","try_from","try_into","type_id","LimitSupport","Limits","Reader","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_dimensions","check_support","clear_format","clone","clone","clone_into","clone_into","decode","default","default","eq","eq","fmt","fmt","format","free","free_usize","from","from","from","hash","hash","into","into","into","into_dimensions","into_inner","limits","max_alloc","max_image_height","max_image_width","new","no_limits","no_limits","open","reserve","reserve_usize","set_format","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_format","with_guessed_format","Rect","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","height","into","to_owned","try_from","try_into","type_id","width","x","y"],"q":["image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::DynamicImage","","","","","","","","","","image::ExtendedColorType","image::ImageOutputFormat","","image::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::codecs","","","","","","image::codecs::bmp","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::codecs::gif","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::codecs::gif::Repeat","image::codecs::jpeg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::codecs::png","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::codecs::tiff","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::codecs::webp","","","","","","","","","","","","","","","image::codecs::webp::vp8","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::errorimage::error::ImageError","","","","","","image::error::ImageFormatHint","","","image::error::LimitErrorKind","","image::error::ParameterErrorKind","image::error::UnsupportedErrorKind","","","image::flatimage::flat::Error","","image::imageops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::imageops::colorops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","image::math","","","","","","","","","","","","","","","","",""],"d":["","","","","Pixel is 8-bit alpha","AnimationDecoder trait","An Image in AVIF format.","Pixel contains 8-bit B, G and R channels","Pixel is 8-bit BGR with an alpha channel","An Image in BMP Format","An Image in BMP Format","The number of channels of this pixel type.","A string that can help to interpret the meaning each …","This pixel has the format of one of the predefined …","An enumeration over supported color types and bit depths","The maximum value for this type of primitive within the …","The minimum value for this type of primitive within the …","An Image in DDS Format","The delay of a frame relative to the previous one.","A Dynamic Image","Types which are safe to treat as an immutable byte slice …","An enumeration of color types encountered in image formats.","An Image in farbfeld Format","","A single animation frame","An implementation dependent iterator, reading the frames …","A trait for manipulating images.","Trait to inspect an image.","An Image in GIF Format","An Image in GIF Format","Sendable grayscale + alpha channel image buffer","Sendable grayscale image buffer","An Image in Radiance HDR Format","An Image in ICO Format","Generic image buffer","The trait that all decoders implement","Specialized image decoding not be supported by all formats","The trait all encoders implement","","An enumeration of supported image formats. Not all formats …","Each pixel in this image is 16-bit Luma","Each pixel in this image is 8-bit Luma","Each pixel in this image is 16-bit Luma with alpha","Each pixel in this image is 8-bit Luma with alpha","An enumeration of supported image formats for encoding.","","Each pixel in this image is 16-bit Rgb","Each pixel in this image is 32-bit float Rgb","Each pixel in this image is 8-bit Rgb","Each pixel in this image is 16-bit Rgb with alpha","Each pixel in this image is 32-bit float Rgb with alpha","Each pixel in this image is 8-bit Rgb with alpha","An Image in JPEG Format","An Image in JPEG Format with specified quality","Pixel is 1-bit luminance","Pixel is 16-bit luminance","Pixel is 16-bit luminance","Pixel is 2-bit luminance","Pixel is 4-bit luminance","Pixel is 8-bit luminance","Pixel is 8-bit luminance","Pixel is 1-bit luminance with an alpha channel","Pixel is 16-bit luminance with an alpha channel","Pixel is 16-bit luminance with an alpha channel","Pixel is 2-bit luminance with an alpha channel","Pixel is 4-bit luminance with an alpha channel","Pixel is 8-bit luminance with an alpha channel","Pixel is 8-bit luminance with an alpha channel","Grayscale colors.","Grayscale colors + alpha channel","An Image in OpenEXR Format","A generalized pixel.","The type of pixel.","The pixel with an associated <code>ColorType</code>. Not all possible …","Immutable pixel iterator","An Image in PNG Format","An Image in PNG Format","An Image in general PNM Format","The type of each channel in a pixel. For example, this can …","Represents the progress of an image operation.","The type of reader produced by <code>into_reader</code>.","RGB colors.","Pixel contains 1-bit R, G and B channels","Pixel is 16-bit RGB","Pixel contains 16-bit R, G and B channels","Pixel contains 2-bit R, G and B channels","Pixel is 32-bit float RGB","Pixel is 32-bit float RGB","An image buffer for 32-bit float RGB pixels, where the …","Pixel contains 4-bit R, G and B channels","Pixel contains 8-bit R, G and B channels","Pixel contains 8-bit R, G and B channels","Sendable Rgb image buffer","RGB colors + alpha channel","Pixel is 1-bit RGB with an alpha channel","Pixel is 16-bit RGBA","Pixel is 16-bit RGB with an alpha channel","Pixel is 2-bit RGB with an alpha channel","Pixel is 32-bit float RGBA","Pixel is 32-bit float RGBA","An image buffer for 32-bit float RGBA pixels, where the …","Pixel is 4-bit RGB with an alpha channel","Pixel is 8-bit RGB with an alpha channel","Pixel is 8-bit RGB with an alpha channel","Sendable Rgb + alpha channel image buffer","A View into another image","The scalar type that is used to store each channel in this …","An Image in TGA Format","An Image in TIFF Format","An Image in TIFF Format","Pixel is of unknown color type with the specified bits per …","A value for signalling an error: An unsupported format was …","An Image in WEBP Format","Adjust the contrast of this image. <code>contrast</code> is the amount …","Apply the function <code>f</code> to each channel of this pixel.","","","","","Apply the function <code>f</code> to each channel of this pixel and …","","","","","Apply the function <code>f</code> to each channel except the alpha …","","","","","Apply the function <code>f</code> to each channel except the alpha …","Apply the function <code>f</code> to each channel except the alpha …","Get the bytes of this value.","Return this image’s pixels as a native endian byte slice.","Return a view on the raw sample buffer.","Return a view on the raw sample buffer for 32bit per …","Return a mutable view on the raw sample buffer.","Return a view on the raw sample buffer for 16 bit per …","Return a view on the raw sample buffer for 8 bit per …","Return a reference to an 16bit Grayscale image","Return a reference to an 8bit Grayscale image","Return a reference to an 16bit Grayscale image with an …","Return a reference to an 8bit Grayscale image with an …","Return a mutable reference to an 16bit Grayscale image","Return a mutable reference to an 8bit Grayscale image","Return a mutable reference to an 16bit Grayscale image …","Return a mutable reference to an 8bit Grayscale image with …","Return a mutable reference to an 16bit RGB image","Return a mutable reference to an 32bit RGB image","Return a mutable reference to an 8bit RGB image","Return a mutable reference to an 16bit RGBA image","Return a mutable reference to an 16bit RGBA image","Return a mutable reference to an 8bit RGBA image","Returns the underlying raw buffer","Return a reference to an 16bit RGB image","Return a reference to an 32bit RGB image","Return a reference to an 8bit RGB image","Return a reference to an 16bit RGBA image","Return a reference to an 32bit RGBA image","Return a reference to an 8bit RGBA image","Returns the number of bits contained in a pixel of …","Blend the color of a given pixel into ourself, taking into …","","","","","Put a pixel at location (x, y), taking into account alpha …","Put a pixel at location (x, y), taking into account alpha …","","Performs a Gaussian blur on this image. <code>sigma</code> is a measure …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bounding rectangle of this image.","","","Brighten the pixels of this image. <code>value</code> is the amount to …","Iterators and other auxiliary structure for the <code>ImageBuffer</code>…","Returns the image buffer","Returns a mutable image buffer","Returns the number of bytes contained in a pixel of …","Return if the ImageFormat can be decoded by the lib.","Return if the ImageFormat can be encoded by the lib.","Change the coordinates of this subimage.","Returns the number of color channels that make up this …","Get the number of channels for colors of this type.","Returns the components as a slice.","","","","","Returns the channels of this pixel as a 4 tuple. If the …","","","","","Returns the components as a mutable slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encoding and decoding for various image file formats.","Steps through the iterator from the current frame until …","Return this image’s color type.","Returns the color type of the image data produced by this …","Examples","Copies all of the pixels from another image into this …","Copies all of the pixels from another image into this …","Copies all of the pixels from one part of this image to …","Copies all of the pixels from one part of this image to …","","Return a cut-out of this image delimited by the bounding …","Return a cut-out of this image delimited by the bounding …","A measure of completed decoding.","","","Delay of this frame","","","","","Returns a tuple containing the width and height of the …","The width and height of this image.","","The width and height of this image.","","Enumerates over the pixels of the image. The iterator …","Enumerates over the pixels of the image. The iterator …","Enumerates over the rows of the image. The iterator yields …","Enumerates over the rows of the image. The iterator yields …","","","","","","","","","","","","","Contains detailed error representation.","Expands a color palette by re-using the existing buffer. …","Expands a color palette by re-using the existing buffer. …","Return a list of applicable extensions for this format.","Filters this image with the specified 3x3 kernel.","Image representations for ffi.","Flip this image horizontally","Flip this image vertically","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a pixel from the 4 channels a, b, c and d. If …","","","","","Decodes an encoded image into a dynamic image.","Return the image format specified by a path’s file …","Constructs a new ImageBuffer by repeated application of …","Return the image format specified by a MIME type.","Create a delay from a ratio of milliseconds.","Constructs a new frame","Return the image format specified by the path’s file …","Constructs a new ImageBuffer by copying a pixel","Constructs a buffer from a generic container (for example …","Convert from a duration, clamped between 0 and an …","Returns a view into a slice.","","","","","Returns mutable view into a mutable slice.","","","","","Creates an image buffer out of an existing buffer. Returns …","Returns the pixel located at (x, y). Indexed from top left.","Gets a reference to the pixel at location <code>(x, y)</code>","","","Gets a reference to the pixel at location <code>(x, y)</code> or …","Gets a reference to the mutable pixel at location <code>(x, y)</code>. …","Gets a reference to the mutable pixel at location <code>(x, y)</code>","","Do not use is function: It is unimplemented!","Gets a reference to the mutable pixel at location <code>(x, y)</code> …","Return a grayscale version of this image. Returns <code>Luma</code> …","Guess image format from memory block","Returns if there is an alpha channel.","Returns false if the color scheme is grayscale, true …","","","","","","","","","The height of this image.","The height of this image.","The height of this image.","Returns the height of the underlying image","Hue rotate the supplied image. <code>value</code> is the degrees to …","Read a tuple containing the (width, height) of the image …","Image Processing Functions","Returns true if this x, y coordinate is contained inside …","Returns true if this x, y coordinate is contained inside …","","","","","","","","","","","Get a reference to the underlying image.","Get a mutable reference to the underlying image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the image buffer","Return this image’s pixels as a byte vector. If the …","Return the raw sample buffer with its stride an dimension …","Consume the decoder producing a series of frames.","","","Consume the image and returns a Luma image.","Consume the image and returns a Luma image.","Consume the image and returns a LumaA image.","Consume the image and returns a LumaA image.","Returns the underlying raw buffer","Returns a reader that can be used to obtain the bytes of …","Consume the image and returns a RGB image.","Consume the image and returns a RGB image.","Consume the image and returns a RGB image.","Consume the image and returns a RGBA image.","Consume the image and returns a RGBA image.","Consume the image and returns a RGBA image.","Consumes the image buffer and returns the underlying data …","Invert this pixel","","","","","Invert the colors of this image. This method operates …","Input and output of images.","Returns the x offset","Create a new image from a Reader.","Create a new image from a byte slice","Create a new image from a byte slice","Apply the function <code>f</code> to each channel of this pixel.","","","","","Apply the function <code>f</code> to each channel of this pixel and …","","","","","Apply the function <code>f</code> to each channel except the alpha …","","","","","Apply the function <code>f</code> to each channel except the alpha …","Apply the function <code>f</code> to each channel except the alpha …","Mathematical helper functions and types.","Creates a new <code>Frames</code> from an implementation specific …","Constructs a new frame without any delay.","Creates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.","Construct a new subimage The coordinates set the position …","Creates a dynamic image backed by a buffer of gray pixels.","Creates a dynamic image backed by a buffer of gray pixels.","Creates a dynamic image backed by a buffer of gray pixels …","Creates a dynamic image backed by a buffer of gray pixels …","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","","","The numerator and denominator of the delay in milliseconds.","Open the image located at the path specified. The image’…","Returns the color type of the image file before decoding","Returns the color type of the image file before decoding","","Returns an Iterator over the pixels of this image. The …","Returns an Iterator over the pixels of this image. The …","Returns an iterator over the pixels of this image. The …","Returns an iterator over the mutable pixels of this image.","Put a pixel at location (x, y). Indexed from top left.","Puts a pixel at location <code>(x, y)</code>","","","Returns all the bytes in the image.","Returns all the bytes in the image.","Same as <code>read_image</code> but periodically calls the provided …","Same as <code>read_image</code> but periodically calls the provided …","Decode a rectangular section of the image; see …","Decode a rectangular section of the image; see …","Decode a rectangular section of the image, periodically …","Calculate a measure for remaining decoding work.","Resize this image using the specified filter algorithm. …","Resize this image using the specified filter algorithm. …","Resize this image using the specified filter algorithm. …","Rotate this image 180 degrees clockwise.","Rotate this image 270 degrees clockwise.","Rotate this image 90 degrees clockwise.","Returns an iterator over the rows of this image.","Returns an iterator over the mutable rows of this image.","Get the format of the buffer when viewed as a matrix of …","Saves the buffer to a file at the path specified.","Saves the buffer to a file at the path specified.","Saves the supplied buffer to a file at the path specified.","Saves the supplied buffer to a file at the path specified …","Saves the buffer to a file at the specified path in the …","Saves the buffer to a file at the specified path in the …","Returns the minimum number of bytes that can be …","Returns the minimum number of bytes that can be …","Set decoding limits for this decoder. See <code>Limits</code> for the …","Set decoding limits for this decoder. See <code>Limits</code> for the …","Returns a mutable subimage that is a view into this image. …","Returns a mutable subimage that is a view into this image. …","Create a mutable sub-view of the image.","Scale this image down to fit within a specific size. …","Scale this image down to a specific size. Returns a new …","Return a copy of this image’s pixels as a byte vector. …","Convert this subimage to an ImageBuffer","Convert this pixel to luma","","","","","Returns a copy of this image as a Luma image.","Returns a copy of this image as a Luma image.","Returns a copy of this image as a Luma image.","Convert this pixel to luma with an alpha channel","","","","","Returns a copy of this image as a LumaA image.","Returns a copy of this image as a LumaA image.","Returns a copy of this image as a LumaA image.","","","","","","","","","","","","","","","","Convert this pixel to RGB","","","","","Returns a copy of this image as an RGB image.","Returns a copy of this image as an RGB image.","Returns a copy of this image as an RGB image.","Convert this pixel to RGB with an alpha channel","","","","","Returns a copy of this image as an RGBA image.","Returns a copy of this image as an RGBA image.","Returns a copy of this image as an RGBA image.","Returns the y offset","A measure of all necessary decoding work.","Returns the total number of bytes in the decoded image.","Returns the total number of bytes in the decoded image.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the pixel located at (x, y). Indexed from top left.","Returns the pixel located at (x, y). Indexed from top left.","Returns the pixel located at (x, y), ignoring bounds …","Puts a pixel at location (x, y). Indexed from top left.","Puts a pixel at location (x, y). Indexed from top left.","Puts a pixel at location (x, y), ignoring bounds checking.","Performs an unsharpen mask on this image. <code>sigma</code> is the …","Returns a subimage that is an immutable view into this …","Returns a subimage that is an immutable view into this …","Create a sub-view of the image.","The width of this image.","The width of this image.","The width of this image.","Returns the width of the underlying image","Writes the supplied buffer to a writer in the specified …","Writes all the bytes in an image to the encoder.","Writes the buffer to a writer in the specified format.","Encode this image and write it to <code>w</code>.","","","","","","","","","","","","","","Provides color conversions for whole image buffers.","Enumerate the pixels of an image.","Enumerate the pixels of an image.","Enumerate the rows of an image.","Enumerate the rows of an image.","Iterate over pixel refs.","Iterate over mutable pixel refs.","Iterate over rows of an image","Iterate over mutable rows of an image","","","","","","","","","","","","","","","","","","","","","","","","","Converts <code>self</code> to a buffer of type T","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decoding and Encoding of BMP Images","Decoding of GIF Images","Decoding and Encoding of JPEG Images","Decoding and Encoding of PNG Images","Decoding and Encoding of TIFF Images","Decoding and Encoding of WebP Images","A bmp decoder","The representation of a BMP encoder.","","","","","","","Encodes the image <code>image</code> that has dimensions <code>width</code> and …","Same as <code>encode</code>, but allow a palette to be passed in. The …","Returns the argument unchanged.","Returns the argument unchanged.","Get the palette that is embedded in the BMP image, if any.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>.","","","If true, the palette in BMP does not apply to the image …","","","","","","","","Finite number of repetitions","GIF decoder","GIF encoder.","Wrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>","Looping GIF","Number of repetitions for a GIF animation","","","","","","","","","","","","","Encode a single image.","Encode one frame of animation.","Encodes Frames. Consider using <code>try_encode_frames</code> instead …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new decoder that decodes the input steam <code>r</code>","Creates a new GIF encoder.","Create a new GIF encoder, and has the speed parameter <code>speed</code>…","","","","Set the repeat behaviour of the encoded GIF","","Try to encode a collection of <code>ImageResult&lt;animation::Frame&gt;</code>…","","","","","","","","","","","","","Creates a new decoder that decodes the input steam <code>r</code>, …","","Pixels per centimeter","Pixels per inch (2.54 cm)","JPEG decoder","The representation of a JPEG encoder","Represents the absence of a unit, the values indicate only …","Represents the pixel density of an image","Represents a unit in which the density of an image is …","","","","","","","","","","","","","","Returns a pixel density with a pixel aspect ratio of 1","A couple of values for (Xdensity, Ydensity)","","Creates the most common pixel density type: the horizontal …","Encodes the image stored in the raw byte buffer <code>image</code> that …","Encodes the given image.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>","Create a new encoder that writes its output to <code>w</code>, and has …","","Configure the decoder to scale the image during decoding.","Set the pixel density of the images the encoder will …","","","","","","","","","","","","","","","The unit in which the density is measured","","Uses a heuristic to select one of the preceding filters …","An <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.","Filters based on the average of left and right neighbor …","High compression level","Compression level of a PNG encoder. The default setting is …","Default compression level","Fast, minimal compression","Filter algorithms used to process image data to improve …","Huffman coding compression","No processing done, best used for low bit depth grayscale …","Algorithm that takes into account the left, upper left, …","PNG decoder","PNG encoder","Png Reader","Run-length encoding compression","Filters based on previous pixel in the same scanline","Filters based on the scanline above","Turn this into an iterator over the animation frames.","","","","","","","","","","","","","","","","","","","","","Encodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>…","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns if the image contains an animation.","Creates a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>","Create a new encoder that writes its output to <code>w</code> with …","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new decoder that decodes from the stream <code>r</code> with …","Write a PNG image with the specified width, height, and …","Decoder for TIFF images.","Encoder for tiff images","Wrapper struct around a <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code>","","","","","","","","","Encodes the image <code>image</code> that has dimensions <code>width</code> and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new TiffDecoder.","Create a new encoder that writes its output to <code>w</code>","","","","","","","","","","","","","","","WebP Image format decoder. Currently only supports lossy …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Create a new WebPDecoder from the Reader <code>r</code>. This function …","","","","","An implementation of the VP8 Video Codec","A Representation of the last decoded video frame","VP8 Decoder","","","","","","","Decodes the current frame","","","Indicates whether this frame is intended for display","Returns the argument unchanged.","Returns the argument unchanged.","Gets the buffer size","The height of the luma plane","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Indicates whether this frame is a keyframe","Create a new decoder. The reader must present a raw vp8 …","The pixel type of the frame as defined by Section 9.2 of …","","","","","","","","The blue plane of the frame","The red plane of the frame","The width of the luma plane","The luma plane of the frame","The required color type can not be handled.","An error was encountered while decoding.","An error was encountered while decoding an image.","The resulting image exceed dimension limits in either …","The dimensions passed are wrong.","An error was encountered while encoding.","An error was encountered while encoding an image.","The format is known exactly.","Repeated an operation for which error that could not be …","An image format is not supported.","A string describing the parameter. This is discouraged and …","Some feature specified by string. This is discouraged and …","The generic error type for image operations.","A best effort representation for image formats.","Result of an image decoding/encoding process","The operation would have performed an allocation larger …","An error occurred while interacting with the environment.","Completing the operation would have required more …","Indicates the limit that prevented an operation from …","Completing the operation would have required more …","The format can be identified by a name.","The end of the image has been reached.","An error was encountered in input arguments.","An error was encountered in inputs arguments.","Details how a parameter is malformed.","A common path extension for the format is known.","The format is not known or could not be determined.","An operation can not be completed by the chosen …","The specified strict limits are not supported for this …","The implementation for an operation was not provided.","Details what feature is not supported.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the image format associated with this error.","Return the image format associated with this error.","Returns the image format associated with this error.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Create an <code>UnsupportedError</code> for an image with details on …","Create an <code>EncodingError</code> for an image format.","Create a <code>DecodingError</code> for an image format.","Construct a <code>ParameterError</code> directly from a corresponding …","Construct a generic <code>LimitError</code> directly from a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the corresponding <code>UnsupportedErrorKind</code> of the …","Returns the corresponding <code>ParameterErrorKind</code> of the error.","Returns the corresponding <code>LimitErrorKind</code> of the error.","Create an <code>EncodingError</code> that stems from an arbitrary error …","Create a <code>DecodingError</code> that stems from an arbitrary error …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The given limits","The supported strict limits","","","","","The samples are in column-major form and all samples are …","Denotes invalid flat sample buffers when trying to convert …","A flat buffer over a (multi channel) image.","All samples are packed.","Different normal forms of buffers.","The represented image can not use this representation.","At least pixels are packed.","The samples are in row-major form and all samples are …","A ffi compatible description of a sample buffer.","The represented image was too large.","No pixel aliases another.","A flat buffer that can be used as an image view.","A mutable owning version of a flat buffer.","The color format did not match the channel count.","Get a mutable reference based version.","View the samples as a slice.","Get a reference based version.","View the samples as a slice.","View this buffer as an image over some type of pixel.","Interpret this buffer as a mutable image.","View this buffer but keep mutability at a sample level.","","","","","","","","","","","","","","Tuple of bounds in the order of coordinate inputs.","Tuple of bounds in the order of coordinate inputs.","","","Add this to an index to get to the sample in the next …","The number of channels in the color representation of the …","","","","","","","","","","","","","Supplementary color information.","Describe a column-major image packed in all directions.","","","","","","Get the dimensions <code>(channels, width, height)</code>.","Get the dimensions <code>(channels, width, height)</code>.","Check if a buffer of length <code>len</code> is large enough.","Check if a buffer of length <code>len</code> is large enough.","Get a reference on the inner sample descriptor.","Get a reference on the sample buffer descriptor.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a mutable reference to a single sample.","Get a mutable reference to a selected subpixel if it is …","Get a mutable reference to a selected sample.","","","","Get a reference to a single sample.","Get a reference to a selected subpixel if it is in-bounds.","Get a reference to a selected subpixel.","If there are any samples aliasing each other.","If there are any samples aliasing each other.","","","","The height of the represented image.","Add this to an index to get to the next sample in …","Mutable portion of the buffer that holds sample values.","Return the mutable portion of the buffer that holds sample …","Return the mutable buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Check that the pixel and the channel index are in bounds.","Check that the pixel and the channel index are in bounds.","","","Get an index provided it is inbouds.","Get an index provided it is inbouds.","Resolve the index of a particular sample.","Return a reference to a single sample at specified …","Resolve the index of a particular sample.","Get the theoretical position of sample (x, y, channel).","Get the theoretical position of sample (channel, x, y).","Return a mutable reference to a single sample at specified …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Take out the sample buffer.","Take out the sample buffer.","Check if a buffer fulfills the requirements of a normal …","Check if a buffer fulfills the requirements of a normal …","A <code>repr(C)</code> description of the layout of buffer samples.","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Compares the logical preconditions.","","","Describe a row-major image packed in all directions.","Get a reference on the inner buffer.","Get a reference on the inner buffer.","Underlying linear container holding sample values.","Shrink the image to the minimum of current and given …","Shrink the image to the minimum of current and given …","Shrink the inner image.","Shrink the inner image.","Get the strides for indexing matrix-like <code>[(c, w, h)]</code>.","Get the strides for indexing matrix-like <code>[(c, w, h)]</code>.","","","","","","","","Copy the data into an owned vector.","","","","","","","","","","","","","Move the data into an image buffer.","Try to convert this into an image with mutable pixels.","","","","","","","The width of the represented image.","Add this to an index to get to the next sample in …","Create a monocolor image from a single pixel.","","","Color operations","","Cubic Filter","Color operations","Available Sampling Filters.","","Gaussian Filter","","Lanczos with window 3","","Nearest Neighbor","","Linear Filter","Performs a Gaussian blur on the supplied image. <code>sigma</code> is a …","","","Color operations","","","Functions for altering and converting the color of …","Color operations","Return a mutable view into an image The coordinates set …","Return an immutable view into an image The coordinates set …","Color operations","","Perform a 3x3 box filter on the supplied image. <code>kernel</code> is …","Flip an image horizontally","Flip an image horizontally and put the result into the …","Flip an image horizontally in place.","Flip an image vertically","Flip an image vertically and put the result into the …","Flip an image vertically in place.","","Returns the argument unchanged.","Color operations","Color operations","Color operations","Color operations","Fill the image with a linear horizontal gradient","Color operations","Color operations","Calls <code>U::from(self)</code>.","Color operations","Overlay an image at a given coordinate (x, y)","Calculate the region that can be copied from top to bottom.","Replace the contents of an image at a given coordinate (x, …","Resize the supplied image to the specified dimensions. …","Rotate an image 180 degrees clockwise.","Rotate an image 180 degrees clockwise and put the result …","Rotate an image 180 degrees clockwise in place.","Rotate an image 270 degrees clockwise.","Rotate an image 270 degrees clockwise and put the result …","Rotate an image 90 degrees clockwise.","Rotate an image 90 degrees clockwise and put the result …","Resize the supplied image to the specific dimensions.","Tile an image by repeating it multiple times","","","","","Performs an unsharpen mask on the supplied image. <code>sigma</code> is …","Fill the image with a linear vertical gradient","A bi-level color map","The color type on which the map operates on","A color map","","","Brighten the supplied image. <code>value</code> is the amount to …","Brighten the supplied image in place. <code>value</code> is the amount …","","","Adjust the contrast of the supplied image. <code>contrast</code> is the …","Adjust the contrast of the supplied image in place. …","Reduces the colors of the image using the supplied …","Returns the argument unchanged.","Convert the supplied image to grayscale. Alpha channel is …","Convert the supplied image to grayscale. Alpha channel is …","Convert the supplied image to a grayscale image with the …","Convert the supplied image to a grayscale image with the …","Determine if this implementation of ColorMap overrides the …","Indicate NeuQuant implements <code>lookup</code>.","Hue rotate the supplied image. <code>value</code> is the degrees to …","Hue rotate the supplied image in place. <code>value</code> is the …","Reduces the colors using the supplied <code>color_map</code> and …","Returns the index of the closest match of <code>color</code> in the …","","Calls <code>U::from(self)</code>.","Invert each pixel within the supplied image. This function …","Looks up color by index in the color map.  If <code>idx</code> is out …","","Maps <code>color</code> to the closest color in the color map.","","","","","","Set of supported strict limits for a decoder.","Resource limits for decoding.","A multi-format image reader.","","","","","","","This function checks the <code>max_image_width</code> and …","This function checks that all currently set strict limits …","Remove the current information on the image format.","","","","","Read the image (replaces <code>load</code>).","","","","","","","Get the currently determined format.","This function increases the <code>max_alloc</code> limit with amount. …","This function acts identically to [<code>free</code>], but takes a <code>usize</code>…","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Read the image dimensions.","Unwrap the reader.","Set a custom set of decoding limits.","The maximum allowed sum of allocations allocated by the …","The maximum allowed image height. This limit is strict. …","The maximum allowed image width. This limit is strict. The …","Create a new image reader without a preset format.","Disable all decoding limits.","Disable all limits.","Open a file to read, format will be guessed from path.","This function checks that the current limit allows for …","This function acts identically to [<code>reserve</code>], but takes a …","Supply the format as which to interpret the read image.","","","","","","","","","","","","Construct a reader with specified format.","Make a format guess based on the content, replacing it on …","A Rectangle defined by its top left corner, width and …","","","","","","","Returns the argument unchanged.","","The rectangle’s height.","Calls <code>U::from(self)</code>.","","","","","The rectangle’s width.","The x coordinate of the top left corner.","The y coordinate of the top left corner."],"i":[4,5,6,7,26,0,23,26,26,23,29,36,36,120,0,3,3,23,0,0,0,0,23,0,0,0,0,0,23,29,0,0,23,23,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,23,29,26,17,26,26,26,17,26,26,17,26,26,26,17,26,0,0,23,0,56,0,0,23,29,23,0,0,48,0,26,17,26,26,17,26,0,26,17,26,0,0,26,17,26,26,17,26,0,26,17,26,0,0,36,23,23,29,26,29,23,1,36,4,5,6,7,36,4,5,6,7,36,4,5,6,7,36,36,121,1,8,1,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,17,36,4,5,6,7,122,8,1,1,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,56,8,1,1,0,22,22,17,23,23,25,17,26,36,4,5,6,7,36,4,5,6,7,36,4,5,6,7,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,0,33,1,48,8,122,122,122,122,8,1,1,30,8,1,22,8,25,8,25,48,56,8,8,1,8,8,8,8,27,8,17,26,4,5,6,7,1,23,29,30,0,11,8,23,1,0,1,1,27,8,17,26,4,5,6,7,1,23,29,30,32,33,22,27,8,17,26,26,4,4,5,5,6,6,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,23,29,29,30,32,25,36,4,5,6,7,1,23,8,23,27,22,23,8,8,27,36,4,5,6,7,36,4,5,6,7,8,56,8,8,1,8,122,8,8,1,8,1,0,17,17,8,17,26,4,5,6,7,23,56,56,8,1,1,0,0,56,56,8,4,5,6,7,8,4,5,6,7,25,25,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,22,1,8,123,33,32,1,1,1,1,8,48,1,1,1,1,1,1,8,36,4,5,6,7,1,0,22,0,0,0,36,4,5,6,7,36,4,5,6,7,36,4,5,6,7,36,36,0,33,22,8,25,1,1,1,1,1,1,1,1,1,1,33,32,27,0,48,48,27,56,56,8,8,122,8,8,1,48,48,48,48,124,124,124,30,1,1,1,1,1,1,8,8,8,8,1,0,0,8,1,48,48,48,48,122,122,25,1,1,1,25,36,4,5,6,7,1,1,1,36,4,5,6,7,1,1,1,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,36,4,5,6,7,1,1,1,36,4,5,6,7,1,1,1,22,30,48,48,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,33,22,27,8,17,26,4,5,6,7,1,23,29,30,32,25,56,56,8,122,122,8,1,56,56,25,56,56,8,1,0,125,8,1,126,127,128,129,130,131,132,133,134,135,136,137,138,0,0,0,0,0,0,0,0,0,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,62,39,41,58,62,39,41,139,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,58,59,62,63,39,41,40,42,58,62,39,41,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,58,59,62,63,39,41,40,42,0,0,0,0,0,0,0,0,70,72,70,72,70,70,72,72,70,72,70,70,72,70,70,72,70,70,70,70,72,70,72,70,72,72,73,0,0,0,73,0,74,76,75,73,74,76,75,73,73,73,74,74,75,75,75,73,74,76,75,73,74,76,75,73,74,74,74,75,75,76,74,76,75,73,75,74,76,75,73,74,76,75,73,74,76,75,73,74,140,78,78,0,0,78,0,0,80,81,78,79,80,81,78,79,78,79,78,79,80,79,79,80,79,81,81,78,79,78,79,80,81,78,79,80,81,78,79,80,80,81,81,80,80,81,78,79,80,81,78,79,80,81,78,79,80,81,78,79,79,81,85,0,85,84,0,84,84,0,84,85,85,0,0,0,84,85,85,82,87,82,83,86,84,85,87,82,83,86,84,85,84,85,84,85,82,84,85,82,86,84,85,84,85,87,82,83,86,84,85,87,82,83,86,84,85,83,82,82,82,86,86,87,82,87,82,84,85,87,82,83,86,84,85,87,82,83,86,84,85,87,82,83,86,84,85,82,86,0,0,0,88,91,89,88,91,89,88,88,89,88,91,89,88,91,89,88,88,89,91,88,91,88,88,91,89,88,91,89,88,91,89,89,0,92,92,92,92,92,92,92,92,92,92,92,92,92,0,0,0,94,93,94,93,93,93,94,93,93,93,94,93,93,93,94,93,93,94,93,93,94,93,94,93,94,93,93,93,93,93,95,90,0,97,96,90,0,98,96,95,96,95,0,0,0,97,90,0,0,90,98,96,90,0,0,98,98,90,97,0,0,90,100,95,101,102,96,103,104,97,98,90,100,95,101,102,96,103,104,97,98,95,96,97,98,95,96,97,98,95,96,97,98,90,90,100,100,95,101,101,102,102,96,103,103,104,104,97,98,98,100,101,103,90,90,90,100,100,95,101,102,96,103,104,97,98,98,98,100,101,103,102,104,95,96,97,98,90,100,95,101,102,96,103,104,97,98,100,102,104,101,103,90,100,101,102,103,104,90,101,102,103,95,96,97,98,90,100,101,102,103,104,98,90,100,95,101,102,96,103,104,97,98,90,100,95,101,102,96,103,104,97,98,90,100,95,101,102,96,103,104,97,98,141,142,143,144,145,146,147,148,149,150,150,151,152,153,154,113,0,0,113,0,106,113,113,0,106,113,0,0,106,9,9,9,9,9,9,9,112,9,64,111,112,106,113,9,64,111,112,106,113,9,64,111,112,64,64,9,64,111,112,106,113,9,64,111,112,106,113,9,64,111,112,64,106,113,9,64,9,64,111,112,9,64,111,112,106,106,113,9,64,111,112,106,113,9,111,112,111,112,112,9,111,112,9,64,64,106,113,64,64,9,111,112,9,111,112,9,64,111,112,9,64,9,9,64,9,64,9,9,64,111,112,106,113,111,112,9,64,9,9,64,111,112,113,106,112,64,111,112,9,9,64,111,112,9,64,9,64,111,112,106,113,106,9,9,64,111,112,106,113,9,64,111,112,106,113,9,111,9,64,111,112,106,113,64,64,9,155,156,0,0,61,0,0,0,61,0,61,0,61,0,61,0,61,61,0,61,61,0,0,0,0,0,61,0,0,0,0,0,0,0,61,61,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,0,0,0,157,0,115,115,0,0,115,115,0,0,0,115,0,0,0,0,157,115,0,0,0,157,115,115,0,157,115,157,115,115,115,115,115,0,0,0,117,116,65,117,116,65,65,65,117,116,65,116,65,117,116,65,116,65,116,65,117,65,65,117,116,65,116,65,117,116,65,117,117,117,65,65,65,117,117,65,117,65,65,117,116,65,117,116,65,117,116,65,117,116,65,117,117,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]],4]],[[[5,[3]],5]],[[[6,[[0,[3,0]]]],6]],[[[7,[3]],7]],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[[]],[[]],[[]],[1],[8,9],[1,[[10,[9]]]],[8,9],[1,[[10,[9]]]],[1,[[10,[9]]]],[1,[[10,[8]]]],[1,[[10,[11]]]],[1,[[10,[8]]]],[1,[[10,[12]]]],[1,[[10,[8]]]],[1,[[10,[11]]]],[1,[[10,[8]]]],[1,[[10,[12]]]],[1,[[10,[8]]]],[1,[[10,[13]]]],[1,[[10,[14]]]],[1,[[10,[8]]]],[1,[[10,[15]]]],[1,[[10,[16]]]],[8],[1,[[10,[8]]]],[1,[[10,[13]]]],[1,[[10,[14]]]],[1,[[10,[8]]]],[1,[[10,[15]]]],[1,[[10,[16]]]],[17,18],[[]],[[[4,[[0,[3,0]]]],4]],[[[5,[3]],5]],[[[6,[[0,[3,0]]]],6]],[[[7,[3]],7]],[[19,19]],[[8,19,19]],[[1,19,19,[6,[20]]]],[[1,2],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[1],[[1,21],1],0,[22,16],[22,16],[17,20],[23,24],[23,24],[[25,19,19,19,19]],[17,20],[26,20],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[22,22],[27,27],[8,8],[17,17],[26,26],[[[4,[28]]],[[4,[28]]]],[[[5,[28]]],[[5,[28]]]],[[[6,[28]]],[[6,[28]]]],[[[7,[28]]],[[7,[28]]]],[1,1],[23,23],[29,29],[30,30],[[[32,[31]]],[[32,[31]]]],[[[25,[28]]],[[25,[28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[33,[[35,[[34,[22]]]]]],[1,17],[[],17],[[[8,[36]]],[[8,[36,34]]]],[[19,19],35],[[19,19],35],[[37,19,19],24],[[37,19,19],24],[[8,37,19,19],24],[[1,19,19,19,19],1],[[1,19,19,19,19],1],[30,38],[[],8],[[],1],[22,27],[8],[25],[8],[25],[[]],[[]],[8],[8],[1],[8,39],[8,40],[8,41],[8,42],[[27,27],24],[[[8,[[0,[43,36]],43]],8],24],[[17,17],24],[[26,26],24],[[[4,[43]],4],24],[[[5,[43]],5],24],[[[6,[43]],6],24],[[[7,[43]],7],24],[[1,1],24],[[23,23],24],[[29,29],24],[[30,30],24],0,[[11,[10,[20]]],16],[[[8,[[5,[20]],[34,[20,44]]]],[10,[20]]],16],[23],[1,1],0,[1,1],[1,1],[[27,45],46],[[[8,[[0,[47,36]],47]],45],46],[[17,45],46],[[26,45],46],[[[4,[47]],45],46],[[[5,[47]],45],46],[[[6,[47]],45],46],[[[7,[47]],45],46],[[1,45],46],[[23,45],46],[[29,45],46],[[30,45],46],[[[32,[[0,[47,31]]]],45],46],[[]],[[]],[[]],[[]],[[]],[[]],[17,26],[[],4],[[]],[[],5],[[]],[[],6],[[]],[[]],[[],7],[[[8,[[7,[2]],[34,[2]]]]],1],[11,1],[[[8,[[6,[18]],[34,[18]]]]],1],[[[8,[[5,[2]],[34,[2]]]]],1],[16,1],[[[8,[[5,[18]],[34,[18]]]]],1],[[]],[14,1],[12,1],[15,1],[13,1],[[[8,[[7,[18]],[34,[18]]]]],1],[[[8,[[4,[18]],[34,[18]]]]],1],[[]],[23,29],[[]],[[]],[[]],[[]],[[]],[[[0,[3,0]],[0,[3,0]],[0,[3,0]],[0,[3,0]]],[[4,[[0,[3,0]]]]]],[[3,3,3,3],[[5,[3]]]],[[[0,[3,0]],[0,[3,0]],[0,[3,0]],[0,[3,0]]],[[6,[[0,[3,0]]]]]],[[3,3,3,3],[[7,[3]]]],[48,[[35,[1]]]],[[],[[10,[23]]]],[[19,19],[[8,[36,34]]]],[[],[[10,[23]]]],[[19,19],27],[[16,19,19,27],22],[[],[[35,[23]]]],[[19,19,36],[[8,[36,34]]]],[[19,19],[[10,[8]]]],[49,27],[[]],[[],4],[[],5],[[],6],[[],7],[[]],[[],4],[[],5],[[],6],[[],7],[[19,19,34],[[10,[[8,[36,34]]]]]],[[19,19]],[[8,19,19]],[[8,19,19]],[[1,19,19],[[6,[20]]]],[[8,19,19],10],[[19,19]],[[8,19,19]],[[8,19,19]],[[1,19,19],6],[[8,19,19],10],[1,1],[[],[[35,[23]]]],[17,24],[17,24],[[[8,[[0,[50,36]],50]]]],[17],[26],[[[4,[50]]]],[[[5,[50]]]],[[[6,[50]]]],[[[7,[50]]]],[23],[[],19],[[],19],[8,19],[1,19],[[1,21],1],[[],35],0,[[19,19],24],[[19,19],24],[8],[[4,51]],[[5,51]],[[6,51]],[[7,51]],[8],[[4,51]],[[5,51]],[[6,51]],[[7,51]],[25],[25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,16],[1,[[34,[20]]]],[8,9],[[],33],[[]],[[]],[1,[[8,[[5,[18]],[34,[18]]]]]],[1,11],[1,[[8,[[7,[18]],[34,[18]]]]]],[1,12],[8],[[],35],[1,[[8,[[4,[18]],[34,[18]]]]]],[1,13],[1,14],[1,[[8,[[6,[18]],[34,[18]]]]]],[1,15],[1,16],[[[8,[36,34]]],34],[[]],[[[4,[[0,[3,0]]]]]],[[[5,[3]]]],[[[6,[[0,[3,0]]]]]],[[[7,[3]]]],[1],0,[22,19],[[[0,[52,53]],23],[[35,[1]]]],[[],[[35,[1]]]],[23,[[35,[1]]]],[[]],[[[4,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[5,[3]]],[[5,[3]]]],[[[6,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[7,[3]]],[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]],[4,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[5,[3]],[5,[3]]],[[5,[3]]]],[[[6,[[0,[3,0]]]],[6,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[7,[3]],[7,[3]]],[[7,[3]]]],[[]],[[[4,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[5,[3]]],[[5,[3]]]],[[[6,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[7,[3]]],[[7,[3]]]],[[]],[[]],0,[[[55,[54]]],33],[16,22],[[19,19],[[8,[36,34]]]],[[19,19,19,19],25],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[[19,19],1],[33,[[10,[[35,[22]]]]]],[[[32,[56]]],10],[27],[[],[[35,[1]]]],[[],26],[[],26],[[27,27],[[10,[57]]]],[[],32],[[],32],[8,58],[8,59],[[19,19]],[[8,19,19]],[[8,19,19]],[[1,19,19,[6,[20]]]],[[],35],[[],35],[60,35],[60,35],[[19,19,19,19],35],[[19,19,19,19],35],[[19,19,19,19,60],35],[30,38],[[1,19,19,61],1],[[1,19,19,61],1],[[1,19,19,61],1],[1,1],[1,1],[1,1],[8,62],[8,63],[8,64],[8,35],[1,35],[[19,19,17],35],[[19,19,17,23],35],[[8,23],35],[[1,23],35],[[],38],[[],38],[65,35],[65,35],[[19,19,19,19],25],[[19,19,19,19],25],[[25,19,19,19,19],25],[[1,19,19],1],[[1,19,19],1],[1,[[34,[20]]]],[25,[[8,[34]]]],[[],5],[[[4,[[0,[3,0]]]]],[[5,[[0,[3,0]]]]]],[[[5,[3]]],[[5,[3]]]],[[[6,[[0,[3,0]]]]],[[5,[[0,[3,0]]]]]],[[[7,[3]]],[[5,[3]]]],[1,[[8,[[5,[18]],[34,[18]]]]]],[1,[[8,[[5,[2]],[34,[2]]]]]],[1,11],[[],7],[[[4,[[0,[3,0]]]]],[[7,[[0,[3,0]]]]]],[[[5,[3]]],[[7,[3]]]],[[[6,[[0,[3,0]]]]],[[7,[[0,[3,0]]]]]],[[[7,[3]]],[[7,[3]]]],[1,[[8,[[7,[18]],[34,[18]]]]]],[1,[[8,[[7,[2]],[34,[2]]]]]],[1,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[[4,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[5,[3]]],[[4,[3]]]],[[[6,[[0,[3,0]]]]],[[4,[[0,[3,0]]]]]],[[[7,[3]]],[[4,[3]]]],[1,[[8,[[4,[18]],[34,[18]]]]]],[1,13],[1,14],[[],6],[[[4,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[5,[3]]],[[6,[3]]]],[[[6,[[0,[3,0]]]]],[[6,[[0,[3,0]]]]]],[[[7,[3]]],[[6,[3]]]],[1,[[8,[[6,[18]],[34,[18]]]]]],[1,15],[1,16],[22,19],[30,38],[[],38],[[],38],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[19,19]],[[19,19]],[[8,19,19]],[[19,19]],[[19,19]],[[8,19,19]],[[1,2,21],1],[[19,19,19,19],25],[[19,19,19,19],25],[[25,19,19,19,19],25],[[],19],[[],19],[8,19],[1,19],[[19,19,17],35],[[19,19,17],35],[8,35],[[1,[68,[29]]],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[58,[36]]],[[58,[36]]]],[[[62,[36]]],[[62,[36]]]],[[[39,[36]]],[[39,[36]]]],[[[41,[36]]],[[41,[36]]]],[[]],[[]],[[]],[[]],[[]],[[[58,[36]],45],46],[[[59,[36]],45],46],[[[62,[36]],45],46],[[[63,[36]],45],46],[[[39,[36]],45],46],[[[41,[36]],45],46],[[[40,[36]],45],46],[[[42,[36]],45],46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[58,[36]]],51],[[[59,[36]]],51],[[[62,[36]]],51],[[[63,[36]]],51],[[[39,[36]]],51],[[[41,[36]]],51],[[[40,[36]]],51],[[[42,[36]]],51],[[[58,[36]]],10],[[[59,[36]]],10],[[[62,[36]]],[[10,[[58,[36]]]]]],[[[63,[36]]],[[10,[[59,[36]]]]]],[[[39,[36]]],10],[[[41,[36]]],10],[[[40,[36]]],10],[[[42,[36]]],10],[[[58,[36]]],10],[[[59,[36]]],10],[[[62,[36]]],[[10,[[58,[36]]]]]],[[[63,[36]]],[[10,[[59,[36]]]]]],[[[58,[36]]]],[[[59,[36]]]],[[[62,[36]]]],[[[63,[36]]]],[[[39,[36]]]],[[[41,[36]]]],[[[40,[36]]]],[[[42,[36]]]],[[]],[[]],[[]],[[]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[70,[[0,[69,53]]]]],17],[[[70,[[0,[69,53]]]]]],[[[72,[71]],19,19,17],35],[[[72,[71]],19,19,17,10],35],[[]],[[]],[[[70,[[0,[69,53]]]]],10],[[]],[[]],[[[70,[[0,[69,53]]]]],35],[[[0,[69,53]]],[[35,[[70,[[0,[69,53]]]]]]]],[[],[[72,[71]]]],[[[70,[[0,[69,53]]]]],35],[[[70,[[0,[69,53]]]],19,19,19,19,60],35],[[[70,[[0,[69,53]]]],24]],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[[72,[71]],19,19,17],35],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[73,73],[[]],[[[74,[69]]],17],[[[74,[69]]]],[[[75,[71]],19,19,17],35],[[[75,[71]],22],35],[[[75,[71]]],35],[[73,45],46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[74,[69]]],33],[[[74,[69]]],35],[69,[[35,[[74,[69]]]]]],[71,[[75,[71]]]],[[71,21],[[75,[71]]]],[76,[[77,[51]]]],[[[74,[69]]],35],[[76,34],[[77,[51]]]],[[[75,[71]],73],35],[[]],[[[75,[71]]],35],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],[[69,65],[[35,[[74,[69]]]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78,78],[79,79],[[]],[[]],[[[80,[69]]],17],[[],79],0,[[[80,[69]]]],[18,79],[[[81,[71]],19,19,17],35],[[[81,[71]]],35],[[78,78],24],[[79,79],24],[[78,45],46],[[79,45],46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[80,[69]]],35],[69,[[35,[[80,[69]]]]]],[71,[[81,[71]]]],[[71,20],[[81,[71]]]],[[[80,[69]]],35],[[[80,[69]],18,18],35],[[[81,[71]],79]],[[]],[[]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],0,[[[81,[71]],19,19,17],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[82,[69]]],[[83,[69]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,84],[85,85],[[]],[[]],[[[82,[69]]],17],[[],84],[[],85],[[[82,[69]]]],[[[86,[71]],19,19,17],35],[[84,84],24],[[85,85],24],[[84,45],46],[[85,45],46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[83,[69]]],33],[[[82,[69]]],35],[[[82,[69]]],24],[69,[[35,[[82,[69]]]]]],[71,[[86,[71]]]],[[71,84,85],[[86,[71]]]],[[[87,[69]]],[[77,[51]]]],[[[82,[69]]],35],[[[87,[69]],34],[[77,[51]]]],[[[82,[69]]],38],[[]],[[]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[69,65],[[35,[[82,[69]]]]]],[[[86,[71]],19,19,17],35],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[88,[[0,[69,53]]]]],17],[[[88,[[0,[69,53]]]]]],[[[89,[[0,[71,53]]]],19,19,17],35],[[]],[[]],[[]],[[]],[[]],[[]],[[[88,[[0,[69,53]]]]],35],[[],[[66,[88,90]]]],[[[0,[71,53]]],[[89,[[0,[71,53]]]]]],[91,[[77,[51]]]],[[[88,[[0,[69,53]]]]],35],[[91,34],[[77,[51]]]],[[[88,[[0,[69,53]]]],65],35],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[[89,[[0,[71,53]]]],19,19,17],35],0,[[]],[[]],[[[92,[69]]],17],[[[92,[69]]]],[[]],[[]],[[[92,[69]]],33],[[[92,[69]]],35],[69,[[35,[[92,[69]]]]]],[[[92,[69]]],35],[[],66],[[],66],[[],67],0,0,0,[[]],[[]],[[]],[[]],[93,93],[[]],[[[94,[69]]],[[35,[93]]]],[[],93],[[93,45],46],0,[[]],[[]],[93,51],0,[[]],[[]],0,[69,[[94,[69]]]],0,[[]],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[95,95],[96,96],[97,97],[98,98],[[]],[[]],[[]],[[]],[[95,95],24],[[96,96],24],[[97,97],24],[[98,98],24],[[90,45],[[66,[99]]]],[[90,45],46],[[100,45],[[66,[99]]]],[[100,45],46],[[95,45],46],[[101,45],[[66,[99]]]],[[101,45],46],[[102,45],[[66,[99]]]],[[102,45],46],[[96,45],46],[[103,45],[[66,[99]]]],[[103,45],46],[[104,45],[[66,[99]]]],[[104,45],46],[[97,45],46],[[98,45],46],[[98,45],[[66,[99]]]],[100,98],[101,98],[103,98],[[]],[105,90],[106,90],[[]],[98,100],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,98],[[]],[107,98],[[98,95],100],[98,101],[98,103],[96,102],[97,104],[95],[96],[97],[98],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[100,95],[102,96],[104,97],[[98,[68,[[55,[108]]]]],101],[[98,[68,[[55,[108]]]]],103],[109],[109],[109],[109],[109],[109],[90,[[10,[108]]]],[101,[[10,[108]]]],[102,[[10,[108]]]],[103,[[10,[108]]]],[[]],[[]],[[]],[[]],[[],110],[[],110],[[],110],[[],110],[[],110],[[],110],[[],110],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],[9],[9,9],[9],[9,[[66,[111,106]]]],[9,[[66,[112,106]]]],[9,[[66,[111,106]]]],[[[112,[36]],19,19]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[64],[[[111,[36]]]],[[[112,[36]]]],0,0,[[[9,[28]]],[[9,[28]]]],[64,64],[[[111,[28,[0,[28,36]]]]],[[111,[28,[0,[28,36]]]]]],[[[112,[28,[0,[28,36]]]]],[[112,[28,[0,[28,36]]]]]],[106,106],[113,113],[[]],[[]],[[]],[[]],[[]],[[]],0,[[20,19,19],64],[[[111,[36]]]],[[[112,[36]]]],[[64,64],24],[[106,106],24],[[113,113],24],[9],[64],[[9,51],24],[[64,51],24],[[[111,[36]]],9],[[[112,[36]]],9],[[[9,[47]],45],46],[[64,45],46],[[[111,[47,[0,[47,36]]]],45],46],[[[112,[47,[0,[47,36]]]],45],46],[[106,45],46],[[106,45],46],[[113,45],46],[[]],[[]],[[]],[[]],[[]],[[]],[[9,20,19,19],10],[[[111,[36]],20,19,19],10],[[[112,[36]],20,19,19],10],[[[111,[36]],19,19]],[[[112,[36]],19,19]],[[[112,[36]],19,19]],[[9,20,19,19],10],[[[111,[36]],20,19,19],10],[[[112,[36]],20,19,19],10],[9,24],[64,24],[64],[106],[113],0,0,[9,10],[[[111,[36]]]],[[[112,[36]]]],[9,10],[[[111,[36]]]],[[[112,[36]]]],[[9,20,19,19],24],[[64,20,19,19],24],[[[111,[36]],19,19],24],[[[112,[36]],19,19],24],[[9,20,19,19],51],[[64,20,19,19],51],[[9,20,19,19],[[10,[51]]]],[9],[[64,20,19,19],[[10,[51]]]],[[9,51,51,51],[[10,[51]]]],[[64,51,51,51],[[10,[51]]]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[[111,[36]]],9],[[[112,[36]]],9],[[9,113],24],[[64,113],24],0,[9,[[10,[51]]]],[64,[[10,[51]]]],[[[111,[36]]],51],[[[112,[36]]],51],[[113,113],[[10,[57]]]],[109],[[[112,[36]],19,19]],[[20,19,19],64],[[[111,[36]]]],[[[112,[36]]]],0,[[9,20,19,19]],[[64,20,19,19]],[[[111,[36]],19,19]],[[[112,[36]],19,19]],[9],[64],[[]],[[]],[[]],[[]],[[]],[[]],[[],110],[9,[[9,[34]]]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[9,[[66,[8]]]],[[[111,[36]]],[[66,[[112,[36]]]]]],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],0,0,[[19,19],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[2,[[8,[34]]]],[[]],[[]],0,[61,61],[[]],0,0,[[19,19,19,19],25],[[19,19,19,19],25],0,[[61,61],24],[[],[[8,[34]]]],[[],[[8,[34]]]],[8,35],[[]],[[],[[8,[34]]]],[8,35],[[]],[[61,45],46],[[]],0,0,0,0,[[]],0,0,[[]],0,[[114,114]],[[19,19]],[[114,114]],[[19,19,61],[[8,[34]]]],[[],[[8,[34]]]],[8,35],[[]],[[],[[8,[34]]]],[8,35],[[],[[8,[34]]]],[8,35],[[19,19],[[8,[34]]]],[[]],[[]],[[],66],[[],66],[[],67],[[2,21],[[8,[34]]]],[[]],0,0,0,[[]],[[]],[21,[[8,[34]]]],[21],[115,115],[[]],[2,[[8,[34]]]],[2],[8],[[]],[[],[[8,[5,34]]]],[[],[[8,[7,34]]]],[[],[[8,[34]]]],[[],[[8,[34]]]],[[],24],[115,24],[21,[[8,[34]]]],[21],[8,[[8,[[5,[20]],[34,[20]]]]]],[[],51],[[115,5],51],[[]],[[]],[51,10],[[115,51],10],[[]],[[115,5]],[[]],[[],66],[[],66],[[],67],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[65,19,19],35],[[65,116],35],[[[117,[69]]]],[116,116],[65,65],[[]],[[]],[[[117,[[0,[52,53]]]]],[[35,[1]]]],[[],116],[[],65],[[116,116],24],[[65,65],24],[[116,45],46],[[65,45],46],[[[117,[69]]],[[10,[23]]]],[[65,38]],[[65,51]],[[]],[[]],[[]],[116],[65],[[]],[[]],[[]],[[[117,[[0,[52,53]]]]],35],[[[117,[69]]],69],[[[117,[69]],65]],0,0,0,[69,[[117,[69]]]],[[[117,[69]]]],[[],65],[[],[[77,[[117,[[119,[118]]]]]]]],[[65,38],35],[[65,51],35],[[[117,[69]],23]],[[]],[[]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],67],[[],67],[[],67],[[69,23],[[117,[69]]]],[[[117,[[0,[52,53]]]]],[[77,[[117,[[0,[52,53]]]]]]]],0,[[]],[[]],[37,37],[[]],[[37,37],24],[[37,45],46],[[]],[37],0,[[]],[[]],[[],66],[[],66],[[],67],0,0,0],"p":[[4,"DynamicImage"],[15,"f32"],[8,"Primitive"],[3,"Rgb"],[3,"Luma"],[3,"Rgba"],[3,"LumaA"],[3,"ImageBuffer"],[3,"FlatSamples"],[4,"Option"],[6,"GrayImage"],[6,"GrayAlphaImage"],[6,"Rgb32FImage"],[6,"RgbImage"],[6,"Rgba32FImage"],[6,"RgbaImage"],[4,"ColorType"],[15,"u16"],[15,"u32"],[15,"u8"],[15,"i32"],[3,"Frame"],[4,"ImageFormat"],[15,"bool"],[3,"SubImage"],[4,"ExtendedColorType"],[3,"Delay"],[8,"Clone"],[4,"ImageOutputFormat"],[3,"Progress"],[8,"Sized"],[3,"Pixels"],[3,"Frames"],[3,"Vec"],[6,"ImageResult"],[8,"Pixel"],[3,"Rect"],[15,"u64"],[3,"EnumeratePixels"],[3,"EnumeratePixelsMut"],[3,"EnumerateRows"],[3,"EnumerateRowsMut"],[8,"PartialEq"],[3,"Global"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"ImageDecoder"],[3,"Duration"],[8,"Hash"],[15,"usize"],[8,"BufRead"],[8,"Seek"],[8,"Iterator"],[3,"Box"],[8,"GenericImageView"],[4,"Ordering"],[3,"Pixels"],[3,"PixelsMut"],[8,"Fn"],[4,"FilterType"],[3,"Rows"],[3,"RowsMut"],[3,"SampleLayout"],[3,"Limits"],[4,"Result"],[3,"TypeId"],[8,"Into"],[8,"Read"],[3,"BmpDecoder"],[8,"Write"],[3,"BmpEncoder"],[4,"Repeat"],[3,"GifDecoder"],[3,"GifEncoder"],[3,"GifReader"],[6,"Result"],[4,"PixelDensityUnit"],[3,"PixelDensity"],[3,"JpegDecoder"],[3,"JpegEncoder"],[3,"PngDecoder"],[3,"ApngDecoder"],[4,"CompressionType"],[4,"FilterType"],[3,"PngEncoder"],[3,"PngReader"],[3,"TiffDecoder"],[3,"TiffEncoder"],[4,"ImageError"],[3,"TiffReader"],[3,"WebPDecoder"],[3,"Frame"],[3,"Vp8Decoder"],[4,"UnsupportedErrorKind"],[4,"ParameterErrorKind"],[4,"LimitErrorKind"],[4,"ImageFormatHint"],[3,"Error"],[3,"UnsupportedError"],[3,"EncodingError"],[3,"ParameterError"],[3,"DecodingError"],[3,"LimitError"],[3,"Error"],[4,"Error"],[3,"Path"],[8,"Error"],[3,"Demand"],[3,"String"],[3,"View"],[3,"ViewMut"],[4,"NormalForm"],[15,"i64"],[3,"BiLevel"],[3,"LimitSupport"],[3,"Reader"],[3,"File"],[3,"BufReader"],[8,"PixelWithColorType"],[8,"EncodableLayout"],[8,"GenericImage"],[8,"AnimationDecoder"],[8,"ImageDecoderRect"],[8,"ImageEncoder"],[13,"ImageLuma8"],[13,"ImageLumaA8"],[13,"ImageRgb8"],[13,"ImageRgba8"],[13,"ImageLuma16"],[13,"ImageLumaA16"],[13,"ImageRgb16"],[13,"ImageRgba16"],[13,"ImageRgb32F"],[13,"ImageRgba32F"],[13,"Unknown"],[13,"Jpeg"],[13,"Unsupported"],[8,"ConvertBuffer"],[13,"Finite"],[13,"Decoding"],[13,"Encoding"],[13,"Parameter"],[13,"Limits"],[13,"Unsupported"],[13,"IoError"],[13,"Exact"],[13,"Name"],[13,"PathExtension"],[13,"Unsupported"],[13,"Generic"],[13,"Color"],[13,"Format"],[13,"GenericFeature"],[13,"NormalFormRequired"],[13,"WrongColor"],[8,"ColorMap"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":[8,2,2,10,14,14,0,0,3,4,3,3,3,3,3,3,16,3,8,13,3,13,3,16,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Equivalent","IndexMap","IndexSet","equivalent","indexmap","indexset","map","set","Drain","Entry","IndexMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Vacant","VacantEntry","Value","Values","ValuesMut","__private_marker","__private_marker","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","collect","collect","collect","collect","collect","contains_key","count","count","count","count","count","count","count","count","count","default","drain","entry","eq","extend","extend","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index_mut","get_index_of","get_key_value","get_mut","get_mut","hasher","index","index","index","index","index","index_mut","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_keys","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","last","last","last","last_mut","len","len","len","len","len","len","len","len","len","len","move_index","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","or_default","or_insert","or_insert_with","or_insert_with_key","pop","remove","remove","remove_entry","remove_entry","reserve","retain","retain2","retain2","reverse","shift_remove","shift_remove","shift_remove_entry","shift_remove_entry","shift_remove_full","shift_remove_index","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_keys","sort_unstable_by","sort_unstable_keys","sorted_by","sorted_unstable_by","split_off","swap_indices","swap_remove","swap_remove","swap_remove_entry","swap_remove_entry","swap_remove_full","swap_remove_index","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","0","0","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","contains","count","count","count","default","difference","drain","eq","extend","extend","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","get_index_of","hasher","index","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","last","len","len","len","len","move_index","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth_back","nth_back","nth_back","pop","remove","replace","replace_full","reserve","retain","reverse","rfold","rfold","shift_remove","shift_remove_full","shift_remove_index","shift_take","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sort_unstable","sort_unstable_by","sorted_by","sorted_unstable_by","split_off","sub","swap_indices","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":["indexmap","","","","","","","","indexmap::mapindexmap::map::Entry","","indexmap::setd":["Key equivalence trait.","","","Compare self to <code>key</code> and return <code>true</code> if they are equal.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","A draining iterator over the entries of a <code>IndexMap</code>.","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","An owning iterator over the entries of a <code>IndexMap</code>.","An owning iterator over the keys of a <code>IndexMap</code>.","An owning iterator over the values of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","","An iterator over the keys of a <code>IndexMap</code>.","Opt-in mutable access to keys.","Existing slot with equivalent key.","A view into an occupied entry in a <code>IndexMap</code>. It is part of …","Vacant slot (no equivalent key in the map).","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","This method is not useful in itself – it is there to …","","Modifies the entry if it is occupied.","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code> in the given index range, returning …","Get the given key’s corresponding entry in the map for …","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an <code>IndexMap</code> from the sequence of key-value pairs in …","Gets a reference to the entry’s value in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index","Get a key-value pair by index","Return item index, if it exists in the map","Return references to the key-value pair stored for <code>key</code>, if …","Gets a mutable reference to the entry’s value in the map.","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index of the key-value pair","Return the index where the key-value pair exists or will …","Return the index where the key-value pair will be inserted.","Returns a reference to the value corresponding to the …","Returns a reference to the value at the supplied <code>index</code>.","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value at the supplied …","Sets the value of the entry to <code>value</code>, and returns the entry…","Inserts the entry’s key and the given value into the …","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes ownership of the key, leaving the entry vacant.","Return an owning iterator over the keys of the map, in …","Converts into a mutable reference to the entry’s value …","Return an owning iterator over the values of the map, in …","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the key-value pairs of the map, in …","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s key, either within the …","Gets a reference to the key that was used to find the …","Return an iterator over the keys of the map, in their order","Get the last key-value pair","","","","","","","","","","Get the last key-value pair, with mutable access to the …","Return the number of key-value pairs in the map.","","","","","","","","","","Moves the position of a key-value pair from one index to …","Create a new map. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if it …","Inserts the result of the <code>call</code> function with a reference …","Remove the last key-value pair","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Reserve capacity for <code>additional</code> more key-value pairs.","Scan through each key-value pair in the map and keep those …","Scan through each key-value pair in the map and keep those …","","Reverses the order of the map’s key-value pairs in place.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","Shrink the capacity of the map with a lower limit.","Shrink the capacity of the map as much as possible.","","","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by-value …","Sort the key-value pairs of the map and return a by-value …","Splits the collection into two at the given index.","Swaps the position of two key-value pairs in the map.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","Shortens the map, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the values …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>.","","","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>IndexSet</code>.","A hash set where the iteration order of the values is …","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>IndexSet</code>…","Returns the set intersection, cloned into a new set.","Returns the set union, cloned into a new set.","Returns the set symmetric-difference, cloned into a new …","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all elements in the set, while preserving its …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code> in the given index range, returning …","","","","Get the first value","","","","","","","","","","","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index","Return item index, if it exists in the set","Return a reference to the set’s <code>BuildHasher</code>.","Returns a reference to the value at the supplied <code>index</code>.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in <code>other</code>…","Returns <code>true</code> if all elements of <code>other</code> are contained in <code>self</code>…","Return an iterator over the values of the set, in their …","Get the last value","","","","Return the number of elements in the set.","","","","Moves the position of a value from one index to another by …","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","Remove the last value","Remove the value from the set, and return <code>true</code> if it was …","Adds a value to the set, replacing the existing value, if …","Adds a value to the set, replacing the existing value, if …","Reserve capacity for <code>additional</code> more values.","Scan through each value in the set and keep those where the","Reverses the order of the set’s values in place.","","","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Shrink the capacity of the set with a lower limit.","Shrink the capacity of the set as much as possible.","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by-value iterator …","Sort the values of the set and return a by-value iterator …","Splits the collection into two at the given index.","Returns the set difference, cloned into a new set.","Swaps the position of two values in the set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","Removes and returns the value in the set, if any, that is …","","","","","","","Shortens the set, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>."],"i":[0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,3,0,3,0,33,0,0,33,2,3,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,5,8,6,9,10,7,11,12,13,2,2,2,5,6,7,2,2,5,6,7,5,8,6,9,10,7,11,12,13,2,5,8,6,9,10,7,11,12,13,2,2,2,2,2,2,2,2,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,2,5,8,6,9,10,7,11,12,13,2,17,2,2,2,33,2,2,2,2,2,17,2,2,17,3,20,2,2,2,2,17,20,2,2,17,3,20,2,5,8,6,9,10,7,11,12,13,2,2,2,5,8,6,9,10,7,11,12,13,20,2,17,2,2,2,2,17,3,20,2,2,5,8,6,9,10,7,11,12,13,2,2,5,8,6,9,10,7,11,12,13,2,2,5,8,6,9,10,7,11,12,13,5,8,6,9,10,7,11,12,13,5,8,6,9,10,7,11,12,13,5,8,6,9,10,7,11,12,13,3,3,3,3,2,17,2,17,2,2,2,33,2,2,17,2,17,2,2,2,2,2,5,8,6,9,10,7,11,12,13,2,2,2,2,2,2,2,2,17,2,17,2,2,2,2,5,6,7,2,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,5,8,6,9,10,7,11,12,13,2,2,2,2,2,34,35,0,0,0,0,0,0,0,0,24,24,24,24,30,25,31,26,27,28,29,24,30,25,31,26,27,28,29,24,24,24,25,26,27,28,29,24,24,25,26,27,28,29,30,25,31,24,30,25,31,24,24,24,24,24,24,24,24,30,25,31,26,27,28,29,28,29,24,24,30,25,31,26,27,28,29,24,24,24,24,24,24,24,24,24,24,24,30,25,31,26,27,28,29,24,24,30,25,31,26,27,28,29,24,24,24,24,24,24,30,25,31,24,30,25,31,24,24,30,25,31,26,27,28,29,30,25,31,26,27,28,29,30,25,31,30,25,31,24,24,24,24,24,24,24,28,29,24,24,24,24,24,24,30,25,31,26,27,28,29,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,26,27,28,29,24,24,30,25,31,26,27,28,29,24,30,25,31,26,27,28,29,24,30,25,31,26,27,28,29,24,24,24,24],"f":[0,0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,4],[2],[2,2],[5,5],[6,6],[7,7],[[2,2]],[[]],[[]],[[]],[[]],[5],[8],[6],[9],[10],[7],[11],[12],[13],[2,1],[5,4],[8,4],[6,4],[9,4],[10,4],[7,4],[11,4],[12,4],[13,4],[[],2],[2,13],[2,3],[[2,2],1],[[2,14]],[[2,14]],[2,15],[2,15],[[[17,[16,16]],18],19],[[[3,[16,16]],18],19],[[[20,[16]],18],19],[[2,18],19],[[[5,[16]],18],19],[[[8,[16]],18],19],[[[6,[16]],18],19],[[[9,[16]],18],19],[[[10,[16]],18],19],[[[7,[16,16]],18],19],[[[11,[16,16]],18],19],[[[12,[16,16]],18],19],[[[13,[16,16]],18],19],[[]],[[]],[[]],[[],[[2,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,2],[17],[2,15],[2,15],[2,15],[[],15],[2,15],[[2,4],15],[[2,4],15],[2,[[15,[4]]]],[2,15],[17],[2,15],[2],[17,4],[3,4],[20,4],[2],[[2,4]],[2],[[2,4]],[17],[20],[2,15],[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[2],[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[2,8],[17],[2,10],[2,1],[2,7],[2,11],[17],[3],[20],[2,5],[2,15],[5,15],[8,15],[6,15],[9,15],[10,15],[7,15],[11,15],[12,15],[13,15],[2,15],[2,4],[5,4],[8,4],[6,4],[9,4],[10,4],[7,4],[11,4],[12,4],[13,4],[[2,4,4]],[[],2],[5,15],[8,15],[6,15],[9,15],[10,15],[7,15],[11,15],[12,15],[13,15],[5,15],[8,15],[6,15],[9,15],[10,15],[7,15],[11,15],[12,15],[13,15],[[5,4],15],[[8,4],15],[[6,4],15],[[9,4],15],[[10,4],15],[[7,4],15],[[11,4],15],[[12,4],15],[[13,4],15],[[5,4],15],[[8,4],15],[[6,4],15],[[9,4],15],[[10,4],15],[[7,4],15],[[11,4],15],[[12,4],15],[[13,4],15],[3],[3],[3],[3],[2,15],[17],[2,15],[17],[2,15],[[2,4]],[2],[[]],[2],[2],[17],[2,15],[17],[2,15],[2,15],[[2,4],15],[[2,4]],[2],[5],[8],[6],[9],[10],[7],[11],[12],[13],[2],[2],[2],[2],[2,12],[2,12],[[2,4],2],[[2,4,4]],[17],[2,15],[17],[2,15],[2,15],[[2,4],15],[[]],[[]],[[]],[[]],[[2,4]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[2,6],[2,9],[4,2],[4,2],[[],2],0,0,0,0,0,0,0,0,0,0,[[24,24]],[[24,24]],[[24,24]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,4],[24],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[[24,24]],[[]],[[]],[[]],[[]],[[]],[[]],[30],[25],[31],[24,1],[30,4],[25,4],[31,4],[[],24],[[24,24],26],[24,31],[[24,24],1],[[24,14]],[[24,14]],[24,15],[[24,18],19],[[[30,[16]],18],19],[[[25,[16]],18],19],[[[31,[16]],18],19],[[26,18],19],[[27,18],19],[[28,18],19],[[29,18],19],[28],[29],[[]],[[],[[24,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,24],[24,15],[24,15],[[24,4],15],[24,[[15,[4]]]],[24],[[24,4]],[24,1],[24],[[24,24],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24],[24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[24,24],1],[24,1],[[24,24],1],[[24,24],1],[24,25],[24,15],[30,15],[25,15],[31,15],[24,4],[30,4],[25,4],[31,4],[[24,4,4]],[[],24],[30,15],[25,15],[31,15],[26,15],[27,15],[28,15],[29,15],[30,15],[25,15],[31,15],[26,15],[27,15],[28,15],[29,15],[[30,4],15],[[25,4],15],[[31,4],15],[[30,4],15],[[25,4],15],[[31,4],15],[24,15],[24,1],[24,15],[24],[[24,4]],[24],[24],[28],[29],[24,1],[24,15],[[24,4],15],[24,15],[[24,4]],[24],[30],[25],[31],[26],[27],[28],[29],[24],[24],[24],[24],[24,30],[24,30],[[24,4],24],[[24,24]],[[24,4,4]],[24,1],[24,15],[[24,4],15],[24,15],[[24,24],28],[24,15],[[]],[[]],[[]],[[]],[[]],[[]],[[24,4]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[24,24],29],[4,24],[4,24],[[],24]],"p":[[15,"bool"],[3,"IndexMap"],[4,"Entry"],[15,"usize"],[3,"Keys"],[3,"Values"],[3,"Iter"],[3,"IntoKeys"],[3,"ValuesMut"],[3,"IntoValues"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[8,"IntoIterator"],[4,"Option"],[8,"Debug"],[3,"OccupiedEntry"],[3,"Formatter"],[6,"Result"],[3,"VacantEntry"],[3,"RandomState"],[4,"Result"],[3,"TypeId"],[3,"IndexSet"],[3,"Iter"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[3,"IntoIter"],[3,"Drain"],[8,"Equivalent"],[8,"MutableKeys"],[13,"Occupied"],[13,"Vacant"]]},\
"integer_or_float":{"doc":"This is a Rust type that holds an integer or a float.","t":[4,2,13,13,2,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,12,12,17,6,6,6],"n":["ConversionError","Float","Float","FloatConversionError","Integer","Integer","IntegerConversionError","IntegerOrFloat","abs","abs","abs_sub","abs_sub","acos","acos","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","approx_eq","asin","asin","asinh","asinh","atan","atan","atan2","atan2","atanh","atanh","backing_types","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","ceil","ceil","classify","clone","clone_into","cos","cos","cosh","cosh","default","deserialize","div","div","div","div","div","div","div","div","div","div","div","div","div","epsilon","eq","eq","exp","exp","exp2","exp2","exp_m1","exp_m1","f_iof","floor","floor","fmt","fmt","fmt","fmt","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_str","from_str_radix","hash","holding_float","holding_integer","hypot","hypot","i_iof","infinity","integer_decode","into","into","is_finite","is_infinite","is_nan","is_normal","is_one","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_zero","ln","ln","ln_1p","ln_1p","log","log","log10","log10","log2","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","nan","neg","neg_infinity","neg_zero","next","one","partial_cmp","powf","powf","powi","powi","prev","provide","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","round","round","serialize","signum","signum","sin","sin","sin_cos","sin_cos","sinh","sinh","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","tan","tan","tanh","tanh","to_bits","to_degrees","to_i64","to_owned","to_radians","to_string","to_string","to_u64","trunc","trunc","try_from","try_from","try_from","try_into","try_into","type_id","type_id","u_iof","ulps","unwrap_float","unwrap_integer","zero","0","0","IOF_BACKING_STORE_BITLEN","f_iof","i_iof","u_iof"],"q":["integer_or_floatinteger_or_float::IntegerOrFloat","","integer_or_float::backing_types","","",""],"d":["","","","","","","","A generic container for an “integer or a float”.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allow user to have an i64/f64-holding backing store. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","note: powi always i32 regardless of i_iof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Give back the float we’re holding…panic if we’re …","Give back the float we’re holding…panic if we’re …","","","","","","",""],"i":[0,0,1,18,0,1,18,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,18,1,18,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,18,1,1,1,1,1,1,1,0,1,1,18,18,1,1,1,1,18,18,18,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,18,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,18,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,18,1,1,1,1,18,1,1,18,1,18,1,0,1,1,1,1,34,35,0,0,0,0],"f":[0,0,0,0,0,0,0,0,[[]],[1,1],[[1,1],1],[[]],[1,1],[[]],[[]],[1,1],[[1,2]],[[1,3]],[[1,1]],[[1,4]],[[1,5]],[[1,6]],[[1,7]],[[1,8]],[[1,9]],[[1,10]],[[1,11]],[[1,12]],[[1,13]],[[1,1,14],15],[1,1],[[]],[[]],[1,1],[1,1],[[]],[[]],[[1,1],1],[[]],[1,1],0,[[]],[[]],[[]],[[]],[[]],[1,1],[1,1],[[]],[1,16],[1,1],[[]],[1,1],[[]],[[]],[1,1],[[],1],[[],[[17,[1]]]],[[1,6]],[[1,3]],[[1,2]],[[1,7]],[[1,4]],[[1,11]],[[1,5]],[[1,10]],[[1,8]],[[1,13]],[[1,1]],[[1,12]],[[1,9]],[[]],[[18,18],15],[[1,1],15],[1,1],[[]],[[]],[1,1],[[]],[1,1],0,[[]],[1,1],[[18,19],20],[[18,19],20],[[1,19],[[17,[21]]]],[[1,19],[[17,[21]]]],[1,1],[[]],[22,18],[23,18],[[]],[12,1],[9,1],[7,1],[2,1],[8,1],[13,1],[6,1],[11,1],[[]],[24,[[25,[1]]]],[3,1],[10,1],[5,1],[4,1],[26,1],[27,[[17,[1]]]],[[27,9],[[17,[1]]]],[1],[1,[[17,[28,29]]]],[1,[[17,[29,28]]]],[[]],[[1,1],1],0,[[],1],[1],[[]],[[]],[1,15],[1,15],[1,15],[1,15],[1,15],[[],15],[1,15],[1,15],[[],15],[1,15],[[]],[1,1],[[]],[1,1],[[1,1],1],[[]],[[]],[1,1],[1,1],[[]],[[]],[[1,1],1],[[]],[[],1],[[]],[[1,1],1],[[]],[[],1],[[],1],[[]],[[1,10]],[[1,8]],[[1,12]],[[1,13]],[[1,9]],[[1,3]],[[1,1]],[[1,2]],[[1,11]],[[1,4]],[[1,7]],[[1,5]],[[1,6]],[[]],[[1,1,1],1],[[],1],[1],[[],1],[[],1],[1,1],[[],1],[[1,1],[[25,[30]]]],[[1,1],1],[[]],[[1,5],1],[5],[1,1],[31],[[]],[1,1],[[1,3]],[[1,11]],[[1,7]],[[1,1]],[[1,2]],[[1,9]],[[1,6]],[[1,13]],[[1,8]],[[1,10]],[[1,5]],[[1,4]],[[1,12]],[1,1],[[]],[1,17],[[]],[1,1],[[]],[1,1],[1],[[]],[[]],[1,1],[[]],[1,1],[[1,9]],[[1,7]],[[1,2]],[[1,12]],[[1,4]],[[1,11]],[[1,3]],[[1,1]],[[1,6]],[[1,13]],[[1,8]],[[1,5]],[[1,10]],[1,1],[[]],[1,1],[[]],[1,26],[[]],[1,[[25,[10]]]],[[]],[[]],[[],32],[[],32],[1,[[25,[3]]]],[1,1],[[]],[[],17],[27,[[17,[1]]]],[[],17],[[],17],[[],17],[[],33],[[],33],0,[[1,1],1],[1,28],[1,29],[[],1],0,0,0,0,0,0],"p":[[4,"IntegerOrFloat"],[15,"f64"],[15,"u64"],[15,"i16"],[15,"i32"],[15,"u16"],[15,"f32"],[15,"isize"],[15,"u32"],[15,"i64"],[15,"usize"],[15,"i8"],[15,"u8"],[8,"Into"],[15,"bool"],[4,"FpCategory"],[4,"Result"],[4,"ConversionError"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[8,"ToPrimitive"],[4,"Option"],[6,"u_iof"],[15,"str"],[6,"f_iof"],[6,"i_iof"],[4,"Ordering"],[3,"Demand"],[3,"String"],[3,"TypeId"],[13,"Integer"],[13,"Float"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","tn":["Both","Continue","Diff","Done","Either","EitherOrBoth","First","FirstMismatch","FoldWhile","Itertools","Last","Left","Left","Longer","Middle","MinMax","MinMaxResult","MultiUnzip","NoElements","OneElement","Only","PeekingNext","Position","Right","Right","Shorter","all","all","all_equal","all_unique","any","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","assert_equal","at_most_one","batching","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","cartesian_product","cause","chain","chain","chunks","circular_tuple_windows","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","coalesce","collect","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","concat","cons_tuples","consume","contains","count","counts","counts_by","dedup","dedup_by","dedup_by_with_count","dedup_with_count","deref","deref_mut","description","diff_with","dropping","dropping_back","duplicates","duplicates_by","either","either_into","either_with","enumerate","eq","eq","eq","eq","eq","equal","exactly_one","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","filter_map_ok","filter_ok","find","find_map","find_or_first","find_or_last","find_position","flatten_ok","flip","flip","flush","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold1","fold_ok","fold_options","fold_results","fold_while","for_each","foreach","format","format_with","from","from","from","from","from","from","from","group_by","has_left","has_right","hash","hash","interleave","interleave","interleave_shortest","intersperse","intersperse","intersperse_with","intersperse_with","into","into","into","into","into","into","into","into","into_future","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","into_inner","into_inner","into_inner","into_iter","into_iter","into_option","iproduct","is_both","is_done","is_left","is_left","is_right","is_right","iterate","izip","join","join","k_smallest","kmerge","kmerge","kmerge_by","kmerge_by","last","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","len","map","map_any","map_into","map_left","map_left","map_ok","map_results","map_right","map_right","max","max_set","max_set_by","max_set_by_key","merge","merge","merge_by","merge_join_by","merge_join_by","min","min_set","min_set_by","min_set_by_key","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multipeek","multiunzip","multiunzip","multiunzip","multizip","next","next_back","next_tuple","nth","or","or_default","or_else","pad_using","partial_cmp","partition","partition","partition_map","partition_result","peek_nth","peeking_next","peeking_take_while","permutations","poll","position","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","process_results","product1","provide","put_back","put_back_n","rciter","read","read_exact","read_line","read_to_end","read_to_string","read_until","reduce","repeat_call","repeat_n","rev","rfind","rfold","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","seek","set_from","size_hint","sorted","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","source","step","structs","sum1","take_while_ref","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traits","tree_fold1","try_collect","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unique","unique_by","unwrap_left","unwrap_right","update","while_some","with_position","write","write_all","write_fmt","zip","zip_eq","zip_eq","zip_longest","0","0","0","1","1","1","2","0","0","0","0","0","1","0","0","0","0","1","0","0","0","0","Batching","Chunk","Chunks","CircularTupleWindows","Coalesce","Combinations","CombinationsWithReplacement","ConsTuples","Dedup","DedupBy","DedupByWithCount","DedupWithCount","Duplicates","DuplicatesBy","ExactlyOneError","FilterMapOk","FilterOk","FlattenOk","Format","FormatWith","Group","GroupBy","GroupingMap","GroupingMapBy","Groups","Interleave","InterleaveShortest","Intersperse","IntersperseWith","IntoChunks","Iterate","KMerge","KMergeBy","MapInto","MapOk","MapResults","Merge","MergeBy","MergeJoinBy","MultiPeek","MultiProduct","PadUsing","PeekNth","PeekingTakeWhile","Permutations","Positions","Powerset","ProcessResults","Product","PutBack","PutBackN","RcIter","RepeatCall","RepeatN","Step","TakeWhileRef","Tee","TupleBuffer","TupleCombinations","TupleWindows","Tuples","Unfold","Unique","UniqueBy","Update","WhileSome","WithPosition","Zip","ZipEq","ZipLongest","aggregate","all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","count","count","count","count","count","count","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_first","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","k","last","last","last","max","max_by","max_by_key","min","min_by","min_by_key","minmax","minmax_by","minmax_by_key","n","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","peek","peek","peek_nth","peeking_next","peeking_next","peeking_next","peeking_next","product","provide","put_back","put_back","rciter","reset_peek","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_value","HomogeneousTuple"],"q":["itertoolsitertools::Diff","","","","","","","itertools::Either","","itertools::EitherOrBoth","","","","itertools::FoldWhile","","itertools::MinMaxResult","","","itertools::Position","","","","itertools::structsitertools::traits"],"d":["Both values are present.","Continue folding with this value","A type returned by the <code>diff_with</code> function.","Fold is complete and will return this value","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","This is the first element.","The index of the first non-matching element along with …","An enum used for controlling the execution of <code>fold_while</code>.","An <code>Iterator</code> blanket implementation that provides extra …","This is the last element.","A value of type <code>L</code>.","Only the left value of type <code>A</code> is present.","The total number of elements that were in <code>I</code> along with the …","This is neither the first nor the last element.","More than one element in the iterator, the first element …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>.","An iterator that can be unzipped into multiple collections.","Empty iterator","Iterator with one element, so the minimum and maximum are …","This is the only element.","An iterator that allows peeking at an element before …","A value yielded by <code>WithPosition</code>. Indicates the position of …","A value of type <code>R</code>.","Only the right value of type <code>B</code> is present.","The total number of elements that were in <code>J</code> along with the …","Test whether the predicate holds for all elements in the …","","Check whether all elements compare equal.","Check whether all elements are unique (non equal).","Test whether the predicate holds for any elements in the …","","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","Converts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","Converts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.","Assert that two iterables produce equal sequences, with …","If the iterator yields no elements, Ok(None) will be …","A “meta iterator adaptor”. Its closure receives a …","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Return an iterator adaptor that iterates over the …","","Takes two iterables and creates a new iterator over both …","Chain zero or more iterators together into one sequence.","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","","","","","","","","","","","","Create an iterator that clones each element from &amp;T to T","","Return an iterator adaptor that uses the passed-in closure …","","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","","Returns <code>true</code> if the given item is present in this iterator.","","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Iterate <code>iterable</code> with a running index.","","","","","","Return <code>true</code> if both iterables produce equal sequences …","If the iterator yields exactly one element, that element …","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","","","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","Convert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.","","","","","","","","Perform a fold operation over the iterable.","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an <em>iterable</em> that can group iterator elements. …","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","Iterate <code>iterable</code> with a particular value inserted between …","An iterator adaptor to insert a particular value between …","Iterate <code>iterable</code> with a particular value created by a …","An iterator adaptor to insert a particular value created …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Extract the value of an either over two equivalent types.","Return the inner value.","Return the value in the continue or done.","","Convert the inner value to an iterator.","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …","Create an iterator over the “cartesian product” of …","If Right, return true otherwise, return false. Equivalent …","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","Return true if the value is the <code>Left</code> variant.","If Left, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Right</code> variant.","If Right, return true otherwise, return false. Exclusive …","Creates a new iterator that infinitely applies function to …","Create an iterator running multiple iterators in lockstep.","Combine all iterator elements into one String, separated …","Combine all iterator elements into one String, separated …","Sort the k smallest elements into a new iterator, in …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return the maximum value of the iterable.","Return all maximum elements of an iterator.","Return all maximum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merge-joins items from the …","Create an iterator that merges items from both this and …","Return the minimum value of the iterable.","Return all minimum elements of an iterator.","Return all minimum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","An iterator adaptor that allows the user to peek at …","Converts an iterator of tuples into a tuple of containers.","Unzip this iterator into multiple collections.","Converts an iterator of tuples into a tuple of containers.","An iterator that generalizes <em>.zip()</em> and allows running …","","","Advances the iterator and returns the next items grouped …","","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Return an iterator adaptor that pads the sequence to a …","","Partition a sequence using predicate <code>pred</code> so that elements …","","Collect all iterator elements into one of two partitions. …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","A drop-in replacement for <code>std::iter::Peekable</code> which adds a …","Pass a reference to the next iterator element to the …","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","","","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","“Lift” a function of the values of an iterator so that …","Iterate over the entire iterator and multiply all the …","","Create an iterator where you can put back a single item","Create an iterator where you can put back multiple values …","Return an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.","","","","","","","Return either value of left, right, or the product of <code>f</code> …","An iterator source that produces elements indefinitely by …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","Iterate <code>iterable</code> in reverse.","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","","Return an iterator adaptor that steps <code>n</code> elements in the …","The concrete iterator types.","Iterate over the entire iterator and add all the elements.","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","","","","","","","Traits helpful for using certain <code>Itertools</code> methods in …","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","","","","","","","","","","","","","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","Creates a new unfold source with the specified closure as …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Returns the left value","Returns the right value","Return an iterator adaptor that applies a mutating function","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that wraps each element in a …","","","","Converts the arguments to iterators and zips them.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","","","","","","","","","","","","","","","","","","","","","","","A “meta iterator adaptor”. Its closure receives a …","An iterator for the elements in a single chunk.","An iterator that yields the Chunk iterators.","An iterator over all windows,wrapping back to the first …","An iterator adaptor that may join together adjacent …","An iterator to iterate through all the <code>k</code>-length …","An iterator to iterate through all the <code>n</code>-length …","An iterator that maps an iterator of tuples like …","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter for duplicate elements.","Iterator returned for the error case of …","An iterator adapter to filter and apply a transformation …","An iterator adapter to filter values within a nested …","An iterator adaptor that flattens <code>Result::Ok</code> values and …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator for the elements in a single group.","<code>GroupBy</code> is the storage for the lazy grouping operation.","<code>GroupingMap</code> is an intermediate struct for efficient …","<code>GroupingMapBy</code> is an intermediate struct for efficient …","An iterator that yields the Group iterators.","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","<code>ChunkLazy</code> is the storage for a lazy chunking operation.","An iterator that infinitely applies function to value and …","An iterator adaptor that merges an abitrary number of base …","An iterator adaptor that merges an abitrary number of base …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","See <code>MapOk</code>.","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merge-joins items from the two …","See <code>multipeek()</code> for more information.","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that pads a sequence to a minimum …","See <code>peek_nth()</code> for more information.","An iterator adaptor that takes items while a closure …","An iterator adaptor that iterates through all the <code>k</code>…","An iterator adapter to get the positions of each element …","An iterator to iterate through the powerset of the …","An iterator that produces only the <code>T</code> values as long as the …","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single item …","An iterator adaptor that allows putting multiple items in …","A wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …","See <code>repeat_call</code> for more information.","An iterator that produces <em>n</em> repetitions of an element.","An iterator adaptor that steps a number elements in the …","An iterator adaptor that borrows from a <code>Clone</code>-able iterator","One half of an iterator pair where both return the same …","An iterator over a incomplete tuple.","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator over all contiguous windows that produces …","An iterator that groups the items in tuples of a specific …","See <code>unfold</code> for more information.","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter out duplicate elements.","An iterator adapter to apply a mutating function to each …","An iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","An iterator adaptor that wraps each element in an <code>Position</code>.","See <code>multizip</code> for more information.","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …","This is the generic way to perform any operation on a …roups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a buffer with the produced items that was not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split the <code>PutBack</code> into its parts.","Returns the length of a combination produced by this …","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the (current) length of the pool from which …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Works exactly like <code>.next()</code> with the only difference that …","Works exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>","Returns a reference to the <code>nth</code> value without advancing the …","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","Put back a single value to the front of the iterator.","Puts x in front of the iterator. The values are yielded in …","The boxed iterator.","Reset the peeking “cursor”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal state that will be passed to the closure on the …","Groups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","put back value <code>value</code> (builder method)","Implemented for homogeneous tuples of size up to 12."],"i":[7,22,0,22,0,0,21,35,0,0,21,2,7,35,21,20,0,0,20,20,21,0,0,2,7,35,0,2,114,114,0,2,2,2,2,2,2,2,2,7,2,2,2,2,2,2,2,2,2,7,0,114,114,2,35,7,20,21,22,2,35,7,20,21,22,7,114,2,0,0,114,114,2,7,20,21,22,2,2,7,20,21,22,0,2,114,2,114,114,114,114,0,114,0,2,114,2,114,114,114,114,114,114,2,2,2,0,114,114,114,114,2,2,2,0,2,7,20,21,22,0,114,2,2,2,2,2,2,2,2,2,114,114,2,2,114,114,114,114,2,7,2,2,2,7,20,21,22,0,2,114,114,114,114,114,2,114,114,114,2,2,35,7,20,21,22,114,7,7,2,7,0,114,114,0,114,0,114,2,2,35,7,7,20,21,22,2,114,114,114,114,2,21,22,2,2,20,0,7,22,2,7,2,7,0,0,0,114,114,0,114,0,114,2,2,7,2,7,2,2,2,2,2,7,114,2,7,114,114,2,7,0,114,114,114,0,114,114,0,114,0,114,114,114,114,114,114,114,0,114,0,115,114,0,2,2,114,2,7,7,7,114,2,0,2,114,114,0,116,114,114,2,2,114,114,114,114,114,114,114,114,114,114,114,0,114,2,0,0,0,2,2,2,2,2,2,7,0,0,0,2,2,2,7,2,7,2,2,2,2,114,2,0,114,114,114,114,114,114,114,2,114,0,114,114,114,2,7,20,21,22,2,0,114,114,2,35,7,20,21,22,2,35,7,20,21,22,114,114,114,2,35,7,20,21,22,0,114,114,2,2,114,114,114,2,2,2,0,0,114,114,117,118,119,117,118,119,117,120,121,122,123,124,122,125,126,127,128,128,129,130,131,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,81,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,66,27,43,62,67,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,82,83,86,85,96,58,107,94,93,98,97,104,105,70,66,27,43,62,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,82,83,86,85,96,58,107,94,93,98,97,104,105,70,41,42,99,56,67,75,68,81,98,97,108,109,66,91,41,27,43,62,67,74,75,79,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,10,49,48,48,48,48,48,48,48,48,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,41,81,13,42,99,29,29,29,29,29,29,29,29,29,29,56,55,110,56,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,70,70,70,70,70,70,70,70,70,70,70,70,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,94,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,55,69,72,73,110,82,83,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,81,27,67,68,81,56,56,56,56,56,56,56,56,56,27,66,91,41,27,43,112,108,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,29,29,29,29,29,29,29,29,29,28,10,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,70,70,70,70,70,70,70,70,70,70,70,43,78,99,29,29,29,29,29,29,29,29,29,29,72,83,86,98,97,105,70,70,70,70,70,70,70,70,70,70,70,70,67,81,69,73,73,81,69,73,82,56,10,81,82,83,69,66,91,41,43,62,67,74,75,79,101,68,52,53,81,13,90,100,42,78,99,29,29,29,29,29,29,29,29,29,29,10,55,69,72,73,110,82,83,86,85,58,111,107,98,97,104,105,70,70,70,70,70,70,70,70,70,70,70,70,96,56,66,27,43,62,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,82,83,86,85,96,58,107,94,93,98,97,104,105,70,10,49,48,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,81,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,1],[[],1],[[],1],[[],1],[2,1],[2,3],[2],[2,4],[2,5],[2],[2,6],[2,2],[7,7],[[[8,[2]]],[[2,[8,8]]]],[[[8,[2]]],[[2,[8,8]]]],[2,4],[2,5],[2,6],[2],[2],[2,2],[2,3],[7,7],[[]],[[],[[11,[9,10]]]],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,9],[[],13],[2,[[9,[14]]]],[[],15],0,[16,17],[[],18],[2,2],[[[7,[19,19]]],[[7,[19,19]]]],[[[20,[19]]],[[20,[19]]]],[[[21,[19]]],[[21,[19]]]],[[[22,[19]]],[[22,[19]]]],[[2,2]],[[]],[[]],[[]],[[]],[[]],[[],23],[[2,2],24],[[],25],[2],[[],9],[[],26],[16,27],[16,28],[[]],[[]],[[],29],[[2,16]],[[],1],[2,16],[[],[[30,[16]]]],[[],[[30,[16]]]],[[],31],[[],32],[[],33],[[],34],[2],[2],[2,3],[[],[[9,[35]]]],[16],[16],[[],36],[[],37],[2],[2],[2],[[],38],[[2,2],1],[[[7,[39,39]],7],1],[[[20,[39]],20],1],[[[21,[39]],21],1],[[[22,[39]],22],1],[[],1],[[],[[11,[10]]]],[[2,3]],[[2,3]],[2],[[[2,[11,11]]],[[11,[2]]]],[2],[[[2,[9,9]]],[[9,[2]]]],[[[2,[11,11]]],[[11,[2]]]],[2],[2,[[11,[40]]]],[[],41],[[],42],[2,9],[2,9],[[],9],[[],9],[[],9],[[],43],[2,2],[7,7],[2,[[11,[40]]]],[[2,44],[[11,[45]]]],[[2,44],[[11,[45]]]],[[[7,[46,46]],44],47],[[[20,[46]],44],47],[[[21,[46]],44],47],[[[22,[46]],44],47],[[]],[2],[[],9],[[],11],[[],9],[[],11],[[],22],[2],[[]],[3,48],[3,49],[[]],[11,2],[[]],[[]],[[]],[[]],[[]],[[],50],[7,1],[7,1],[2],[[[7,[51,51]]]],[[],52],[[],52],[[],53],[[],54],[[],54],[[],55],[[],55],[2,11],[[]],[[]],[[]],[7,[[9,[2]]]],[[]],[[]],[[]],[[]],[[],[[30,[26]]]],[[],[[30,[26]]]],[[],56],[[],57],[2],[21],[22],[[]],[2,2],[[[20,[19]]],9],0,[7,1],[22,1],[2,1],[7,1],[2,1],[7,1],[[],58],0,[3,59],[3,59],[16,60],[[],61],[[],61],[[],62],[[],62],[2,9],[2,9],[7,9],[2,2],[7,7],[2],[2],[2],[2,16],[2,2],[7,7],[[],63],[2,2],[7,7],[[],64],[[],64],[2,2],[7,7],[[],9],[[],26],[[],26],[[],26],[[],65],[[],65],[[],66],[[],67],[[],67],[[],9],[[],26],[[],26],[[],26],[[],20],[[],20],[[],20],[[],68],[[],69],[[],69],[[]],[[]],[[]],[[],70],[2,9],[2,9],[[],9],[[2,16],9],[7],[7],[[7,71,71]],[16,72],[[2,2],[[9,[24]]]],[[],16],[2],[[]],[[]],[[],73],[[],9],[[],74],[16,75],[[[8,[2]],76],77],[2,[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[20,[16]]]],[[],[[20,[16]]]],[[],[[20,[16]]]],[[],78],[[],79],[[],11],[[],9],[80],[[],81],[[],82],[[],83],[2,[[11,[16,40]]]],[2,[[11,[40]]]],[[2,59],[[11,[16,40]]]],[[2,26],[[11,[16,40]]]],[[2,59],[[11,[16,40]]]],[[2,84,26],[[11,[16,40]]]],[7],[[],85],[16,86],[[],87],[2,9],[2],[2,9],[7,9],[2,2],[7,7],[2],[2],[2],[[2,88],[[11,[89,40]]]],[[],16],[2],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[2,[[9,[14]]]],[16,90],0,[[],9],[[],91],[[]],[[]],[[]],[[]],[[]],[[]],[[],59],0,[[],9],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],92],[[],93],[[],94],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],96],[[],97],[[],98],[2],[2],[[],99],[[],100],[[],101],[2,[[11,[16,40]]]],[2,[[11,[40]]]],[[2,102],[[11,[40]]]],[[],103],[[],104],[[],104],[[],105],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[56,30],[81,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,66],[27,27],[43,43],[62,62],[67,67],[75,75],[79,79],[101,101],[[[68,[19]]],[[68,[19]]]],[[[52,[19,19]]],[[52,[19,19]]]],[[[53,[19,19]]],[[53,[19,19]]]],[[[81,[19]]],[[81,[19]]]],[[[13,[19,19]]],[[13,[19,19]]]],[[[12,[19,19]]],[[12,[19,19]]]],[[[90,[19]]],[[90,[19]]]],[[[100,[19]]],[[100,[19]]]],[[[92,[19,19]]],[[92,[19,19]]]],[[[42,[19,19]]],[[42,[19,19]]]],[[[78,[19,19]]],[[78,[19,19]]]],[[[99,[19,19]]],[[99,[19,19]]]],[29,29],[[[28,[19]]],[[28,[19]]]],[[[10,[19]]],[[10,[19]]]],[[[49,[19,19]]],[[49,[19,19]]]],[[[48,[19]]],[[48,[19]]]],[[[56,[19]]],[[56,[19]]]],[[[55,[19,19]]],[[55,[19,19]]]],[[[69,[19]]],[[69,[19]]]],[[[72,[19,19]]],[[72,[19,19]]]],[[[73,[19]]],[[73,[19]]]],[[[82,[[0,[19,106]]]]],[[82,[[0,[19,106]]]]]],[83,83],[[[86,[19]]],[[86,[19]]]],[[[85,[19]]],[[85,[19]]]],[[[96,[19,19]]],[[96,[19,19]]]],[[[58,[19,19]]],[[58,[19,19]]]],[[[107,[19]]],[[107,[19]]]],[[[94,[19,19]]],[[94,[19,19]]]],[[[93,[19,19]]],[[93,[19,19]]]],[[[98,[[0,[19,106]],19,19]]],[[98,[[0,[19,106]],19,19]]]],[[[97,[[0,[19,106]]]]],[[97,[[0,[19,106]]]]]],[[[104,[19,19]]],[[104,[19,19]]]],[[[105,[19,19]]],[[105,[19,19]]]],[[[70,[19]]],[[70,[19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41],[42],[99],[56,30],[67,16],[75,16],[68,16],[81,16],[98,16],[97,16],[108],[109],[[66,44],47],[[91,44],47],[[41,44],47],[[27,44],47],[[43,44],47],[[62,44],47],[[67,44],47],[[74,44],47],[[75,44],47],[[79,44],47],[[68,44],47],[[[52,[46,46]],44],47],[[[53,[46,46]],44],47],[[[81,[46]],44],47],[[[13,[46,46]],44],47],[[12,44],47],[[[90,[46]],44],47],[[[100,[46]],44],47],[[[92,[46,46]],44],47],[[42,44],47],[[78,44],47],[[99,44],47],[[[29,[46,46]],44],47],[[28,44],47],[[10,44],47],[[10,44],47],[[49,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[[56,[46]],44],47],[[[55,[46,46]],44],47],[[[69,[46]],44],47],[[72,44],47],[[[73,[46]],44],47],[[[110,[46,46]],44],47],[[[82,[[0,[46,106]]]],44],47],[[[83,[46]],44],47],[[[86,[46]],44],47],[[85,44],47],[[96,44],47],[[58,44],47],[[[111,[46]],44],47],[[[107,[46]],44],47],[[[94,[46,46]],44],47],[[[93,[46,46]],44],47],[[[18,[46,[0,[46,19]]]],44],47],[[98,44],47],[[97,44],47],[[[104,[46,46]],44],47],[[[105,[46,46]],44],47],[[[70,[46]],44],47],[41],[81],[13],[42],[99],[29],[29],[29],[29],[29],[29],[29],[29],[29],[29],[56,30],[55],[110],[56,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[]],[[],70],[[],70],[[],70],[[],70],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[94,107],[[]],[[]],[[]],[[]],[[]],[50],[[]],[[]],[17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83,83],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81],[[[27,[106]]],16],[67,9],[68,9],[81,9],[56,30],[56,30],[56,30],[56,30],[56,30],[56,30],[56,[[30,[20]]]],[56,[[30,[20]]]],[56,[[30,[20]]]],[[[27,[106]]],16],[66,9],[91,9],[41,9],[27,9],[43,9],[112,9],[108,9],[113,9],[109,9],[62,9],[67,9],[74,9],[75,9],[79,9],[[[101,[106]]],9],[68,9],[52,9],[53,9],[81,9],[13,9],[12,9],[90,9],[100,9],[92,9],[42,9],[78,9],[99,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[28,9],[10,9],[55,9],[69,9],[72,9],[73,9],[110,9],[[[82,[106]]],9],[83,9],[86,9],[85,9],[96,9],[58,9],[111,9],[107,9],[94,9],[93,9],[18,9],[98,9],[97,9],[104,9],[105,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[43,9],[78,9],[99,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[72,9],[83,9],[86,9],[98,9],[97,9],[105,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[[67,16],9],[[81,16],9],[[[69,[106]]],9],[73,9],[[73,16],9],[81,9],[69,9],[73,9],[82,9],[56,30],[80],[81],[[[82,[106]]]],0,[69],[66],[91],[41],[43],[62],[67],[74],[75],[79],[[[101,[106]]]],[68],[52],[53],[81],[13],[90],[100],[42],[78],[99],[29],[29],[29],[29],[29],[29],[29],[29],[29],[29],[10],[55],[69],[72],[73],[110],[[[82,[106]]]],[83],[86],[85],[58],[111],[107],[98],[97],[104],[105],[70],[70],[70],[70],[70],[70],[70],[70],[70],[70],[70],[70],0,[56,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],59],[[],59],[[],59],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[81,81],0],"p":[[15,"bool"],[4,"Either"],[15,"str"],[3,"CStr"],[3,"Path"],[3,"OsStr"],[4,"EitherOrBoth"],[3,"Pin"],[4,"Option"],[3,"ExactlyOneError"],[4,"Result"],[3,"Batching"],[3,"Product"],[8,"Error"],[3,"Chain"],[15,"usize"],[3,"IntoChunks"],[3,"CircularTupleWindows"],[8,"Clone"],[4,"MinMaxResult"],[4,"Position"],[4,"FoldWhile"],[3,"Cloned"],[4,"Ordering"],[6,"Coalesce"],[3,"Vec"],[3,"Combinations"],[3,"CombinationsWithReplacement"],[3,"ConsTuples"],[3,"HashMap"],[6,"Dedup"],[6,"DedupBy"],[6,"DedupByWithCount"],[6,"DedupWithCount"],[4,"Diff"],[6,"Duplicates"],[6,"DuplicatesBy"],[3,"Enumerate"],[8,"PartialEq"],[3,"Error"],[3,"FilterMapOk"],[3,"FilterOk"],[3,"FlattenOk"],[3,"Formatter"],[3,"Error"],[8,"Debug"],[6,"Result"],[3,"Format"],[3,"FormatWith"],[3,"GroupBy"],[8,"Hash"],[3,"Interleave"],[3,"InterleaveShortest"],[6,"Intersperse"],[3,"IntersperseWith"],[3,"GroupingMap"],[6,"GroupingMapBy"],[3,"Iterate"],[3,"String"],[3,"IntoIter"],[6,"KMerge"],[3,"KMergeBy"],[6,"MapInto"],[6,"MapOk"],[6,"Merge"],[3,"MergeBy"],[3,"MergeJoinBy"],[3,"MultiProduct"],[3,"MultiPeek"],[3,"Zip"],[8,"FnOnce"],[3,"PadUsing"],[3,"PeekNth"],[3,"PeekingTakeWhile"],[3,"Permutations"],[3,"Context"],[4,"Poll"],[3,"Positions"],[3,"Powerset"],[3,"Demand"],[3,"PutBack"],[3,"PutBackN"],[3,"RcIter"],[15,"u8"],[3,"RepeatCall"],[3,"RepeatN"],[3,"Rev"],[4,"SeekFrom"],[15,"u64"],[3,"Step"],[3,"TakeWhileRef"],[3,"TupleCombinations"],[3,"TupleWindows"],[3,"Tuples"],[3,"TypeId"],[3,"Unfold"],[3,"Unique"],[3,"UniqueBy"],[3,"Update"],[3,"WhileSome"],[3,"WithPosition"],[3,"Arguments"],[3,"Zip"],[3,"ZipEq"],[3,"ZipLongest"],[8,"Iterator"],[3,"TupleBuffer"],[3,"Group"],[3,"Chunk"],[3,"ProcessResults"],[3,"Tee"],[3,"Groups"],[3,"Chunks"],[8,"Itertools"],[8,"MultiUnzip"],[8,"PeekingNext"],[13,"FirstMismatch"],[13,"Shorter"],[13,"Longer"],[13,"Left"],[13,"Right"],[13,"Both"],[13,"Left"],[13,"Right"],[13,"Continue"],[13,"Done"],[13,"OneElement"],[13,"MinMax"],[13,"First"],[13,"Middle"],[13,"Last"],[13,"Only"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,11,11,11,11,11,11,11],"n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":["itoa","","","","","","","","","","","",""],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[]],[[]],[1,1],[[],1],[[1,2],3],[[]],[[]],[[],1],[[],4],[[],4],[[],5]],"p":[[3,"Buffer"],[8,"Integer"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"jpeg_decoder":{"doc":"This crate contains a JPEG decoder.","t":[13,13,13,4,4,13,13,13,13,13,3,4,13,13,13,3,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12],"n":["ArithmeticEntropyCoding","CMYK","CMYK32","CodingProcess","ColorTransform","ColorTransform","ComponentCount","DNL","DctProgressive","DctSequential","Decoder","Error","Format","Grayscale","Hierarchical","ImageInfo","Internal","Io","JcsBgRgb","JcsBgYcc","L16","L8","Lossless","NonIntegerSubsamplingRatio","None","PixelFormat","RGB","RGB24","SamplePrecision","SubsamplingRatio","Unknown","Unsupported","UnsupportedFeature","YCCK","YCbCr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","coding_process","decode","decode_scan_lossless","eq","eq","eq","eq","eq","exif_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","height","icc_profile","info","into","into","into","into","into","into","into","new","pixel_bytes","pixel_format","provide","read_info","scale","set_color_transform","set_max_decoding_buffer_size","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width","0","0","0","0","0","0","0"],"q":["jpeg_decoder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jpeg_decoder::Error","","","","jpeg_decoder::UnsupportedFeature","",""],"d":["JPEG using arithmetic entropy coding instead of Huffman …","CMYK transform should be applied.","CMYK, 8 bits per channel","Represents the coding process of an image.","Describes the colour transform to apply before binary data …","Colour transform","Number of components in an image. 1, 3 and 4 components …","An image can specify a zero height in the frame header and …","Progressive Discrete Cosine Transform","Sequential Discrete Cosine Transform","JPEG decoder","Errors that can occur while decoding a JPEG image.","The image is not formatted properly. The string contains …","Grayscale transform should be applied (expects 1 channel)","Hierarchical JPEG.","Represents metadata of an image.","An internal error occurred while decoding the image.","An I/O error occurred while decoding the image.","big gamut red/green/blue, bg-sRGB","big gamut Y/Cb/Cr, bg-sYCC","Luminance (grayscale), 16 bits","Luminance (grayscale), 8 bits","Lossless","A subsampling ratio not representable as an integer.","No transform should be applied and the data is returned …","An enumeration over combinations of color spaces and bit …","RGB transform should be applied.","RGB, 8 bits per channel","Sample precision in bits. 8 bit sample precision is what …","Subsampling ratio.","Unknown colour transformation","The image makes use of a JPEG feature not (currently) …","An enumeration over JPEG features (currently) unsupported …","YCCK transform should be applied.","YCbCr transform should be applied.","","","","","","","","","","","","","","","","","","","","","","","","","The coding process of the image.","Decodes the image and returns the decoded pixels if …","decode_scan_lossless","","","","","","Returns raw exif data, starting at the TIFF header, if the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","The height of the image, in pixels.","Returns the embeded icc profile if the image contains one.","Returns metadata about the image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Decoder</code> using the reader <code>reader</code>.","Determine the size in bytes of each pixel in this format","The pixel format of the image.","","Tries to read metadata from the image without decoding it.","Configure the decoder to scale the image during decoding.","Colour transform to use when decoding the image. App …","Set maximum buffer size allowed for decoded images","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The width of the image, in pixels.","","","","","","",""],"i":[4,3,1,0,0,4,4,4,5,5,0,0,10,3,4,0,10,10,3,3,1,1,5,4,3,0,3,1,4,4,3,10,0,3,3,7,1,2,3,4,10,5,7,1,2,3,4,10,5,1,2,3,4,5,1,2,3,4,5,2,7,7,1,2,3,4,5,7,1,2,3,4,10,10,5,7,1,2,3,4,10,10,5,3,4,2,7,7,7,1,2,3,4,10,5,7,1,2,10,7,7,7,7,10,1,2,3,4,5,10,7,1,2,3,4,10,5,7,1,2,3,4,10,5,7,1,2,3,4,10,5,2,23,24,25,26,27,28,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[]],[[]],0,[[[7,[6]]],[[11,[[9,[8]],10]]]],0,[[1,1],12],[[2,2],12],[[3,3],12],[[4,4],12],[[5,5],12],[[[7,[6]]],13],[[1,14],15],[[2,14],15],[[3,14],15],[[4,14],15],[[10,14],15],[[10,14],15],[[5,14],15],[[]],[[]],[[]],[[]],[[]],[16,10],[[]],[[]],[3],[4],0,[[[7,[6]]],[[13,[[9,[8]]]]]],[[[7,[6]]],[[13,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,[[7,[6]]]],[1,17],0,[18],[[[7,[6]]],[[11,[10]]]],[[[7,[6]],19,19],[[11,[10]]]],[[[7,[6]],3]],[[[7,[6]],17]],[10,[[13,[20]]]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0,0,0],"p":[[4,"PixelFormat"],[3,"ImageInfo"],[4,"ColorTransform"],[4,"UnsupportedFeature"],[4,"CodingProcess"],[8,"Read"],[3,"Decoder"],[15,"u8"],[3,"Vec"],[4,"Error"],[4,"Result"],[15,"bool"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Error"],[15,"usize"],[3,"Demand"],[15,"u16"],[8,"Error"],[3,"String"],[3,"TypeId"],[13,"Format"],[13,"Unsupported"],[13,"Io"],[13,"Internal"],[13,"SamplePrecision"],[13,"ComponentCount"],[13,"ColorTransform"]]},\
"kurbo":{"doc":"2D geometry, with a focus on curves.","t":[3,3,3,3,3,13,3,13,3,3,13,17,16,3,18,18,18,3,3,13,3,13,17,3,13,3,18,8,8,8,8,8,8,8,4,16,4,3,3,13,3,3,3,13,3,3,3,3,8,3,3,4,3,13,13,3,13,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,8,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,10,5,5,5],"n":["Affine","Arc","BezPath","Circle","CircleSegment","ClosePath","ConstPoint","Cubic","CubicBez","CubicBezIter","CurveTo","DEFAULT_ACCURACY","DerivResult","Ellipse","FLIP_X","FLIP_Y","IDENTITY","Insets","Line","Line","LineIntersection","LineTo","MAX_EXTREMA","MinDistance","MoveTo","Nearest","ORIGIN","ParamCurve","ParamCurveArclen","ParamCurveArea","ParamCurveCurvature","ParamCurveDeriv","ParamCurveExtrema","ParamCurveNearest","PathEl","PathElementsIter","PathSeg","PathSegIter","Point","Quad","QuadBez","QuadBezIter","QuadSpline","QuadTo","Rect","RoundedRect","RoundedRectRadii","Segments","Shape","Size","SvgArc","SvgParseError","TranslateScale","UnexpectedEof","UnknownCommand","Vec2","Wrong","ZERO","ZERO","ZERO","ZERO","ZERO","abs","abs","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","append_iter","apply_affine","approx_spline","arclen","arclen","arclen","arclen","arclen","arclen","are_nonnegative","area","area","area","area","area","area","area","area","area","area","area","area","area","area","as_circle","as_circle","as_circle","as_coeffs","as_line","as_line","as_line","as_line","as_path_slice","as_path_slice","as_path_slice","as_rect","as_rect","as_rect","as_rounded_rect","as_rounded_rect","as_rounded_rect","as_single_radius","as_tuple","aspect_ratio","aspect_ratio","atan2","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_left","bottom_right","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","bounding_box","ceil","ceil","ceil","ceil","center","center","center","center","center","center","clamp","clamp","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close_path","common","contained_rect_with_aspect_ratio","contains","contains","contains","contains","cross","crossing_point","cubics_to_quadratic_splines","curvature","curvature","curvature","curve_to","default","default","default","default","default","default","default","default","default","default","default","default","deriv","deriv","deriv","deriv","deriv","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","distance","distance","distance_sq","distance_squared","div","div","div_assign","div_assign","dot","elements","end","end","end","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eval","eval","eval","eval","eval","eval","expand","expand","expand","expand","extend","extrema","extrema","extrema","extrema","extrema","extrema_ranges","extrema_ranges","flatten","flatten","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine","from_angle","from_center_size","from_iter","from_origin_size","from_origin_size","from_path_segments","from_points","from_points","from_rect","from_rect","from_single_radius","from_svg","from_svg_arc","from_vec","gauss_arclen","gauss_arclen","get_seg","height","height","height","hypot","hypot2","inflate","inflections","inner_radius","inset","intersect","intersect_line","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_path","into_path","into_path","inv_arclen","inv_arclen","inv_arclen","inv_arclen","inv_arclen","inverse","inverse","is_empty","is_empty","is_empty","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_straight_line","iter","large_arc","length","lerp","lerp","line_t","line_to","map_unit_square","max_side","max_x","max_y","midpoint","min_dist","min_side","min_x","min_y","move_to","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","nearest","nearest","nearest","nearest","nearest","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","nonnegative","normalize","origin","origin","outer_radius","p0","p0","p0","p1","p1","p1","p2","p2","p3","path_elements","path_elements","path_elements","path_elements","path_elements","path_elements","path_elements","path_elements","path_elements","path_elements","path_elements","path_elements","path_segments","path_segments","perimeter","perimeter","perimeter","perimeter","perimeter","perimeter","perimeter","perimeter","perimeter","perimeter","perimeter","perimeter","points","pop","provide","push","quad_to","radii","radii","radii","radii","radius","raise","rect","reverse","rotate","rotation","round","round","round","round","scale","scale","scale_from_origin","scale_non_uniform","segment","segment_t","segments","segments","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signed_area","signed_area","signed_area","signed_area","signed_area","size","size","start","start","start","start","start","start_angle","start_angle","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","subdivide","subdivide","subdivide","subdivide","subsegment","subsegment","subsegment","subsegment","subsegment","subsegment","sweep","sweep_angle","sweep_angle","t","t1","t2","to","to_cubic","to_cubic_beziers","to_ellipse","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_path","to_path","to_path","to_point","to_quads","to_rect","to_rounded_rect","to_rounded_rect","to_size","to_string","to_string","to_string","to_string","to_string","to_svg","to_vec2","to_vec2","top_left","top_right","transform_rect_bbox","translate","translate","trunc","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","uniform_xy","union","union_pt","width","width","width","winding","winding","winding","winding","winding","winding","winding","winding","winding","winding","winding","winding","with_center","with_origin","with_radii","with_rotation","with_size","write_to","x","x","x0","x0","x1","x1","x_rotation","x_rotation","x_value","y","y","y0","y0","y1","y1","y_value","0","0","0","0","1","1","2","0","0","0","0","FloatExt","GAUSS_LEGENDRE_COEFFS_11","GAUSS_LEGENDRE_COEFFS_16","GAUSS_LEGENDRE_COEFFS_16_HALF","GAUSS_LEGENDRE_COEFFS_24","GAUSS_LEGENDRE_COEFFS_24_HALF","GAUSS_LEGENDRE_COEFFS_3","GAUSS_LEGENDRE_COEFFS_32","GAUSS_LEGENDRE_COEFFS_32_HALF","GAUSS_LEGENDRE_COEFFS_4","GAUSS_LEGENDRE_COEFFS_5","GAUSS_LEGENDRE_COEFFS_6","GAUSS_LEGENDRE_COEFFS_7","GAUSS_LEGENDRE_COEFFS_8","GAUSS_LEGENDRE_COEFFS_8_HALF","GAUSS_LEGENDRE_COEFFS_9","expand","solve_cubic","solve_itp","solve_quadratic"],"q":["kurbokurbo::PathEl","","","","","","","kurbo::PathSeg","","","kurbo::SvgParseError","kurbo::common","","","","","","","","","","","","","","","","","","",""],"d":["A 2D affine transform.","A single arc segment.","A Bézier path.","A circle.","A segment of a circle.","Close off the path.","A trivial “curve” that is just a constant.","A cubic bezier segment.","A single cubic Bézier segment.","An iterator for cubic beziers.","Draw a cubic bezier using the current location and the …","A default value for methods that take an ‘accuracy’ …","The parametric curve obtained by taking the derivative of …","An ellipse.","A transform that is flipped on the x-axis.","A transform that is flipped on the y-axis. Useful for …","The identity transform.","Insets from the edges of a rectangle.","A single line.","A line segment.","An intersection of a <code>Line</code> and a <code>PathSeg</code>.","Draw a line from the current location to the point.","The maximum number of extrema that can be reported in the …","The minimum distance between two Bézier curves.","Move directly to the point without drawing anything, …","The nearest position on a curve to some point.","The point at the origin; (0, 0).","A curve parametrized by a scalar.","A parametrized curve that can have its arc length measured.","A parametrized curve that can have its signed area …","A parametrized curve that reports its curvature.","A differentiable parametrized curve.","A parametrized curve that reports its extrema.","A parametrized curve that reports the nearest point.","The element of a Bézier path.","The iterator returned by the <code>path_elements</code> method.","A segment of a Bézier path.","An iterator for path segments.","A 2D point.","A quadratic bezier segment.","A single quadratic Bézier segment.","An iterator for quadratic beziers.","A quadratic Bézier spline.","Draw a quadratic bezier using the current location and the …","A rectangle.","A rectangle with equally rounded corners.","Radii for each corner of a rounded rectangle.","An iterator that transforms path elements to path segments.","A generic trait for open and closed shapes.","A 2D size.","A single SVG arc segment.","An error which can be returned when parsing an SVG.","A transformation including scaling and translation.","The input string ended while still expecting input.","Encountered an unknown command letter.","A 2D vector.","A number was expected.","Zeroed insets.","The point (0, 0).","The empty rectangle at the origin.","A size with zero width or height.","The vector (0, 0).","Take absolute value of width and height.","Takes the absolute value of all corner radii.","","","In this context adding a <code>Vec2</code> applies the corresponding …","","","","","","","","","","","","","","","","","Create an iterator generating Bezier path elements.","Apply an affine transform to the path.","Return a <code>QuadSpline</code> approximating this cubic Bézier.","The arc length of the curve.","","Arclength of a cubic Bézier segment.","","","Arclength of a quadratic Bézier segment.","Return <code>true</code> iff all values are nonnegative.","Signed area.","","Note: shape isn’t closed so area is not well defined.","Signed area.","The area under the curve.","","","","Returning zero here is consistent with the contract (area …","","The area of the rectangle.","","","The area covered by this size.","If the shape is a circle, make it available.","If the shape is a circle, make it available.","","Get the coefficients of the transform.","If the shape is a line, make it available.","If the shape is a line, make it available.","","","If the shape is stored as a slice of path elements, make …","If the shape is stored as a slice of path elements, make …","","If the shape is a rectangle, make it available.","If the shape is a rectangle, make it available.","","If the shape is a rounded rectangle, make it available.","If the shape is a rounded rectangle, make it available.","","If all radii are equal, returns the value of the radii. …","Decompose transformation into translation and scale.","The aspect ratio of the <code>Rect</code>.","Returns the aspect ratio of a rectangle with the given …","Angle of vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The radius of the bottom-left corner.","The radius of the bottom-right corner.","The smallest rectangle that encloses the shape.","","The smallest rectangle that encloses the curve in the …","The smallest rectangle that encloses the curve in the …","","","","","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded up to the …","Returns a new <code>Rect</code>, with each coordinate value rounded up …","Returns a new <code>Size</code>, with <code>width</code> and <code>height</code> rounded up to …","Returns a new <code>Vec2</code>, with <code>x</code> and <code>y</code> rounded up to the nearest …","Returns the center of this ellipse.","The center point of the rectangle.","The center point of the rectangle.","The center.","The arc’s centre point.","The center.","For each corner, takes the min of that corner’s radius …","Returns a new size bounded by <code>min</code> and <code>max.</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Push a “close path” element onto the path.","Common mathematical operations","Returns the largest possible <code>Rect</code> that is fully contained …","Returns <code>true</code> if the <code>Point</code> is inside this shape.","Returns <code>true</code> if the <code>Point</code> is inside this shape.","Returns <code>true</code> if <code>point</code> lies within <code>self</code>.","","Cross product of two vectors.","Computes the point where two lines, if extended to …","Convert multiple cubic Bézier curves to quadratic splines.","Compute the signed curvature at parameter <code>t</code>.","Compute the signed curvature at parameter <code>t</code>.","","Push a “curve to” element onto the path.","","","","","","","","","","","","","The derivative of the curve.","","","","","","","","","","","","","","","","","","","","","","","","","Compute the determinant of this transform.","Euclidean distance.","The shortest distance between any two points on the two …","The square of the distance from the nearest position on …","Squared Euclidean distance.","","Note: division by a scalar is implemented by multiplying …","","","Dot product of two vectors.","Get the path elements.","The end point.","The end point.","","","","","","","","","","","","","","","","","","","","","","Evaluate the curve at parameter <code>t</code>.","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded away from zero …","Returns a new <code>Rect</code>, with each coordinate value rounded …","Returns a new <code>Size</code>, with <code>width</code> and <code>height</code> rounded away …","Returns a new <code>Vec2</code>, with <code>x</code> and <code>y</code> rounded away from zero to …","","Compute the extrema of the curve.","","","","","Return parameter ranges, each of which is monotonic within …","Return parameter ranges, each of which is monotonic within …","Flatten the path, invoking the callback repeatedly.","Flatten the path, invoking the callback repeatedly.","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded down to the …","Returns a new <code>Rect</code>, with each coordinate value rounded …","Returns a new <code>Size</code>, with <code>width</code> and <code>height</code> rounded down to …","Returns a new <code>Vec2</code>, with <code>x</code> and <code>y</code> rounded down to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The arc’s start point.","Create an ellipse from an affine transformation of the …","A unit vector of the given angle.","A new rectangle from center and size.","","A new rectangle from origin and size.","A new rectangle from origin and size.","Create a BezPath with segments corresponding to the …","A new rectangle from two points.","A new rectangle from two <code>Point</code>s.","Returns the largest ellipse that can be bounded by this …","A new rounded rectangle from a rectangle and corner radii.","Create a new RoundedRectRadii from a single radius. The …","Try to parse a bezier path from an SVG path element.","Creates an <code>Arc</code> from a <code>SvgArc</code>.","Create a path from a vector of path elements.","Estimate arclength using Gaussian quadrature.","Estimate arclength using Gaussian quadrature.","Get the segment at the given element index.","The height of the rectangle.","The height of the rectangle.","The height.","Magnitude of vector.","Magnitude squared of vector.","Expand a rectangle by a constant amount in both directions.","Determine the inflection points.","The inner radius.","Create a new <code>Rect</code> by applying the <code>Insets</code>.","The intersection of two rectangles.","Compute intersections against a line.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Convert into a Bézier path.","Convert into a Bézier path.","","Solve for the parameter that has the given arc length from …","Solve for the parameter that has the given arc length from …","","","","Compute the inverse transform.","Compute the inverse transform.","Returns <code>true</code> if the path contains no segments.","Whether this rectangle has zero area.","Whether this size has zero area.","Is this circle segment finite?","Is this map finite?","Is this path finite?","Is this path element finite?","Is this Bezier path finite?","Is this line intersection finite?","Is this circle finite?","Is this cubic Bezier curve finite?","Is this ellipse finite?","Are these insets finite?","Is this line finite?","Is this point finite?","Is this point finite?","Is this quadratic Bezier curve finite?","Is this rectangle finite?","Is this rounded rectangle finite?","Returns true if all radius values are finite.","Is this size finite?","Is this translate/scale finite?","Is this Vec2 finite?","Is this circle segment NaN?","Is this map NaN?","Is this path NaN?","Is this path element NaN?","Is this Bezier path NaN?","Is this line intersection NaN?","Is this circle NaN?","Is this cubic Bezier curve NaN?","Is this ellipse NaN?","Are these insets NaN?","Is this line NaN?","Is this point NaN?","Is this point NaN?","Is this quadratic Bezier curve NaN?","Is this rectangle NaN?","Is this rounded rectangle NaN?","Returns true if any corner radius value is NaN.","Is this size NaN?","Is this translate/scale NaN?","Is this Vec2 NaN?","Checks that arc is actually a straight line.","Returns an iterator over the path’s elements.","Does this arc sweep through more than π radians?","The length of the line.","Linearly interpolate between two points.","Linearly interpolate between two vectors.","The ‘time’ that the intersection occurs, on the line.","Push a “line to” element onto the path.","Creates an affine transformation that takes the unit …","Returns the max of <code>width</code> and <code>height</code>.","Returns the maximum value for the x-coordinate of the …","Returns the maximum value for the y-coordinate of the …","Determine the midpoint of two points.","Minimum distance between two PathSegs","Returns the min of <code>width</code> and <code>height</code>.","Returns the minimum value for the x-coordinate of the …","Returns the minimum value for the y-coordinate of the …","Push a “move to” element onto the path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find the position on the curve that is nearest to the …","","Find the nearest point, using subdivision.","","Find the nearest point, using analytical algorithm based …","","","Create a <code>CircleSegment</code> out of its constituent parts.","Construct an affine transform from coefficients.","Create a new path.","A new circle from center and radius.","Create a new cubic Bézier segment.","Create A new ellipse with a given center, radii, and …","New insets. The ordering of the arguments is “left, top, …","Create a new line.","Create a new <code>Point</code> with the provided <code>x</code> and <code>y</code> coordinates.","Create a new quadratic Bézier segment.","Construct a new <code>QuadSpline</code> from an array of <code>Point</code>s.","A new rectangle from minimum and maximum coordinates.","A new rectangle from minimum and maximum coordinates.","Create a new RoundedRectRadii. This function takes radius …","Create a new <code>Size</code> with the provided <code>width</code> and <code>height</code>.","Create a new transformation from translation and scale.","Create a new vector.","","","","","Return new <code>Insets</code> with all negative values replaced with …","Returns a vector of magnitude 1.0 with the same angle as …","The origin of the rectangle.","The origin of the rectangle.","The outer radius.","","The line’s start point.","","","The line’s end point.","","","","","Returns an iterator over this shape expressed as <code>PathEl</code>s; …","","","","","","","","","","","","Returns an iterator over this shape expressed as Bézier …","Returns an iterator over this shape expressed as Bézier …","Total length of perimeter.","","The perimeter of the ellipse.","","","","","","","","","","Return the spline’s control <code>Point</code>s.","Removes the last <code>PathEl</code> from the path and returns it, or …","","Push a generic path element onto the path.","Push a “quad to” element onto the path.","Returns the two radii of this ellipse.","Radii of the rounded corners.","The arc’s radii, where the vector’s x-component is the …","The arc’s radii, where the vector’s x-component is the …","The radius.","Raise the order by 1.","The (non-rounded) rectangle.","Returns a new <code>PathSeg</code> describing the same path as <code>self</code>, …","An affine transform representing rotation.","The ellipse’s rotation, in radians.","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded to the nearest …","Returns a new <code>Rect</code>, with each coordinate value rounded to …","Returns a new <code>Size</code>, with <code>width</code> and <code>height</code> rounded to the …","Returns a new <code>Vec2</code>, with <code>x</code> and <code>y</code> rounded to the nearest …","An affine transform representing uniform scaling.","Create a new transformation with scale only.","Scales the <code>Rect</code> by <code>factor</code> with respect to the origin (the …","An affine transform representing non-uniform scaling with …","Create a <code>CircleSegment</code> by cutting out parts of this circle.","The ‘time’ that the intersection occurs, on the path …","Transform an iterator over path elements into one over path","Iterate over the path segments.","","","","","","","","","","","","","","","","","","","","","Compute the signed area under the curve.","","","","","Returns the total delta represented by these insets as a …","The size of the rectangle.","The start point.","The start point.","","","","The angle to start drawing the segment (in radians).","The start angle in radians.","","","In this context subtracting a <code>Vec2</code> applies the …","","","","","","","","","","","","","","","","","","Subdivide into (roughly) halves.","Subdivide into (roughly) halves.","Subdivide into halves, using de Casteljau.","Subdivide into halves, using de Casteljau.","Get a subsegment of the curve for the given parameter …","","","","","","Determines if the arc should begin moving at positive …","The arc length of the segment (in radians).","The angle between the start and end of the arc, in radians.","The position on the curve of the nearest point, as a …","The position of the nearest point on the first curve, as a …","The position of the nearest point on the second curve, as …","The arc’s end point.","Convert this segment to a cubic bezier.","Converts an Arc into a series of cubic bezier segments.","Returns the <code>Ellipse</code> that is bounded by this <code>Rect</code>.","","","","","","","","","","","","","","","","","","","","","","","","Convert to a Bézier path.","Convert to a Bézier path.","","Convert this vector into a <code>Point</code>.","Convert to quadratic Béziers.","Convert this <code>Size</code> into a <code>Rect</code> with origin <code>(0.0, 0.0)</code>.","Creates a new <code>RoundedRect</code> from this <code>Rect</code> and the provided …","Convert this <code>Size</code> into a <code>RoundedRect</code> with origin <code>(0.0, 0.0)</code>…","Convert this vector into a <code>Size</code>.","","","","","","Convert the path to an SVG path string representation.","Convert this point into a <code>Vec2</code>.","Convert this size into a <code>Vec2</code>, with <code>width</code> mapped to <code>x</code> and …","The radius of the top-left corner.","The radius of the top-right corner.","Compute the bounding box of a transformed rectangle.","An affine transform representing translation.","Create a new transformation with translation only.","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded towards zero to …","Returns a new <code>Rect</code>, with each coordinate value rounded …","Returns a new <code>Size</code>, with <code>width</code> and <code>height</code> rounded down …","Returns a new <code>Vec2</code>, with <code>x</code> and <code>y</code> rounded towards zero to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","New uniform insets.","New insets with uniform values along each axis.","The smallest rectangle enclosing two rectangles.","Compute the union with one point.","The width of the rectangle.","The width of the rectangle.","The width.","The winding number of a point.","","Note: shape isn’t closed, so a point’s winding number …","Winding number of point.","","","","","Same consideration as <code>area</code>.","","Note: this function is carefully designed so that if the …","","Create a new <code>Ellipse</code> centered on the provided point.","Create a new <code>Rect</code> with the same size as <code>self</code> and a new …","Create a new <code>Ellipse</code> with the provided radii.","Create a new <code>Ellipse</code>, with the rotation replaced by …","Create a new <code>Rect</code> with the same origin as <code>self</code> and a new …","Write the SVG representation of this path to the provided …","The x coordinate.","The x-coordinate.","The minimum x coordinate (left edge).","The minimum x coordinate (left edge).","The maximum x coordinate (right edge).","The maximum x coordinate (right edge).","How much the arc is rotated, in radians.","How much the arc is rotated, in radians.","The total delta on the x-axis represented by these insets.","The y coordinate.","The y-coordinate.","The minimum y coordinate (top edge in y-down spaces).","The minimum y coordinate (top edge in y-down spaces).","The maximum y coordinate (bottom edge in y-down spaces).","The maximum y coordinate (bottom edge in y-down spaces).","The total delta on the y-axis represented by these insets.","","","","","","","","","","","","Adds convenience methods to <code>f32</code> and <code>f64</code>.","","","","","","","","","","","","","","","","Rounds to the nearest integer away from zero, unless the …","Find real roots of cubic equation.","Solve an arbitrary function for a zero-crossing.","Find real roots of quadratic equation."],"i":[0,0,0,0,0,24,0,20,0,0,24,0,54,0,16,16,16,0,0,20,0,24,0,0,24,0,9,0,0,0,0,0,0,0,0,55,0,0,0,20,0,0,0,24,0,0,0,0,0,0,0,0,0,37,37,0,37,7,9,1,11,4,1,2,3,5,6,7,8,9,9,1,1,10,11,12,4,4,9,9,11,12,4,13,15,17,56,20,17,8,21,22,7,55,3,13,15,20,5,17,6,8,22,1,1,10,11,55,55,5,16,55,55,20,8,55,55,15,55,55,1,55,55,10,2,12,1,11,4,41,42,43,3,44,45,16,13,15,24,20,25,5,17,6,7,8,21,26,9,22,18,1,10,2,11,27,37,12,4,41,42,43,3,44,45,16,13,15,24,20,25,5,17,6,7,8,21,26,9,22,18,1,10,2,11,27,37,12,4,2,2,55,3,57,57,13,15,20,5,17,6,8,22,1,10,9,1,11,4,6,1,10,3,13,5,2,11,16,13,15,24,20,25,5,17,6,7,8,21,26,9,22,18,1,10,2,11,27,12,4,16,13,15,24,20,25,5,17,6,7,8,21,26,9,22,18,1,10,2,11,27,12,4,15,0,1,55,55,1,1,4,8,0,58,58,8,15,16,15,5,6,7,9,1,10,2,11,12,4,54,17,8,21,22,16,13,15,24,20,5,17,6,7,8,21,9,22,1,10,2,11,27,12,4,16,9,41,26,9,11,4,11,4,4,15,59,59,17,8,22,16,13,15,24,20,5,17,6,7,8,9,22,18,1,10,2,11,4,59,20,17,8,21,22,9,1,11,4,15,57,20,17,8,22,57,57,0,15,9,1,11,4,16,13,15,24,20,25,5,17,6,7,8,21,26,9,9,22,18,1,1,10,2,11,11,27,37,37,12,4,4,41,42,43,3,44,45,16,16,13,15,24,20,20,20,20,25,5,17,6,6,7,7,7,7,8,21,26,9,9,22,18,1,1,1,10,2,2,2,11,11,27,37,12,4,4,27,6,4,1,15,1,10,15,1,10,6,10,2,15,13,15,54,54,15,1,10,11,4,4,1,17,3,1,1,20,41,42,43,3,44,45,16,13,15,24,20,25,5,17,6,7,8,21,26,9,22,18,1,10,2,11,27,37,12,4,42,43,44,45,15,15,55,55,15,56,56,20,8,21,16,12,15,1,11,3,16,15,24,20,25,5,17,6,7,8,21,9,22,1,10,2,11,12,4,3,16,15,24,20,25,5,17,6,7,8,21,9,22,1,10,2,11,12,4,27,15,27,8,9,4,25,15,16,11,1,1,9,20,11,1,1,15,16,16,16,16,16,16,16,16,16,16,16,11,12,12,12,12,12,12,12,12,12,12,12,12,12,4,16,11,12,4,60,20,17,8,22,7,4,3,16,15,5,17,6,7,8,9,22,18,1,10,2,11,12,4,42,43,44,45,7,4,1,10,3,17,8,22,17,8,22,17,22,17,55,3,13,15,20,5,17,6,8,22,1,10,55,55,55,3,13,15,20,5,17,6,8,22,1,10,18,15,37,15,15,6,10,13,27,5,22,10,20,16,6,9,1,11,4,16,12,1,16,5,25,0,15,16,13,15,24,20,5,17,6,7,8,21,9,22,1,10,2,11,27,12,4,61,20,17,8,22,7,1,59,59,17,8,22,3,13,3,5,6,7,8,9,9,9,1,1,1,10,11,12,4,9,9,11,12,4,59,59,17,22,59,20,17,8,21,22,27,3,13,26,41,41,27,20,13,1,16,13,15,24,20,25,5,17,6,7,8,21,26,9,22,18,1,10,2,11,27,12,4,55,55,15,4,17,11,1,11,4,9,1,11,37,4,15,9,11,2,2,16,16,12,9,1,11,4,41,42,43,3,44,45,16,13,15,24,20,25,5,17,6,7,8,21,26,9,22,18,1,10,2,11,27,37,12,4,41,42,43,3,44,45,16,13,15,24,20,25,5,17,6,7,8,21,26,9,22,18,1,10,2,11,27,37,12,4,41,42,43,3,44,45,16,13,15,24,20,25,5,17,6,7,8,21,26,9,22,18,1,10,2,11,27,37,12,4,7,7,1,1,1,10,11,55,3,13,15,20,5,17,6,8,22,1,10,6,1,6,6,1,15,9,4,7,1,7,1,13,27,7,9,4,7,1,7,1,7,62,63,64,65,64,65,65,66,67,68,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[[3,4],3],[[5,4],5],[[6,4],6],[[7,1],1],[[8,4],8],[9,9],[[9,4],9],[[1,7],1],[[1,4],1],[[10,4],10],[[11,11],11],[[12,4],12],[[4,4],4],[[4,12],12],[9],[[9,4]],[[11,11]],[[12,4]],[[4,4]],0,[[15,16]],[[17,14],[[19,[18]]]],[14,14],[[20,14],14],[[17,14],14],[[8,14],14],[[21,14],14],[[22,14],14],[7,23],[[],14],[3,14],[13,14],[15,14],[20,14],[5,14],[17,14],[6,14],[8,14],[22,14],[1,14],[1,14],[10,14],[11,14],[[],[[19,[5]]]],[[],[[19,[5]]]],[5,[[19,[5]]]],[16],[[],[[19,[8]]]],[[],[[19,[8]]]],[20,[[19,[8]]]],[8,[[19,[8]]]],[[],19],[[],19],[15,19],[[],[[19,[1]]]],[[],[[19,[1]]]],[1,[[19,[1]]]],[[],[[19,[10]]]],[[],[[19,[10]]]],[10,[[19,[10]]]],[2,[[19,[14]]]],[12],[1,14],[11,14],[4,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],1],[3,1],[[],1],[[],1],[13,1],[15,1],[20,1],[5,1],[17,1],[6,1],[8,1],[22,1],[1,1],[10,1],[9,9],[1,1],[11,11],[4,4],[6,9],[1,9],[10,9],0,0,0,[[2,14],2],[[11,11,11],11],[16,16],[13,13],[15,15],[24,24],[20,20],[25,25],[5,5],[17,17],[6,6],[7,7],[8,8],[21,21],[26,26],[9,9],[22,22],[18,18],[1,1],[10,10],[2,2],[11,11],[27,27],[12,12],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],0,[[1,14],1],[9,23],[9,23],[[1,9],23],[[1,9],23],[[4,4],14],[[8,8],[[19,[9]]]],[14,[[19,[[28,[18]]]]]],[14,14],[14,14],[[8,14],14],[[15,[29,[9]],[29,[9]],[29,[9]]]],[[],16],[[],15],[[],5],[[],6],[[],7],[[],9],[[],1],[[],10],[[],2],[[],11],[[],12],[[],4],[[]],[17,22],[8,21],[21,21],[22,8],[[],[[30,[16]]]],[[],[[30,[13]]]],[[],[[30,[15]]]],[[],[[30,[24]]]],[[],[[30,[20]]]],[[],[[30,[5]]]],[[],[[30,[17]]]],[[],[[30,[6]]]],[[],[[30,[7]]]],[[],[[30,[8]]]],[[],[[30,[21]]]],[[],[[30,[9]]]],[[],[[30,[22]]]],[[],[[30,[1]]]],[[],[[30,[10]]]],[[],[[30,[2]]]],[[],[[30,[11]]]],[[],[[30,[27]]]],[[],[[30,[12]]]],[[],[[30,[4]]]],[16,14],[[9,9],14],0,0,[[9,9],14],[[11,14],11],[[4,14],4],[[11,14]],[[4,14]],[[4,4],14],[15],[[],9],[[],9],[17,9],[8,9],[22,9],[[16,16],23],[[13,13],23],[[15,15],23],[[24,24],23],[[20,20],23],[[5,5],23],[[17,17],23],[[6,6],23],[[7,7],23],[[8,8],23],[[9,9],23],[[22,22],23],[[18,18],23],[[1,1],23],[[10,10],23],[[2,2],23],[[11,11],23],[[4,4],23],[14,9],[[20,14],9],[[17,14],9],[[8,14],9],[[21,14],9],[[22,14],9],[9,9],[1,1],[11,11],[4,4],[[15,31]],[[],[[32,[14]]]],[20,[[32,[14]]]],[17,[[32,[14]]]],[8,[[32,[14]]]],[22,[[32,[14]]]],[[],[[32,[[33,[14]]]]]],[[],[[32,[[33,[14]]]]]],[[31,14,34]],[[15,14,34]],[9,9],[1,1],[11,11],[4,4],[[16,35],36],[[13,35],36],[[15,35],36],[[24,35],36],[[20,35],36],[[25,35],36],[[5,35],36],[[17,35],36],[[6,35],36],[[7,35],36],[[8,35],36],[[21,35],36],[[26,35],36],[[9,35],36],[[9,35],36],[[22,35],36],[[18,35],36],[[1,35],36],[[1,35],36],[[10,35],36],[[2,35],36],[[11,35],36],[[11,35],36],[[27,35],36],[[37,35],36],[[37,35],36],[[12,35],36],[[4,35],36],[[4,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,16],[[]],[[]],[[]],[17,20],[22,20],[[]],[8,20],[[]],[[]],[[]],[5,6],[[]],[[],7],[[],7],[14,7],[[]],[[]],[[]],[[]],[[],9],[[]],[[]],[[]],[[],1],[[],1],[[]],[[]],[14,2],[[]],[[],2],[[]],[[],11],[[]],[[]],[[]],[[]],[[],4],0,[16,6],[14,4],[[[29,[9]],[29,[11]]],1],[31,15],[[[29,[9]],[29,[11]]],1],[[[29,[9]],[29,[11]],[29,[2]]],10],[38,15],[[[29,[9]],[29,[9]]],1],[[[29,[9]],[29,[9]],[29,[2]]],10],[1,6],[[1,[29,[2]]],10],[14,2],[39,[[30,[15,37]]]],[27,[[19,[13]]]],[[[28,[24]]],15],[[],14],[[],14],[[15,40],[[19,[20]]]],[1,14],[10,14],0,[4,14],[4,14],[[1,14,14],1],[17,[[32,[14]]]],0,[[1,[29,[7]]],1],[[1,1],1],[[20,8],[[32,[25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[14,15],[14,15],[[15,14],15],[[14,14],14],[[14,14],14],[[20,14,14],14],[[8,14,14],14],[[21,14,14],14],[16,16],[12,12],[15,23],[1,23],[11,23],[3,23],[16,23],[15,23],[24,23],[20,23],[25,23],[5,23],[17,23],[6,23],[7,23],[8,23],[21,23],[9,23],[22,23],[1,23],[10,23],[2,23],[11,23],[12,23],[4,23],[3,23],[16,23],[15,23],[24,23],[20,23],[25,23],[5,23],[17,23],[6,23],[7,23],[8,23],[21,23],[9,23],[22,23],[1,23],[10,23],[2,23],[11,23],[12,23],[4,23],[27,23],[15,38],0,[8,14],[[9,9,14],9],[[4,4,14],4],0,[[15,[29,[9]]]],[1,16],[11,14],[1,14],[1,14],[[9,9],9],[[20,20,14],41],[11,14],[1,14],[1,14],[[15,[29,[9]]]],[[16,5]],[[16,15],15],[[16,22],22],[[16,15],15],[[16,17],17],[[16,8],8],[[16,9],9],[[16,20],20],[[16,24],24],[[16,16],16],[[16,6]],[[11,14],11],[[12,20],20],[[12,9],9],[[12,17],17],[[12,22],22],[[12,2],2],[[12,24],24],[[12,5],5],[[12,1],1],[[12,15],15],[[12,15],15],[[12,12],12],[[12,8],8],[[12,10],10],[[4,14],4],[[16,16]],[[11,14]],[[12,12]],[[4,14]],[[9,14],26],[[20,9,14],26],[[17,9,14],26],[[8,9,14],26],[[22,9,14],26],[7,7],[4,4],[[[29,[9]],14,14,14,14],3],[[],16],[[],15],[[[29,[9]],14],5],[[[29,[9]],[29,[9]],[29,[9]],[29,[9]]],17],[[[29,[9]],[29,[4]],14],6],[[14,14,14,14],7],[[[29,[9]],[29,[9]]],8],[[14,14],9],[[[29,[9]],[29,[9]],[29,[9]]],22],[[[28,[9]]],18],[[14,14,14,14],1],[[14,14,14,14,[29,[2]]],10],[[14,14,14,14],2],[[14,14],11],[[4,14],12],[[14,14],4],[[[42,[38]]],[[19,[20]]]],[43,[[19,[24]]]],[44,[[19,[24]]]],[45,[[19,[24]]]],[7,7],[4,4],[1,9],[10,9],0,0,0,0,0,0,0,0,0,0,[14],[[3,14],[[47,[[47,[[47,[[47,[[46,[24]],[46,[24]]]],0]],[46,[24]]]],0]]]],[[13,14]],[[15,14]],[[20,14],43],0,[[17,14],44],[[6,14]],0,[[22,14],45],0,0,[14,42],[14,42],[14,14],[[3,14],14],[[13,14],14],[[15,14],14],[[20,14],14],[[5,14],14],[[17,14],14],[[6,14],14],[[8,14],14],[[22,14],14],[[1,14],14],[[10,14],14],[18],[15,[[19,[24]]]],[48],[[15,24]],[[15,[29,[9]],[29,[9]]]],[6,4],[10,2],0,0,0,[22,17],[10,1],[20,20],[14,16],[6,14],[9,9],[1,1],[11,11],[4,4],[14,16],[14,12],[[1,14],1],[[14,14],16],[[5,14,14,14],3],0,[[],42],[15,38],[16,30],[13,30],[15,30],[24,30],[20,30],[5,30],[17,30],[6,30],[7,30],[8,30],[21,30],[9,30],[22,30],[1,30],[10,30],[2,30],[11,30],[27,30],[12,30],[4,30],[[],14],[20,14],[17,14],[8,14],[22,14],[7,11],[1,11],[[],9],[[],9],[17,9],[8,9],[22,9],0,0,[[3,4],3],[[5,4],5],[[6,4],6],[[7,1],1],[[8,4],8],[[9,9],4],[[9,4],9],[9,9],[[1,4],1],[[1,1],7],[[1,7],1],[[10,4],10],[[11,11],11],[[12,4],12],[[4,4],4],[9],[[9,4]],[[11,11]],[[12,4]],[[4,4]],[[]],[[]],[17],[22],[[[33,[14]]]],[[20,[33,[14]]],20],[[17,[33,[14]]],17],[[8,[33,[14]]],8],[[21,[33,[14]]],21],[[22,[33,[14]]],22],0,0,0,0,0,0,0,[20,17],[[13,14]],[1,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,15],[14,15],[[15,14],15],[4,9],[[17,14],38],[11,1],[[1,[29,[2]]],10],[[11,[29,[2]]],10],[4,11],[[],49],[[],49],[[],49],[[],49],[[],49],[15,49],[9,4],[11,4],0,0,[[16,1],1],[[[29,[4]]],16],[4,12],[9,9],[1,1],[11,11],[4,4],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[14,7],[[14,14],7],[[1,1],1],[[1,9],1],[1,14],[10,14],0,[9,51],[[3,9],51],[[13,9],51],[[15,9],51],[[20,9],51],[[5,9],51],[[17,9],51],[[6,9],51],[[8,9],51],[[22,9],51],[[1,9],51],[[10,9],51],[[6,9],6],[[1,[29,[9]]],1],[[6,4],6],[[6,14],6],[[1,[29,[11]]],1],[[15,52],53],0,0,0,0,0,0,0,0,[7,14],0,0,0,0,0,0,[7,14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[14,14,14,14],[[32,[14]]]],[[34,14,14,14,40,14,14,14],14],[[14,14,14],[[32,[14]]]]],"p":[[3,"Rect"],[3,"RoundedRectRadii"],[3,"CircleSegment"],[3,"Vec2"],[3,"Circle"],[3,"Ellipse"],[3,"Insets"],[3,"Line"],[3,"Point"],[3,"RoundedRect"],[3,"Size"],[3,"TranslateScale"],[3,"Arc"],[15,"f64"],[3,"BezPath"],[3,"Affine"],[3,"CubicBez"],[3,"QuadSpline"],[4,"Option"],[4,"PathSeg"],[3,"ConstPoint"],[3,"QuadBez"],[15,"bool"],[4,"PathEl"],[3,"LineIntersection"],[3,"Nearest"],[3,"SvgArc"],[3,"Vec"],[8,"Into"],[4,"Result"],[8,"IntoIterator"],[3,"ArrayVec"],[3,"Range"],[8,"FnMut"],[3,"Formatter"],[6,"Result"],[4,"SvgParseError"],[8,"Iterator"],[15,"str"],[15,"usize"],[3,"MinDistance"],[3,"Segments"],[3,"PathSegIter"],[3,"CubicBezIter"],[3,"QuadBezIter"],[3,"Once"],[3,"Chain"],[3,"Demand"],[3,"String"],[3,"TypeId"],[15,"i32"],[8,"Write"],[6,"Result"],[8,"ParamCurveDeriv"],[8,"Shape"],[8,"ParamCurveArclen"],[8,"ParamCurveExtrema"],[8,"ParamCurveCurvature"],[8,"ParamCurve"],[8,"ParamCurveNearest"],[8,"ParamCurveArea"],[13,"MoveTo"],[13,"LineTo"],[13,"QuadTo"],[13,"CurveTo"],[13,"Line"],[13,"Quad"],[13,"Cubic"],[13,"UnknownCommand"],[8,"FloatExt"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[0,[[]],0],"p":[]},\
"line_wrap":{"doc":"Efficiently insert line endings.","t":[3,8,3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,10,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11],"n":["ByteLineEnding","LineEnding","SliceLineEnding","TwoByteLineEnding","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","crlf","from","from","from","into","into","into","len","len","len","len","lf","line_wrap","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_ending","write_ending","write_ending","write_ending"],"q":["line_wrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A single byte line ending.","Writes line endings.","A byte slice line ending.","A double byte line ending.","","","","","","","Windows-style line ending.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The length of this particular line ending (must be …","","","","Unix-style line ending.","Insert line endings into the input.","","","","","","","","","","","","","Write the line ending into the slice, which starts at the …","","",""],"i":[0,0,0,0,3,1,4,3,1,4,0,3,1,4,3,1,4,8,3,1,4,0,0,3,1,4,3,1,4,3,1,4,3,1,4,8,3,1,4],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[3,2],[1,2],[4,2],[[],3],[[2,2],2],[5,3],[[5,5],1],[[],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[]],[3],[1],[4]],"p":[[3,"TwoByteLineEnding"],[15,"usize"],[3,"ByteLineEnding"],[3,"SliceLineEnding"],[15,"u8"],[4,"Result"],[3,"TypeId"],[8,"LineEnding"]]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["log","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,3,7,1,8,4,6,1,8,4,6,8,7,0,19,4,4,6,6,8,7,11,0,1,3,1,3,19,4,4,6,6,1,3,8,7,15,15,11,11,4,6,1,3,8,7,15,11,4,6,4,4,6,6,4,4,6,6,4,6,8,7,0,4,6,1,3,8,7,15,11,4,6,4,4,6,6,1,3,8,7,1,3,19,0,0,0,4,4,6,6,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,4,6,1,3,8,7,15,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[8,10],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[[8,8],10],[[7,7],10],[[11,11],10],0,[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[]],[[4,13],14],[[4,13],14],[[6,13],14],[[6,13],14],[[1,13],14],[[3,13],14],[[8,13],14],[[7,13],14],[[15,13],14],[[15,13],14],[[11,13],14],[[11,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[4]]]],[5,[[16,[6]]]],[[4,6],10],[[4,4],10],[[6,6],10],[[6,4],10],[[4,4],10],[[4,6],10],[[6,6],10],[[6,4],10],[4],[6],[8],[7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[4,4],10],[[4,6],10],[[6,4],10],[[6,6],10],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[12,[18]]]],[[3,[12,[18]]],3],[1],0,0,[[],19],[[4,4],10],[[4,6],10],[[6,6],10],[[6,4],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[1,[[12,[5]]]],[[3,[12,[5]]],3],[[],3],[[],7],[[4,4],[[12,[9]]]],[[4,6],[[12,[9]]]],[[6,4],[[12,[9]]]],[[6,6],[[12,[9]]]],[[8,8],[[12,[9]]]],[[7,7],[[12,[9]]]],[19,[[16,[15]]]],[19,[[16,[15]]]],[6],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[12,[4]]]],[4,6],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0],"p":[[3,"Record"],[3,"Arguments"],[3,"RecordBuilder"],[4,"Level"],[15,"str"],[4,"LevelFilter"],[3,"MetadataBuilder"],[3,"Metadata"],[4,"Ordering"],[15,"bool"],[3,"ParseLevelError"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"SetLoggerError"],[4,"Result"],[8,"Iterator"],[15,"u32"],[8,"Log"],[3,"TypeId"]]},\
"miniz_oxide":{"doc":"A pure rust replacement for the miniz DEFLATE/zlib …","t":[13,13,13,4,13,13,13,4,4,6,4,13,13,13,13,13,13,13,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,13,13,11,11,11,11,5,5,0,11,11,11,11,11,0,11,11,11,11,13,3,4,3,13,13,13,13,13,13,13,13,13,13,13,13,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,5,13,13,3,13,13,13,13,13,4,11,11,11,11,11,11,0,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,11,3,17,11,11,11,11,5,11,11,0,11,11,11,11,11,11,17,17,17,17,17,12,3,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Block","Buf","Data","DataFormat","ErrNo","Finish","Full","MZError","MZFlush","MZResult","MZStatus","Mem","NeedDict","None","Ok","Param","Partial","Raw","Stream","StreamEnd","StreamResult","Sync","Version","ZLibIgnoreChecksum","Zlib","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_consumed","bytes_written","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deflate","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_window_bits","hash","hash","hash","hash","hash","inflate","into","into","into","into","into","new","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_window_bits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","BestCompression","BestSpeed","CompressionLevel","DefaultCompression","DefaultLevel","NoCompression","UberCompression","borrow","borrow_mut","clone","clone_into","compress_to_vec","compress_to_vec_zlib","core","eq","fmt","from","hash","into","stream","to_owned","try_from","try_into","type_id","BadParam","CallbackFunc","CompressionStrategy","CompressorOxide","Default","Done","Filtered","Finish","Fixed","Full","HuffmanOnly","None","Okay","PutBufFailed","RLE","Sync","TDEFLFlush","TDEFLStatus","adler32","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compress","compress_to_output","create_comp_flags_from_zip_params","data_format","default","deflate_flags","eq","eq","eq","flags","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","into","into","into","into","into","new","new","prev_return_status","put_buf_func","reset","set_compression_level","set_compression_level_raw","set_format_and_level","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","TDEFL_COMPUTE_ADLER32","TDEFL_FILTER_MATCHES","TDEFL_FORCE_ALL_RAW_BLOCKS","TDEFL_FORCE_ALL_STATIC_BLOCKS","TDEFL_GREEDY_PARSING_FLAG","TDEFL_NONDETERMINISTIC_PARSING_FLAG","TDEFL_RLE_MATCHES","TDEFL_WRITE_ZLIB_HEADER","deflate","Adler32Mismatch","BadParam","DecompressError","Done","Failed","FailedCannotMakeProgress","HasMoreOutput","NeedsMoreInput","TINFLStatus","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","core","decompress_slice_iter_to_slice","decompress_to_vec","decompress_to_vec_with_limit","decompress_to_vec_zlib","decompress_to_vec_zlib_with_limit","eq","fmt","fmt","fmt","from","from","from_i32","hash","into","into","output","status","stream","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","DecompressorOxide","TINFL_LZ_DICT_SIZE","adler32","adler32_header","borrow","borrow_mut","decompress","default","from","inflate_flags","init","into","new","try_from","try_into","type_id","TINFL_FLAG_COMPUTE_ADLER32","TINFL_FLAG_HAS_MORE_INPUT","TINFL_FLAG_IGNORE_ADLER32","TINFL_FLAG_PARSE_ZLIB_HEADER","TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","0","FullReset","InflateState","MinReset","ResetPolicy","ZeroReset","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","decompressor","default","from","from","from","from","inflate","into","into","into","into","last_status","new","new_boxed","new_boxed_with_window_bits","reset","reset","reset","reset","reset","reset_as","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["miniz_oxide","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate::core::deflate_flags","","","","","","","","miniz_oxide::deflate::stream","miniz_oxide::inflate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::inflate::core","","","","","","","","","","","","","","","","miniz_oxide::inflate::core::inflate_flags","","","","","miniz_oxide::inflate::stream","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Not implemented.","Buffer-related error.","Error in inflation; see <code>inflate::stream::inflate()</code> for …","How compressed data is wrapped.","Unused","Attempt to flush the remaining data and end the stream.","Same as <code>Sync</code>, but resets the compression dictionary so …","A list of miniz failed status codes.","A list of flush types.","<code>Result</code> alias for all miniz status codes both successful …","A list of miniz successful status codes.","Unused","Unused","Don’t force any flushing. Used when more input data is …","Operation succeeded.","Bad parameters.","Zlib partial flush. Currently treated as <code>Sync</code>.","Raw DEFLATE.","General stream error.","Operation succeeded and end of deflate stream was found.","A structure containg the result of a call to the inflate …","Finish compressing the currently buffered data, and output …","Unused","Zlib wrapped but ignore and don’t compute the adler32 …","Wrapped using the zlib format.","","","","","","","","","","","The number of bytes consumed from the input slice.","The number of bytes written to the output slice.","","","","","","","","","","","This module contains functionality for compression.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","This module contains functionality for decompression.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an MZFlush value from an integer value.","The return status of the call.","","","","","","","","","","","","","","","","","","","","","","Slow/high compression. Do a lot of checks to try to find …","Fast compression. Uses a special compression routine that …","How much processing the compressor should do to compress …","Use the default compression level.","Default compromise between speed and compression.","Don’t do any compression, only output uncompressed …","Even more checks, can be very slow.","","","","","Compress the input data to a vector, using the specified …","Compress the input data to a vector, using the specified …","Streaming compression functionality.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Extra streaming compression functionality.","","","","","Usage error.","Callback function and user used in <code>compress_to_output</code>.","Strategy setting for compression.","Main compression struct.","Don’t use any of the special strategies.","Compression succeeded and the deflate stream was ended.","Only use matches that are at least 5 bytes long.","Try to flush everything and end the deflate stream.","Only use static/fixed blocks. (Blocks using the default …","Same as <code>Sync</code>, but reset the dictionary so that the …","Don’t look for matches, only huffman encode the literals.","Normal operation.","Compression succeeded normally.","Error putting data into output buffer.","Only look for matches with a distance of 1, i.e do …","Try to flush all the current data and output an empty raw …","A list of deflate flush types.","Return status of compression.","Get the adler32 checksum of the currently encoded data.","","","","","","","","","","","","","","","","","Main compression function. Tries to compress as much as …","Main compression function. Callbacks output.","Create a set of compression flags using parameters used by …","Returns whether the compressor is wrapping the data in a …","Initialize the compressor with a level of 4, zlib wrapper …","","","","","Get the raw compressor flags.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>CompressorOxide</code> with the given flags.","","Get the return status of the previous <code>compress</code> call with …","","Reset the state of the compressor, keeping the same …","Set the compression level of the compressor.","Set the compression level of the compressor using an …","Update the compression settings of the compressor.","","","","","","","","","","","","","","","","","","","Should we compute the adler32 checksum.","Only use matches that are at least 6 bytes long.","Force the compressor to only output raw/uncompressed …","Force the compressor to only output static blocks. (Blocks …","Should we use greedy parsing (as opposed to lazy parsing …","Used in miniz to skip zero-initializing hash and dict. We …","Only look for matches with a distance of 0.","Whether to use a zlib wrapper.","Try to compress from input to output with the given …","The decompression went fine, but the adler32 checksum did …","The output buffer is an invalid size; consider the <code>flags</code> …","Struct return when decompress_to_vec functions fail.","Finished decompression without issues.","Failed to decompress due to invalid data.","More input data was expected, but the caller indicated …","There is still pending data that didn’t fit in the …","The decompressor needs more input data to continue …","Return status codes.","","","","","","","Streaming decompression functionality.","Decompress one or more source slices from an iterator into …","Decompress the deflate-encoded data in <code>input</code> to a vector.","Decompress the deflate-encoded data in <code>input</code> to a vector.","Decompress the deflate-encoded data (with a zlib wrapper) …","Decompress the deflate-encoded data (with a zlib wrapper) …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The currently decompressed data if any.","Decompressor status on failure. See TINFLStatus for …","Extra streaming decompression functionality.","","","","","","","","","Main decompression struct.","","Returns the adler32 checksum of the currently decompressed …","Returns the adler32 that was read from the zlib header if …","","","Main decompression function. Keeps decompressing data from …","Create a new tinfl_decompressor with all fields set to 0.","Returns the argument unchanged.","Flags to <code>decompress()</code> to control how inflation works.","Set the current state to <code>Start</code>.","Calls <code>U::from(self)</code>.","Create a new tinfl_decompressor with all fields set to 0.","","","","Calculate the adler32 checksum of the output data even if …","There will be more input that hasn’t been given to the …","Ignore adler32 checksum even if we are inflating a zlib …","Should we try to parse a zlib header?","The output buffer should not wrap around.","","Full reset of the state, including zeroing memory.","A struct that compbines a decompressor with extra data for …","Resets state, without performing expensive ops (e.g. …","Tag that determines reset policy of InflateState","Resets state and zero memory, continuing to use the same …","","","","","","","","","Access the innner decompressor.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to decompress from <code>input</code> to <code>output</code> with the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the status of the last call to <code>inflate</code> with this …","Create a new state.","Create a new state on the heap.","Create a new state using miniz/zlib style window bits …","Performs reset","","","","Reset the decompressor without re-allocating memory, using …","Resets the state according to specified policy.","","","","","","","","","","","",""],"i":[1,3,3,0,3,1,1,0,0,0,0,3,2,1,2,3,1,4,3,2,0,1,3,4,4,1,2,3,4,5,1,2,3,4,5,5,5,1,2,3,4,5,1,2,3,4,5,0,1,2,3,4,5,5,1,2,3,4,5,9,9,1,2,3,4,5,4,1,2,3,4,5,0,1,2,3,4,5,1,5,1,2,3,4,5,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,13,13,0,13,13,13,13,13,13,13,13,0,0,0,13,13,13,13,13,0,13,13,13,13,20,0,0,0,18,20,18,19,18,19,18,19,20,20,18,19,0,0,16,16,35,18,19,20,16,35,18,19,20,18,19,20,18,19,20,0,0,0,16,16,0,18,19,20,16,18,19,20,16,35,18,19,19,20,18,19,20,16,35,18,19,20,16,19,16,35,16,16,16,16,18,19,20,16,35,18,19,20,16,35,18,19,20,16,35,18,19,20,0,0,0,0,0,0,0,0,0,22,22,0,22,22,22,22,22,0,22,25,22,25,22,22,0,0,0,0,0,0,22,22,25,25,22,25,22,22,22,25,25,25,0,22,25,22,25,22,25,22,25,0,0,28,28,28,28,0,28,28,0,28,28,28,28,28,28,0,0,0,0,0,33,0,0,0,0,0,31,32,33,29,31,32,33,29,29,29,31,32,33,29,0,31,32,33,29,29,29,29,29,34,31,32,33,29,29,31,32,33,29,31,32,33,29,31,32,33,29],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[]],[[]],0,[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[5,5],6],[3,5],[[1,7],8],[[2,7],8],[[3,7],8],[[4,7],8],[[5,7],8],[5,9],[5,9],[[]],[[]],[[]],[[]],[[]],[10,4],[1],[2],[3],[4],[5],0,[[]],[[]],[[]],[[]],[[]],[10,[[11,[1,3]]]],0,[[]],[[]],[[]],[[]],[[]],[4,10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,[[]],[[]],[13,13],[[]],[14,[[15,[14]]]],[14,[[15,[14]]]],0,[[13,13],6],[[13,7],8],[[]],[13],[[]],0,[[]],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,18],[19,19],[20,20],[[]],[[]],[[]],[[16,19]],[[16,19,21]],[[10,10,10],17],[16,4],[[],16],0,[[18,18],6],[[19,19],6],[[20,20],6],[16,10],[[18,7],8],[[19,7],8],[[20,7],8],[[]],[[]],[[]],[1,19],[[]],[[]],[18],[19],[20],[[]],[[]],[[]],[[]],[[]],[17,16],[10,[[11,[19,3]]]],[16,20],0,[16],[[16,13]],[[16,14]],[[16,4,14]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,[[16,1],5],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[22,22],[[]],0,[[23,6,6],[[11,[24,22]]]],[[],[[11,[[15,[14]],25]]]],[24,[[11,[[15,[14]],25]]]],[[],[[11,[[15,[14]],25]]]],[24,[[11,[[15,[14]],25]]]],[[22,22],6],[[22,7],8],[[25,7],8],[[25,7],8],[[]],[[]],[10,[[26,[22]]]],[22],[[]],[[]],0,0,0,[[]],[[],27],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,[28,[[26,[17]]]],[28,[[26,[17]]]],[[]],[[]],[[28,24,17]],[[],28],[[]],0,[28],[[]],[[],28],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,28],[[],29],[[]],[[]],[[]],[[]],[[29,1],5],[[]],[[]],[[]],[[]],[29,22],[4,29],[4,[[30,[29]]]],[10,[[30,[29]]]],[29],[[31,29]],[[32,29]],[[33,29]],[[29,4]],[[29,34]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12]],"p":[[4,"MZFlush"],[4,"MZStatus"],[4,"MZError"],[4,"DataFormat"],[3,"StreamResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"MZResult"],[15,"i32"],[4,"Result"],[3,"TypeId"],[4,"CompressionLevel"],[15,"u8"],[3,"Vec"],[3,"CompressorOxide"],[15,"u32"],[4,"CompressionStrategy"],[4,"TDEFLFlush"],[4,"TDEFLStatus"],[8,"FnMut"],[4,"TINFLStatus"],[8,"Iterator"],[15,"usize"],[3,"DecompressError"],[4,"Option"],[3,"String"],[3,"DecompressorOxide"],[3,"InflateState"],[3,"Box"],[3,"MinReset"],[3,"ZeroReset"],[3,"FullReset"],[8,"ResetPolicy"],[3,"CallbackFunc"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,11,12,12],"n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,11,5,11,5,0,4,4,5,5,0,2,0,2,0,2,0,2,2,5,2,2,5,11,5,0,2,5,0,2,11,5,11,2,2,2,0,2,0,2,0,11,11,2,0,4,2,0,4,4,5,11,5,11,5,11,5,5,5],"f":[0,0,0,0,0,[[1,1],1],[[]],[[1,1],1],[[]],[[[0,[2,3]],[0,[2,3]]],[[0,[2,3]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[]],[[[5,[3]]],[[5,[3]]]],[[]],[[2,2],2],[[]],[[2,2],2],[[]],[[2,2]],[[]],[[2,2]],[[]],[[],6],[[[5,[7]],5],6],[[],5],[[]],[[[5,[8]],9],10],[[]],[[]],[[2,2],2],[[]],0,[[2,2]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[2,2],2],[[]],[[2,2],2],[[]],[[],[[0,[2,3]]]],[[],11],[11,12],[[]],[[4,13],4],[13],[[]],[4,4],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0],"p":[[8,"Average"],[8,"Integer"],[8,"Clone"],[8,"Roots"],[3,"ExtendedGcd"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"IterBinomial"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"num_rational":{"doc":"Rational numbers","tn":["ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","denom","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rationald":["","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","","","","","","","","","","","","","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,13,13,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,13,4],"f":[0,0,0,0,0,[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2,3]]]],4],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[4,4],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[0,[6,7]]],[[9,[[4,[[0,[2,3,8,7,1]]]]]]]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,10,11]]]],4],[[9,[[4,[[0,[1,2,10,11]]]]]]]],[[4,4],[[9,[4]]]],[[4,4],[[9,[4]]]],[[[4,[[0,[1,2,10,12]]]],4],[[9,[[4,[[0,[1,2,10,12]]]]]]]],[[[4,[1]]],[[4,[1]]]],[13,13],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],14],[[],[[4,[[0,[1,2]]]]]],[4],[[4,4],[[4,[[0,[1,2]]]]]],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[[4,4],4],[4,4],[[4,4],4],[4,4],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],15],[[13,13],15],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[16,1,2]]]],17],18],[[[4,[[0,[19,1,2]]]],17],18],[[[4,[[0,[20,1,2]]]],17],18],[[[4,[[0,[21,1,2]]]],17],18],[[[4,[[0,[22,1,2]]]],17],18],[[[4,[[0,[23,1,2]]]],17],18],[[[4,[[0,[24,1,2]]]],17],18],[[[4,[25]],17],18],[[13,17],18],[[13,17],18],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[]],[[],4],[[],4],[[]],[26,[[9,[[4,[27]]]]]],[26,[[9,[[4,[28]]]]]],[26,[[9,[[4,[29]]]]]],[26,[[9,[[4,[30]]]]]],[26,[[9,[[4,[31]]]]]],[26,[[9,[[4,[32]]]]]],[26,[[9,[[4,[33]]]]]],[26,[[9,[[4,[34]]]]]],[26,[[9,[[4,[35]]]]]],[26,[[9,[[4,[36]]]]]],[26,[[9,[[4,[37]]]]]],[26,[[9,[[4,[38]]]]]],[39,[[9,[[4,[28]]]]]],[39,[[9,[[4,[33]]]]]],[39,[[9,[[4,[37]]]]]],[39,[[9,[[4,[34]]]]]],[39,[[9,[[4,[38]]]]]],[39,[[9,[[4,[27]]]]]],[39,[[9,[[4,[30]]]]]],[39,[[9,[[4,[31]]]]]],[39,[[9,[[4,[36]]]]]],[39,[[9,[[4,[29]]]]]],[39,[[9,[[4,[32]]]]]],[39,[[9,[[4,[35]]]]]],[31,[[9,[[4,[38]]]]]],[31,[[9,[[4,[31]]]]]],[31,[[9,[[4,[27]]]]]],[31,[[9,[[4,[30]]]]]],[31,[[9,[[4,[29]]]]]],[31,[[9,[[4,[36]]]]]],[31,[[9,[[4,[37]]]]]],[31,[[9,[[4,[34]]]]]],[31,[[9,[[4,[33]]]]]],[31,[[9,[[4,[35]]]]]],[31,[[9,[[4,[28]]]]]],[31,[[9,[[4,[32]]]]]],[35,[[9,[[4,[38]]]]]],[35,[[9,[[4,[31]]]]]],[35,[[9,[[4,[28]]]]]],[35,[[9,[[4,[36]]]]]],[35,[[9,[[4,[30]]]]]],[35,[[9,[[4,[33]]]]]],[35,[[9,[[4,[27]]]]]],[35,[[9,[[4,[37]]]]]],[35,[[9,[[4,[29]]]]]],[35,[[9,[[4,[32]]]]]],[35,[[9,[[4,[35]]]]]],[35,[[9,[[4,[34]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[40,[[42,[[4,[[0,[41,1,2]]]],13]]]],[[40,27],[[42,[[4,[[0,[1,2]]]],13]]]],[30,[[9,[[4,[34]]]]]],[30,[[9,[[4,[30]]]]]],[30,[[9,[[4,[38]]]]]],[30,[[9,[[4,[33]]]]]],[30,[[9,[[4,[29]]]]]],[30,[[9,[[4,[27]]]]]],[30,[[9,[[4,[35]]]]]],[30,[[9,[[4,[37]]]]]],[30,[[9,[[4,[28]]]]]],[30,[[9,[[4,[32]]]]]],[30,[[9,[[4,[36]]]]]],[30,[[9,[[4,[31]]]]]],[33,[[9,[[4,[31]]]]]],[33,[[9,[[4,[38]]]]]],[33,[[9,[[4,[30]]]]]],[33,[[9,[[4,[32]]]]]],[33,[[9,[[4,[34]]]]]],[33,[[9,[[4,[36]]]]]],[33,[[9,[[4,[37]]]]]],[33,[[9,[[4,[28]]]]]],[33,[[9,[[4,[27]]]]]],[33,[[9,[[4,[33]]]]]],[33,[[9,[[4,[35]]]]]],[33,[[9,[[4,[29]]]]]],[[[4,[[0,[1,2,43]]]]]],[[]],[4],[[]],[4,4],[4,4],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[4,[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[4,4],[[4,4],4],[4,4],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]]]],[4,4],[4,4],[[[0,[1,2]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[],4],[4],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[9,[14]]]],[[[4,[[0,[1,2,[44,[33]]]]]],35],[[4,[[0,[1,2,[44,[33]]]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[34]]]]]],34],[[4,[[0,[1,2,[44,[34]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[34]]]]]],34],[[4,[[0,[1,2,[44,[34]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[37]]]]]],37],[[4,[[0,[1,2,[44,[37]]]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[37]]]]]],37],[[4,[[0,[1,2,[44,[37]]]]]]]],[[[4,[[0,[1,2,[44,[27]]]]]],27],[[4,[[0,[1,2,[44,[27]]]]]]]],[[4,27],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[27]]]]]],27],[[4,[[0,[1,2,[44,[27]]]]]]]],[[4,27],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[33]]]]]],33],[[4,[[0,[1,2,[44,[33]]]]]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[33]]]]]],33],[[4,[[0,[1,2,[44,[33]]]]]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],30],[[4,[[0,[1,2,[44,[30]]]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],30],[[4,[[0,[1,2,[44,[30]]]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[28]]]]]],28],[[4,[[0,[1,2,[44,[28]]]]]]]],[[4,28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[28]]]]]],28],[[4,[[0,[1,2,[44,[28]]]]]]]],[[4,28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[34]]]]]],29],[[4,[[0,[1,2,[44,[34]]]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[34]]]]]],29],[[4,[[0,[1,2,[44,[34]]]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[37]]]]]],36],[[4,[[0,[1,2,[44,[37]]]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[37]]]]]],36],[[4,[[0,[1,2,[44,[37]]]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[28]]]]]],32],[[4,[[0,[1,2,[44,[28]]]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[28]]]]]],32],[[4,[[0,[1,2,[44,[28]]]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],31],[[4,[[0,[1,2,[44,[30]]]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],31],[[4,[[0,[1,2,[44,[30]]]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[33]]]]]],35],[[4,[[0,[1,2,[44,[33]]]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[27]]]]]],38],[[4,[[0,[1,2,[44,[27]]]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[27]]]]]],38],[[4,[[0,[1,2,[44,[27]]]]]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,4],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[4,[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[[4,4],4],[4,4],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[[[4,[28]]],[[9,[39]]]],[[[4,[32]]],[[9,[39]]]],[[[4,[35]]],[[9,[39]]]],[[[4,[33]]],[[9,[39]]]],[[[4,[38]]],[[9,[39]]]],[[[4,[27]]],[[9,[39]]]],[[[4,[36]]],[[9,[39]]]],[[[4,[37]]],[[9,[39]]]],[[[4,[29]]],[[9,[39]]]],[[[4,[34]]],[[9,[39]]]],[[[4,[38]]],[[9,[31]]]],[[[4,[35]]],[[9,[31]]]],[[[4,[32]]],[[9,[31]]]],[[[4,[27]]],[[9,[31]]]],[[[4,[36]]],[[9,[31]]]],[[[4,[34]]],[[9,[31]]]],[[[4,[28]]],[[9,[31]]]],[[[4,[33]]],[[9,[31]]]],[[[4,[37]]],[[9,[31]]]],[[[4,[29]]],[[9,[31]]]],[[[4,[27]]],[[9,[35]]]],[[[4,[37]]],[[9,[35]]]],[[[4,[29]]],[[9,[35]]]],[[[4,[35]]],[[9,[35]]]],[[[4,[28]]],[[9,[35]]]],[[[4,[33]]],[[9,[35]]]],[[[4,[36]]],[[9,[35]]]],[[[4,[34]]],[[9,[35]]]],[[[4,[38]]],[[9,[35]]]],[[[4,[32]]],[[9,[35]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[],45],[[],45],[[[4,[37]]],[[9,[30]]]],[[[4,[36]]],[[9,[30]]]],[[[4,[32]]],[[9,[30]]]],[[[4,[28]]],[[9,[30]]]],[[[4,[34]]],[[9,[30]]]],[[[4,[29]]],[[9,[30]]]],[[[4,[38]]],[[9,[30]]]],[[[4,[35]]],[[9,[30]]]],[[[4,[27]]],[[9,[30]]]],[[[4,[33]]],[[9,[30]]]],[[[4,[33]]],[[9,[33]]]],[[[4,[32]]],[[9,[33]]]],[[[4,[37]]],[[9,[33]]]],[[[4,[35]]],[[9,[33]]]],[[[4,[36]]],[[9,[33]]]],[[[4,[29]]],[[9,[33]]]],[[[4,[38]]],[[9,[33]]]],[[[4,[28]]],[[9,[33]]]],[[[4,[27]]],[[9,[33]]]],[[[4,[34]]],[[9,[33]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],42],[[],42],[[],42],[[],42],[[],46],[[],46],[[],[[4,[[0,[1,2]]]]]]],"p":[[8,"Clone"],[8,"Integer"],[8,"Signed"],[3,"Ratio"],[8,"NumAssign"],[8,"FloatCore"],[8,"NumCast"],[8,"Bounded"],[4,"Option"],[8,"CheckedMul"],[8,"CheckedAdd"],[8,"CheckedSub"],[3,"ParseRatioError"],[4,"Ordering"],[15,"bool"],[8,"UpperHex"],[3,"Formatter"],[6,"Result"],[8,"LowerExp"],[8,"LowerHex"],[8,"Binary"],[8,"Octal"],[8,"Display"],[8,"UpperExp"],[8,"Debug"],[15,"f32"],[15,"u32"],[15,"usize"],[15,"i8"],[15,"u128"],[15,"i128"],[15,"isize"],[15,"u64"],[15,"u8"],[15,"i64"],[15,"i16"],[15,"u16"],[15,"i32"],[15,"f64"],[15,"str"],[8,"FromStr"],[4,"Result"],[8,"Hash"],[8,"Pow"],[3,"String"],[3,"TypeId"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[2,2,2,2,2,2,2,2,2,2,2,13,2,2,2,4,2,16,2,13,2,2,8,8,8,8,2,8,8,2,3,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,0,0,2,2,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,2,0,0,2,0,0,2,11,11,11,11,11,11,11,2,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","","","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::euclid","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,35,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,35,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,36,37,36,38,0,0,0,0,39,0,11,40,40,40,40,40,40,40,40,40,40,40,40,40,40,13,13,13,13,13,13,13,13,13,13,13,13,13,13,41,41,41,41,41,41,41,41,41,41,0,0,0,41,41,41,41,41,41,41,41,41,42,43,42,42,42,42,42,42,42,42,42,42,43,43,42,42,42,42,43,42,42,42,42,42,43,42,43,42,43,42,43,42,42,43,42,43,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,43,42,42,43,43,42,43,42,42,43,42,43,42,43,42,42,42,43,42,43,42,43,42,43,42,42,42,42,42,42,43,42,43,42,42,43,0,0,29,30,0,29,29,30,0,30,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,32,47,48,49,50,51,0,0,52,52,53,53,0,54,54,0,0,55,55,56,0,0,0,57,58,59,0,0,0,0,60,61,62,60,63,0,0,0,0,0,0,64,65,66,67,68,69,70,0,0,0,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,34,0,34,34,34,0,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],28],[[],28],[[],29],[[]],[[]],[[]],[[],30],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[31,29,32]],26],[[12,[[0,[31,29,32]]]]]],[[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]],26],[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,[33,[[0,[31,29,33]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[34,34],[[]],[[34,34],34],[[]],[[],28],[[],28],[34,34],[[]]],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[4,"FpCategory"],[15,"bool"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"plist":{"doc":"Plist","t":[13,13,13,3,13,2,13,3,3,13,13,13,3,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,5,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Array","Boolean","Data","Date","Date","Dictionary","Dictionary","Error","Integer","Integer","Real","String","Uid","Uid","Value","XmlWriteOptions","as_array","as_array_mut","as_boolean","as_data","as_date","as_dictionary","as_dictionary_mut","as_io","as_real","as_signed","as_signed_integer","as_string","as_uid","as_unsigned","as_unsigned_integer","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","deserialize","deserialize","deserialize","deserialize","dictionary","eq","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_file","from_file","from_reader","from_reader","from_reader_xml","from_reader_xml","get","hash","hash","hash","indent_string","into","into","into","into","into","into","into","into_array","into_data","into_dictionary","into_io","into_string","into_uid","is_eof","is_io","new","partial_cmp","provide","serialize","serialize","serialize","serialize","source","to_file_binary","to_file_binary","to_file_xml","to_file_xml","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_writer_binary","to_writer_binary","to_writer_xml","to_writer_xml","to_writer_xml_with_options","to_writer_xml_with_options","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","Dictionary","IntoIter","Iter","IterMut","Keys","Values","ValuesMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","contains_key","default","deserialize","eq","extend","fmt","from","from","from","from","from","from","from","from_iter","get","get_mut","index","index_mut","insert","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","remove","retain","serde_impls","serialize","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_keys","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut"],"q":["plistplist::Value","","","","","","","","","plist::dictionary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","A UTC timestamp used for serialization to and from the …","","","","This type represents all possible errors that can occur …","An integer that can be represented by either an <code>i64</code> or a …","","","","A plist <code>uid</code> value. These are found exclusively in plists …","","Represents any plist value.","Options for customizing serialization of XML plists.","If the <code>Value</code> is an Array, returns the associated <code>Vec</code>.","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated <code>bool</code>.","If the <code>Value</code> is a Data, returns the associated <code>Vec</code>.","If the <code>Value</code> is a Date, returns the associated <code>Date</code>.","If the <code>Value</code> is a Dictionary, returns the associated …","If the <code>Value</code> is a Dictionary, returns the associated …","Returns the underlying error if it was caused by a failure …","If the <code>Value</code> is a Real, returns the associated <code>f64</code>.","Returns the value as an <code>i64</code> if it can be represented by …","If the <code>Value</code> is a signed Integer, returns the associated …","If the <code>Value</code> is a String, returns the associated <code>str</code>.","If the <code>Value</code> is a Uid, returns the associated <code>Uid</code>.","Returns the value as a <code>u64</code> if it can be represented by …","If the <code>Value</code> is an unsigned Integer, returns the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A map of String to plist::Value.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Deserializes an instance of type <code>T</code> from a byte slice.","Deserializes an instance of type <code>T</code> from a plist file of …","Reads a <code>Value</code> from a plist file of any encoding.","Deserializes an instance of type <code>T</code> from a seekable byte …","Reads a <code>Value</code> from a seekable byte stream containing a …","Deserializes an instance of type <code>T</code> from a byte stream …","Reads a <code>Value</code> from a seekable byte stream containing an …","Returns the value as a <code>u64</code>.","","","","Specify the sequence of characters used for indentation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the <code>Value</code> is a Array, returns the underlying <code>Vec</code>.","If the <code>Value</code> is a Data, returns the underlying <code>Vec</code>.","If the <code>Value</code> is a Dictionary, returns the associated …","Returns the underlying error if it was caused by a failure …","If the <code>Value</code> is a String, returns the underlying <code>String</code>.","If the <code>Value</code> is a Uid, returns the underlying <code>Uid</code>.","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Creates a new <code>Uid</code> containing the given value.","","","","","","","","Serializes the given data structure to a file as a binary …","Serializes a <code>Value</code> to a file as a binary encoded plist.","Serializes the given data structure to a file as an XML …","Serializes a <code>Value</code> to a file as an XML encoded plist.","","","","","","","","Serializes the given data structure to a byte stream as a …","Serializes a <code>Value</code> to a byte stream as a binary encoded …","Serializes the given data structure to a byte stream as an …","Serializes a <code>Value</code> to a byte stream as an XML encoded …","Serializes to a byte stream as an XML encoded plist, using …","Serializes a <code>Value</code> to a stream, using custom …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a plist dictionary type.","An owning iterator over a plist::Dictionary’s entries.","An iterator over a plist::Dictionary’s entries.","A mutable iterator over a plist::Dictionary’s entries.","An iterator over a plist::Dictionary’s keys.","An iterator over a plist::Dictionary’s values.","A mutable iterator over a plist::Dictionary’s values.","","","","","","","","","","","","","","","Clears the dictionary, removing all values.","","","Returns true if the dictionary contains a value for the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value corresponding to the key.","Returns a mutable reference to the value corresponding to …","","","Inserts a key-value pair into the dictionary.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns true if the dictionary contains no elements.","Gets an iterator over the entries of the dictionary.","Gets a mutable iterator over the entries of the dictionary.","Gets an iterator over the keys of the dictionary.","Returns the number of elements in the dictionary.","","","","","","","Makes a new empty <code>Dictionary</code>.","","","","","","","Removes a key from the dictionary, returning the value at …","Scan through each key-value pair in the map and keep those …","","","","","","","","","Sort the dictionary keys.","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the dictionary.","Gets an iterator over mutable values of the dictionary."],"i":[1,1,1,0,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,1,1,1,1,7,1,10,1,1,1,10,1,15,5,7,10,13,1,15,5,7,10,13,1,15,5,10,13,1,15,5,10,13,1,10,15,5,10,13,1,0,5,10,13,1,5,10,13,15,5,7,7,10,10,13,1,15,5,5,7,10,10,10,10,10,10,10,10,10,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,13,5,10,13,15,15,5,5,7,10,13,1,1,1,1,7,1,1,7,7,13,10,7,5,10,13,1,7,0,1,0,1,15,5,10,13,1,7,10,0,1,0,1,0,1,15,5,7,10,13,1,15,5,7,10,13,1,15,5,7,10,13,1,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,6,42,43,46,44,47,48,6,42,43,46,44,47,48,6,6,6,6,6,6,6,6,6,6,42,43,46,44,47,48,6,6,6,6,6,6,6,42,43,46,44,47,48,6,6,6,42,43,46,44,47,48,6,6,6,6,6,42,43,46,44,47,48,6,42,43,46,44,47,48,6,6,0,6,42,43,46,44,47,48,6,6,6,42,43,46,44,47,48,6,42,43,46,44,47,48,6,42,43,46,44,47,48,6,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[1,[[3,[2]]]],[1,[[3,[4]]]],[1,3],[1,[[3,[5]]]],[1,[[3,[6]]]],[1,[[3,[6]]]],[7,[[3,[8]]]],[1,[[3,[9]]]],[10,[[3,[11]]]],[1,[[3,[11]]]],[1,[[3,[12]]]],[1,[[3,[13]]]],[10,[[3,[14]]]],[1,[[3,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[5,5],[10,10],[13,13],[1,1],[[]],[[]],[[]],[[]],[[]],[[10,10],16],[[],15],[[],[[17,[5]]]],[[],[[17,[10]]]],[[],[[17,[13]]]],[[],[[17,[1]]]],0,[[5,5],4],[[10,10],4],[[13,13],4],[[1,1],4],[[],4],[[],4],[[],4],[[15,18],19],[[5,18],[[17,[20]]]],[[7,18],19],[[7,18],19],[[10,18],19],[[10,18],19],[[13,18],[[17,[20]]]],[[1,18],19],[[]],[[]],[21,5],[[]],[22,10],[23,10],[[]],[24,10],[25,10],[26,10],[14,10],[27,10],[11,10],[[]],[26,1],[28,1],[5,1],[4,1],[[]],[4,1],[6,1],[[[2,[1]]],1],[9,1],[28,1],[11,1],[12,1],[29,1],[24,1],[27,1],[22,1],[14,1],[26,1],[25,1],[23,1],[11,1],[23,1],[9,1],[24,1],[27,1],[22,1],[14,1],[5,1],[25,1],[[],[[17,[30,7]]]],[[[32,[31]]],[[17,[30,7]]]],[[[32,[31]]],[[17,[1,7]]]],[[[0,[33,34]]],[[17,[30,7]]]],[[[0,[33,34]]],[[17,[1,7]]]],[33,[[17,[30,7]]]],[33,[[17,[1,7]]]],[13,14],[5],[10],[13],[[15,[36,[[35,[12]]]]],15],[[]],[[]],[5,21],[[]],[[]],[[]],[[]],[1,[[3,[[2,[1]]]]]],[1,[[3,[[2,[24]]]]]],[1,[[3,[6]]]],[7,[[17,[8,7]]]],[1,[[3,[29]]]],[1,[[3,[13]]]],[7,4],[7,4],[14,13],[[10,10],[[3,[16]]]],[37],[5,17],[10,17],[13,17],[1,17],[7,[[3,[38]]]],[[[32,[31]]],[[17,[7]]]],[[1,[32,[31]]],[[17,[7]]]],[[[32,[31]]],[[17,[7]]]],[[1,[32,[31]]],[[17,[7]]]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[39,[[17,[7]]]],[[1,39],[[17,[7]]]],[39,[[17,[7]]]],[[1,39],[[17,[7]]]],[[39,15],[[17,[7]]]],[[1,39,15],[[17,[7]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[6,6],[[]],[[6,12],4],[[],6],[[],[[17,[6]]]],[[6,6],4],[6],[[6,18],[[17,[20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,6],[[6,12],[[3,[1]]]],[[6,12],[[3,[1]]]],[[6,12],1],[[6,12],1],[[6,29,1],[[3,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[[]],[[]],[[]],[[]],[[]],[[]],[6,4],[6,42],[6,43],[6,44],[6,45],[42,45],[43,45],[46,45],[44,45],[47,45],[48,45],[[],6],[42,3],[43,3],[46,3],[44,3],[47,3],[48,3],[[6,12],[[3,[1]]]],[6],0,[6,17],[42],[43],[46],[44],[47],[48],[6],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[6,47],[6,48]],"p":[[4,"Value"],[3,"Vec"],[4,"Option"],[15,"bool"],[3,"Date"],[3,"Dictionary"],[3,"Error"],[3,"Error"],[15,"f64"],[3,"Integer"],[15,"i64"],[15,"str"],[3,"Uid"],[15,"u64"],[3,"XmlWriteOptions"],[4,"Ordering"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"SystemTime"],[15,"u32"],[15,"i32"],[15,"u8"],[15,"i16"],[15,"i8"],[15,"u16"],[15,"f32"],[3,"String"],[8,"DeserializeOwned"],[3,"Path"],[8,"AsRef"],[8,"Read"],[8,"Seek"],[4,"Cow"],[8,"Into"],[3,"Demand"],[8,"Error"],[8,"Write"],[3,"TypeId"],[8,"IntoIterator"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[15,"usize"],[3,"IntoIter"],[3,"Values"],[3,"ValuesMut"],[13,"Array"],[13,"Dictionary"],[13,"Boolean"],[13,"Data"],[13,"Date"],[13,"Real"],[13,"Integer"],[13,"String"],[13,"Uid"]]},\
"png":{"doc":"PNG encoder and decoder","t":[13,13,4,3,13,13,13,13,4,4,13,13,4,4,4,3,4,13,4,18,13,3,4,13,4,13,13,13,3,13,13,13,13,13,18,13,13,13,13,3,13,13,3,13,13,13,13,13,13,13,13,3,13,13,13,13,3,13,13,3,13,13,3,13,13,13,13,18,13,3,13,13,3,4,3,3,13,3,13,4,13,13,3,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,12,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,17,17,17,17,17,17,11,11,17,11,11,11,17,17,11,11,17,11,17,17,11,5,5,17,5,17,5,17,17,17,11,11,11,11,17,17,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11],"n":["AbsoluteColorimetric","Adaptive","AdaptiveFilterType","AnimationControl","AnimationControl","Avg","Background","Best","BitDepth","BlendOp","ChunkBegin","ChunkComplete","ColorType","Compression","Decoded","Decoder","DecodingError","Default","DisposeOp","EXPAND","Eight","Encoder","EncodingError","Fast","FilterType","Format","Format","Four","FrameControl","FrameControl","Grayscale","GrayscaleAlpha","Header","Huffman","IDENTITY","ImageData","ImageDataFlushed","ImageEnd","Indexed","Info","IoError","IoError","Limits","LimitsExceeded","LimitsExceeded","Meter","NoFilter","NonAdaptive","None","Nothing","One","OutputInfo","Over","Paeth","Parameter","Parameter","ParameterError","PartialChunk","Perceptual","PixelDimensions","PixelDimensions","Previous","Reader","RelativeColorimetric","Rgb","Rgba","Rle","STRIP_16","Saturation","ScaledFloat","Sixteen","Source","SourceChromaticities","SrgbRenderingIntent","StreamWriter","StreamingDecoder","Sub","Transformations","Two","Unit","Unspecified","Up","Writer","add_itxt_chunk","add_text_chunk","add_ztxt_chunk","all","animation_control","animation_control","bit_depth","bit_depth","bitand","bitand_assign","bitor","bitor_assign","bits","bits_per_pixel","bitxor","bitxor_assign","blend_op","blue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_size","bytes","bytes_per_pixel","cause","cause","chrm_chunk","chunk","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color_type","color_type","complement","compressed_latin1_text","compression","contains","default","default","default","default","default","default","default","default","delay_den","delay_num","difference","dispose_op","drop","drop","empty","encode","encode","encode","encode","encode","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exact","extend","finish","finish","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_control","frame_control","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_scaled","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","gama_chunk","green","hash","height","height","height","icc_profile","in_range","inc_seq_num","info","info","insert","interlaced","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_scaled","into_stream_writer","into_stream_writer_with_size","into_value","is_all","is_animated","is_empty","line_size","new","new","new","new","new","new_with_limits","next_frame","next_interlaced_row","next_row","normalize_to_color8","not","num_frames","num_plays","output_buffer_size","output_color_type","output_line_size","palette","partial_cmp","pixel_dims","provide","provide","raw_bytes","raw_row_length","raw_row_length_from_width","read_header_info","read_info","red","remove","reset","reset_frame_dimension","reset_frame_dimension","reset_frame_position","reset_frame_position","samples","sequence_number","set","set_adaptive_filter","set_adaptive_filter","set_adaptive_filter","set_animated","set_blend_op","set_blend_op","set_blend_op","set_color","set_compression","set_depth","set_dispose_op","set_dispose_op","set_dispose_op","set_filter","set_filter","set_filter","set_frame_delay","set_frame_delay","set_frame_delay","set_frame_dimension","set_frame_dimension","set_frame_position","set_frame_position","set_ignore_text_chunk","set_ignore_text_chunk","set_limits","set_palette","set_sep_def_img","set_seq_num","set_source_chromaticities","set_source_gamma","set_srgb","set_transformations","set_trns","size","source_chromaticities","source_gamma","srgb","stream_writer","stream_writer_with_size","sub","sub_assign","symmetric_difference","text_metadata","to_be_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","toggle","trns","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_latin1_text","union","unit","update","utf8_text","validate_sequence","white","width","width","width","with_size","write","write_chunk","write_header","write_image_data","write_text_chunk","x_offset","xppu","y_offset","yppu","0","0","0","0","0","0","0","1","1","1","2","3","4","0","0","0","0","0","0","0","ChunkType","IDAT","IEND","IHDR","PLTE","acTL","bKGD","borrow","borrow_mut","cHRM","clone","clone_into","eq","fcTL","fdAT","fmt","from","gAMA","hash","iCCP","iTXt","into","is_critical","is_private","pHYs","reserved_set","sRGB","safe_to_copy","tEXt","tIME","tRNS","to_owned","try_from","try_into","type_id","zTXt","DECOMPRESSION_LIMIT","EncodableTextChunk","ITXtChunk","TEXtChunk","ZTXtChunk","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compress_text","compress_text","compressed","decompress_text","decompress_text","decompress_text_with_limit","decompress_text_with_limit","encode","encode","encode","encode","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_text","get_text","into","into","into","keyword","keyword","keyword","language_tag","new","new","new","text","to_owned","to_owned","to_owned","translated_keyword","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["pngpng::Decoded","","","","","","","","","","","","","png::DecodingError","","","png::EncodingError","","","png::chunk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","png::text_metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["For images requiring preservation of absolute colorimetry, …","","The filtering method for preprocessing scanline data …","Animation control information","","","Clear buffer with the background color.","Higher compression level","Bit depth of the PNG file. Specifies the number of bits …","How pixels are written into the buffer.","","","Describes how a pixel is encoded.","The type and strength of applied compression.","Result of the decoding process","PNG Decoder","Any kind of error during PNG decoding.","Default level","How to reset buffer of an animated png (APNG) at the end …","Expand paletted images to RGB; expand grayscale images of …","","PNG Encoder.","","Fast minimal compression","The byte level filter applied to scanlines to prepare them …","The input image was not a valid PNG.","","","Frame control information","","1 grayscale sample.","1 grayscale sample, then 1 alpha sample.","","","No transformation","Decoded raw image data.","The last of a consecutive chunk of IDAT was done. This is …","","1 sample for the palette index.","PNG info struct","An error in IO of the underlying reader.","","Limits on the resources the <code>Decoder</code> is allowed too use","The image would have required exceeding the limits …","","","","","Leave the buffer unchanged.","Nothing decoded yet","","Output info.","The new pixels are blended into the current state based on …","","An interface was used incorrectly.","","","","For images preferring good adaptation to the output device …","Pixel dimensions information","","Reset the buffer to the state before the current frame.","PNG reader (mostly high-level interface)","For images requiring colour appearance matching (relative …","1 red sample, 1 green sample, 1 blue sample.","1 red sample, 1 green sample, 1 blue sample, and finally, …","","Strip 16-bit samples to 8 bits","For images preferring preservation of saturation at the …","An unsigned integer scaled version of a floating point …","","Pixels overwrite the value at their position.","Chromaticities of the color space primaries","The rendering intent for an sRGB image.","Streaming PNG writer","PNG StreamingDecoder (low-level interface)","","Output transformations","","Physical unit of the pixel dimensions","","","PNG writer","Convenience function to add iTXt chunks to <code>Info</code> struct","Convenience function to add tEXt chunks to <code>Info</code> struct","Convenience function to add zTXt chunks to <code>Info</code> struct","Returns the set containing all flags.","Returns the frame control information of the image.","","","The chosen output bit depth.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the number of bits per pixel.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Type of frame area rendering for this frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the size needed to hold a decoded frame If the …","maximum number of bytes the decoder is allowed to …","Returns the number of bytes per pixel.","","","The contents of the image’s <code>cHRM</code> chunk, if present. …","Chunk types and functions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","How colors are stored in the image.","The chosen output color type.","Returns the complement of this set of flags.","zTXt field","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","Frame delay fraction denominator","Frame delay fraction numerator","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Type of frame area disposal to be done after rendering …","","","Returns an empty set of flags.","","","","","Encode this header to the writer.","","","","","","","","","","","","","Gets whether the value can be exactly converted in …","","Consume the stream writer with validation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the frame control information of the current frame","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Fully accurate construction from a value scaled as per …","u8 -&gt; Self. Temporary solution until Rust provides a …","u8 -&gt; Self. Temporary solution until Rust provides a …","u8 -&gt; Self. Temporary solution until Rust provides a …","u8 -&gt; Self. Using enum_primitive or transmute is probably …","u8 -&gt; Self. Using enum_primitive or transmute is probably …","u8 -&gt; Self. Temporary solution until Rust provides a …","The contents of the image’s gAMA chunk, if present. …","","","Height of the following frame","","The pixel height of this frame.","The ICC profile for the image.","Gets whether the value is within the clamped range of this …","","Provides access to the inner <code>info</code> field","Get information on the image.","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the accurate encoded value.","Turn this into a stream writer for image data.","Turn this into a stream writer with custom buffer size.","Get the unscaled value as a floating point.","Returns <code>true</code> if all flags are currently set.","Returns true if the image is an APNG image.","Returns <code>true</code> if no flags are currently stored.","The byte count of each scan line in the image.","Creates a new StreamingDecoder","Create a new decoder configuration with default limits.","","Slightly inaccurate scaling and quantization. Clamps the …","","Create a new decoder configuration with custom limits.","Decodes the next frame into <code>buf</code>.","Returns the next processed row of the image","Returns the next processed row of the image","Transform every input to 8bit grayscale or color.","Returns the complement of this set of flags.","Number of frames","Number of times to loop this APNG.  0 indicates infinite …","Returns the number of bytes required to hold a …","Returns the color type and the number of bits per sample …","Returns the number of bytes required to hold a …","The image’s <code>PLTE</code> chunk, if present; contains the RGB …","","","","","Returns the number of bytes needed for one deinterlaced …","Returns the number of bytes needed for one deinterlaced …","Returns the number of bytes needed for one deinterlaced …","Read the PNG header and return the information contained …","Reads all meta data until the first IDAT chunk","","Removes the specified flags in-place.","Resets the StreamingDecoder","Set the frame dimension to occupy all the image, starting …","Set the frame dimension to occupy all the image, starting …","Set the frame position to (0, 0).","Set the frame position to (0, 0).","Returns the number of samples used per pixel encoded in …","Sequence number of the animation chunk, starting from 0","Inserts or removes the specified flags depending on the …","Set the adaptive filter type.","Set the adaptive filter type for the following frames.","Set the adaptive filter type for the next frame.","Specify that the image is animated.","Set the blend operation for every frame.","Set the blend operation for the following frames.","Set the blend operation for the following frames.","Set the color of the encoded image.","Set compression parameters.","Set the indicated depth of the image data.","Set the dispose operation for every frame.","Set the dispose operation for the following frames.","Set the dispose operation for the following frames.","Set the used filter type.","Set the used filter type for the following frames.","Set the used filter type for the next frame.","Set the fraction of time every frame is going to be …","Set the fraction of time the following frames are going to …","Set the fraction of time the following frames are going to …","Set the dimension of the following frames.","Set the dimension of the following frames.","Set the position of the following frames.","Set the position of the following frames.","","Set the decoder to ignore all text chunks while parsing.","Limit resource usage.","Sets the raw byte contents of the PLTE chunk. This method …","Mark the first animated frame as a ‘separate default …","","Set the chromaticities for the source system’s display …","Set the display gamma of the source system on which the …","Mark the image data as conforming to the SRGB color space …","Set the allowed and performed transformations.","Sets the raw byte contents of the tRNS chunk. This method …","Size of the image, width then height.","Chromaticities of the source system. Set by both <code>cHRM</code> as …","Gamma of the source system. Set by both <code>gAMA</code> as well as to …","The rendering intent of an SRGB image.","Create a stream writer.","Create a stream writer with custom buffer size.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Text chunks (tEXt/zTXt/iTXt) structs and functions","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","The image’s <code>tRNS</code> chunk, if present; contains the alpha …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tEXt field","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Either <em>Meter</em> or <em>Unspecified</em>","Low level StreamingDecoder interface.","iTXt field","Validate the written image sequence.","","Width of the following frame","","The pixel width of this frame.","A utility constructor for a default info with width and …","","Write a raw chunk of PNG data.","Start encoding by writing the header data.","Writes the next image data.","","X position at which to render the following frame","Pixels per unit, X axis","Y position at which to render the following frame","Pixels per unit, Y axis","","","","","","","","","","","","","","","","","","","","","","Image data","Image trailer","Image header","Palette","Animation control","Background colour","","","Source system’s pixel chromaticities","","","","Frame control","Frame data","","Returns the argument unchanged.","Source system’s gamma value","","ICC profile chunk","UTF-8 textual data","Calls <code>U::from(self)</code>.","Returns true if the chunk is critical.","Returns true if the chunk is private.","Physical pixel dimensions","Checks whether the reserved bit of the chunk name is set. …","sRGB color space chunk","Returns true if the chunk is safe to copy if unknown.","Latin-1 uncompressed textual data","Image last-modification time","Transparency","","","","","Latin-1 compressed textual data","Default decompression limit for compressed text chunks.","A generalized text chunk trait","Struct encoding an iTXt chunk","Struct representing a tEXt chunk","Struct representing a zTXt chunk","","","","","","","","","","","","","Compresses the inner text, mutating its own state.","Compresses the inner text, mutating its own state.","Indicates whether the text will be (or was) compressed in …","Decompresses the inner text, mutating its own state. Can …","Decompresses the inner text, mutating its own state. Can …","Decompresses the inner text, mutating its own state. Can …","Decompresses the inner text, mutating its own state. Can …","Encode text chunk as Vec to a <code>Write</code>","Encodes TEXtChunk to a Writer. The keyword and text are …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decompresses the inner text, and returns it as a <code>String</code>. …","Decompresses the inner text, and returns it as a <code>String</code>. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keyword field of the tEXt chunk. Needs to be between 1-79 …","Keyword field of the tEXt chunk. Needs to be between 1-79 …","The keyword field. This needs to be between 1-79 bytes …","A hyphen separated list of languages that the keyword is …","Constructs a new TEXtChunk. Not sure whether it should …","Creates a new ZTXt chunk.","Constructs a new iTXt chunk. Leaves all but keyword and …","Text field of tEXt chunk. Can be at most 2GB.","","","","Translated keyword. This is UTF-8 encoded.","","","","","","","","",""],"i":[25,28,0,0,40,27,19,22,0,0,40,40,0,0,0,0,0,22,0,6,16,0,0,22,0,13,4,16,0,40,15,15,40,22,6,40,40,40,15,0,13,4,0,13,4,18,27,28,19,40,16,0,20,27,13,4,0,40,25,0,40,19,0,25,15,15,22,6,25,0,16,20,0,0,0,0,27,0,16,0,18,27,0,2,2,2,6,7,7,7,12,6,6,6,6,6,7,6,6,21,24,31,46,45,2,32,33,15,16,17,18,19,20,21,8,22,23,24,25,7,6,39,40,13,12,26,4,27,28,31,46,45,2,32,33,15,16,17,18,19,20,21,8,22,23,24,25,7,6,39,40,13,12,26,4,27,28,12,26,7,13,4,7,0,15,16,17,18,19,20,21,8,22,23,24,25,7,6,26,27,28,15,16,17,18,19,20,21,8,22,23,24,25,7,6,26,27,28,6,7,12,6,7,7,6,31,21,22,7,6,26,27,28,21,21,6,21,32,33,6,21,8,24,25,7,15,16,18,19,20,23,24,25,6,12,27,28,23,6,32,33,33,15,16,17,18,19,19,20,20,21,8,22,23,24,25,7,6,6,6,6,6,39,39,40,13,13,12,26,4,4,27,28,7,7,31,46,45,2,32,33,15,16,17,18,19,20,21,8,22,23,24,25,7,6,39,40,13,13,12,26,4,4,27,28,6,6,6,6,23,15,16,18,19,20,27,7,24,6,21,7,12,7,23,21,31,45,6,7,6,6,31,46,45,2,32,33,15,16,17,18,19,20,21,8,22,23,24,25,7,6,39,40,13,12,26,4,27,28,23,32,32,23,6,7,6,12,31,46,2,23,24,46,45,45,45,6,6,8,8,45,45,45,7,6,7,13,4,7,7,7,46,46,24,6,31,32,33,32,33,15,21,6,2,32,33,2,2,32,33,2,2,2,2,32,33,2,32,33,2,32,33,32,33,32,33,31,46,46,2,2,21,2,2,2,46,2,7,7,7,7,32,32,6,6,6,0,24,15,16,17,18,19,20,21,8,22,23,24,25,7,6,26,27,28,19,20,39,13,4,6,7,31,46,45,2,32,33,15,16,17,18,19,20,21,8,22,23,24,25,7,6,39,40,13,12,26,4,27,28,31,46,45,2,32,33,15,16,17,18,19,20,21,8,22,23,24,25,7,6,39,40,13,12,26,4,27,28,31,46,45,2,32,33,15,16,17,18,19,20,21,8,22,23,24,25,7,6,39,40,13,12,26,4,27,28,7,6,17,31,7,2,24,21,7,12,7,33,32,2,32,32,21,17,21,17,57,58,59,60,61,62,63,57,58,59,57,57,57,64,65,66,67,68,69,53,0,0,0,0,0,0,0,53,53,0,53,53,53,0,0,53,53,0,53,0,0,53,0,0,0,0,0,0,0,0,0,53,53,53,53,0,0,0,0,0,0,54,55,56,54,55,56,54,55,56,54,55,56,55,56,56,55,56,55,56,70,54,55,56,54,55,56,54,55,56,54,55,56,55,56,54,55,56,54,55,56,56,54,55,56,54,54,55,56,56,54,55,56,54,55,56,54,55,56],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3,3],[[5,[4]]]],[[[2,[1]],3,3],[[5,[4]]]],[[[2,[1]],3,3],[[5,[4]]]],[[],6],[7,[[9,[8]]]],0,0,0,[[6,6],6],[[6,6]],[[6,6],6],[[6,6]],[6,10],[7,11],[[6,6],6],[[6,6]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,11],0,[7,11],[13,[[9,[14]]]],[4,[[9,[14]]]],0,0,[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[8,8],[22,22],[23,23],[24,24],[25,25],[7,7],[6,6],[26,26],[27,27],[28,28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,6],29],0,0,[6,6],0,0,[[6,6],30],[[],31],[[],21],[[],22],[[],7],[[],6],[[],26],[[],27],[[],28],0,0,[[6,6],6],0,[[[32,[1]]]],[[[33,[1]]]],[[],6],[21,[[5,[4]]]],[8,[[5,[4]]]],[24,[[5,[4]]]],[25,[[5,[4]]]],[[7,1],[[5,[4]]]],[[15,15],30],[[16,16],30],[[18,18],30],[[19,19],30],[[20,20],30],[[23,23],30],[[24,24],30],[[25,25],30],[[6,6],30],[[12,12],30],[[27,27],30],[[28,28],30],[34,30],[[6,35]],[[[32,[1]]],[[5,[4]]]],[[[33,[1]]],[[5,[4]]]],[[[33,[1]]],36],[[15,37],38],[[16,37],38],[[17,37],38],[[18,37],38],[[19,37],38],[[19,37],38],[[20,37],38],[[20,37],38],[[21,37],38],[[8,37],38],[[22,37],38],[[23,37],38],[[24,37],38],[[25,37],38],[[7,37],38],[[6,37],38],[[6,37],38],[[6,37],38],[[6,37],38],[[6,37],38],[[39,37],38],[[39,37],38],[[40,37],38],[[13,37],[[5,[41]]]],[[13,37],38],[[12,37],38],[[26,37],38],[[4,37],[[5,[41]]]],[[4,37],38],[[27,37],38],[[28,37],38],[7,[[9,[21]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,13],[[]],[[]],[[]],[[]],[42,4],[[]],[[]],[10,[[9,[6]]]],[10,6],[10,6],[35,6],[10,23],[43,[[9,[15]]]],[43,[[9,[16]]]],[43,[[9,[18]]]],[43,[[9,[19]]]],[43,[[9,[20]]]],[43,[[9,[27]]]],0,0,[6],0,0,0,0,[34,30],[[21,10]],[31,[[9,[7]]]],[[[45,[44]]],7],[[6,6]],0,[[6,6],6],[[6,6],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,10],[[[32,[1]]],[[5,[[33,[1]],4]]]],[[[32,[1]],11],[[5,[[33,[1]],4]]]],[23,34],[6,30],[7,30],[6,30],0,[[],31],[44,[[46,[44]]]],[[1,10,10],[[2,[1]]]],[34,23],[[],24],[[44,26],[[46,[44]]]],[[[45,[44]]],[[5,[12,13]]]],[[[45,[44]]],[[5,[[9,[0]],13]]]],[[[45,[44]]],[[5,[[9,[0]],13]]]],[[],6],[6,6],0,0,[[[45,[44]]],11],[[[45,[44]]]],[[[45,[44]],10],11],0,[[6,6],[[9,[29]]]],0,[47],[47],[7,11],[7,11],[[7,10],11],[[[46,[44]]],[[5,[7,13]]]],[[[46,[44]]],[[5,[[45,[44]],13]]]],0,[[6,6]],[31],[[[32,[1]]],[[5,[4]]]],[[[33,[1]]],[[5,[4]]]],[[[32,[1]]],[[5,[4]]]],[[[33,[1]]],[[5,[4]]]],[15,11],0,[[6,6,30]],[[[2,[1]],28]],[[[32,[1]],28]],[[[33,[1]],28]],[[[2,[1]],10,10],[[5,[4]]]],[[[2,[1]],20],[[5,[4]]]],[[[32,[1]],20],[[5,[4]]]],[[[33,[1]],20],[[5,[4]]]],[[[2,[1]],15]],[[[2,[1]],22]],[[[2,[1]],16]],[[[2,[1]],19],[[5,[4]]]],[[[32,[1]],19],[[5,[4]]]],[[[33,[1]],19],[[5,[4]]]],[[[2,[1]],27]],[[[32,[1]],27]],[[[33,[1]],27]],[[[2,[1]],48,48],[[5,[4]]]],[[[32,[1]],48,48],[[5,[4]]]],[[[33,[1]],48,48],[[5,[4]]]],[[[32,[1]],10,10],[[5,[4]]]],[[[33,[1]],10,10],[[5,[4]]]],[[[32,[1]],10,10],[[5,[4]]]],[[[33,[1]],10,10],[[5,[4]]]],[[31,30]],[[[46,[44]],30]],[[[46,[44]],26]],[[[2,[1]],[50,[49]]]],[[[2,[1]],30],[[5,[4]]]],[[21,10]],[[[2,[1]],24]],[[[2,[1]],23]],[[[2,[1]],25]],[[[46,[44]],6]],[[[2,[1]],[50,[49]]]],[7],0,0,0,[[[32,[1]]],[[5,[[33,[1]],4]]]],[[[32,[1]],11],[[5,[[33,[1]],4]]]],[[6,6],6],[[6,6]],[[6,6],6],0,[24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[6,6]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],[[],51],0,[[6,6],6],0,[[31,52],[[5,[13]]]],0,[[[2,[1]],30]],0,0,0,0,[[10,10],7],[[[33,[1]]],[[36,[11]]]],[[[32,[1]],53],[[5,[4]]]],[[[2,[1]]],[[5,[[32,[1]],4]]]],[[[32,[1]]],[[5,[4]]]],[[[32,[1]]],[[5,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[53,53],[[]],[[53,53],30],0,0,[[53,37],38],[[]],0,[53],0,0,[[]],[53,30],[53,30],0,[53,30],0,[53,30],0,0,0,[[]],[[],5],[[],5],[[],51],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[54,54],[55,55],[56,56],[[]],[[]],[[]],[55,[[5,[4]]]],[56,[[5,[4]]]],0,[55,[[5,[13]]]],[56,[[5,[13]]]],[[55,11],[[5,[13]]]],[[56,11],[[5,[13]]]],[[],[[5,[4]]]],[54,[[5,[4]]]],[55,[[5,[4]]]],[56,[[5,[4]]]],[[54,54],30],[[55,55],30],[[56,56],30],[[54,37],38],[[55,37],38],[[56,37],38],[[]],[[]],[[]],[55,[[5,[3,13]]]],[56,[[5,[3,13]]]],[[]],[[]],[[]],0,0,0,0,[[[50,[3]],[50,[3]]],54],[[[50,[3]],[50,[3]]],55],[[[50,[3]],[50,[3]]],56],0,[[]],[[]],[[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],51],[[],51],[[],51]],"p":[[8,"Write"],[3,"Encoder"],[3,"String"],[4,"EncodingError"],[4,"Result"],[3,"Transformations"],[3,"Info"],[3,"AnimationControl"],[4,"Option"],[15,"u32"],[15,"usize"],[3,"OutputInfo"],[4,"DecodingError"],[8,"Error"],[4,"ColorType"],[4,"BitDepth"],[3,"PixelDimensions"],[4,"Unit"],[4,"DisposeOp"],[4,"BlendOp"],[3,"FrameControl"],[4,"Compression"],[3,"ScaledFloat"],[3,"SourceChromaticities"],[4,"SrgbRenderingIntent"],[3,"Limits"],[4,"FilterType"],[4,"AdaptiveFilterType"],[4,"Ordering"],[15,"bool"],[3,"StreamingDecoder"],[3,"Writer"],[3,"StreamWriter"],[15,"f32"],[8,"IntoIterator"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"ParameterError"],[4,"Decoded"],[3,"Error"],[3,"Error"],[15,"u8"],[8,"Read"],[3,"Reader"],[3,"Decoder"],[3,"Demand"],[15,"u16"],[4,"Cow"],[8,"Into"],[3,"TypeId"],[3,"Vec"],[3,"ChunkType"],[3,"TEXtChunk"],[3,"ZTXtChunk"],[3,"ITXtChunk"],[13,"Header"],[13,"ChunkBegin"],[13,"ChunkComplete"],[13,"PixelDimensions"],[13,"AnimationControl"],[13,"FrameControl"],[13,"PartialChunk"],[13,"IoError"],[13,"Format"],[13,"Parameter"],[13,"IoError"],[13,"Format"],[13,"Parameter"],[8,"EncodableTextChunk"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","provide","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","0","0","0","0","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":["proc_macro2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro2::TokenTree","","","","proc_macro2::token_stream","","","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[9,8,8,0,0,6,0,6,9,0,0,6,8,8,0,6,0,0,0,0,1,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,3,4,3,5,4,6,7,8,1,9,10,3,5,4,6,7,8,1,9,10,3,10,5,7,8,9,10,10,5,5,3,3,3,3,16,16,5,5,4,6,6,7,7,8,1,1,9,10,10,3,3,16,5,5,5,4,4,6,6,6,6,6,7,8,1,9,10,3,5,5,5,3,10,3,3,3,3,3,3,3,3,3,3,16,5,4,6,7,8,1,9,10,3,5,5,3,3,4,4,4,5,7,1,10,10,10,16,4,6,7,1,10,3,1,16,6,7,1,10,3,7,7,7,3,3,5,4,6,7,8,1,9,10,3,16,5,6,7,1,10,3,0,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,3,3,3,3,3,3,3,3,3,3,4,3,3,41,42,43,44,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],4],[2,3],[5,5],[4,4],[6,6],[7,7],[8,8],[1,1],[9,9],[10,10],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],11],[[],5],[7,8],[[8,8],12],[[9,9],12],[10,12],[[10,10],12],[[5,13]],[[5,13]],[14,3],[14,3],[15,3],[15,3],[[16,17],18],[[16,17],18],[[5,17],18],[[5,17],18],[[4,17],18],[[6,17],18],[[6,17],18],[[7,17],18],[[7,17],18],[[8,17],18],[[1,17],18],[[1,17],18],[[9,17],18],[[10,17],18],[[10,17],18],[[3,17],18],[[3,17],18],[[]],[19,5],[[]],[6,5],[20,4],[[]],[7,6],[10,6],[1,6],[3,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,5],[13,5],[21,[[22,[5,16]]]],[21,[[22,[3,16]]]],[10],[23,3],[23,3],[24,3],[24,3],[25,3],[25,3],[26,3],[26,3],[27,3],[27,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,28],[5,12],[29,3],[29,3],[[4,4],[[30,[4]]]],[[4,4],4],[[],4],[[],5],[[8,5],7],[[2,9],1],[[21,4],10],[[21,4],10],[[10,10],[[30,[11]]]],[31],[[4,4],4],[[6,4]],[[7,4]],[[1,4]],[[10,4]],[[3,4]],[1,9],[16,4],[6,4],[7,4],[1,4],[10,4],[3,4],[7,4],[7,4],[7,5],[21,3],[[3,[33,[32]]],[[30,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],0,[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[36,3],[36,3],[37,3],[37,3],[38,3],[38,3],[39,3],[39,3],[40,3],[40,3],[4,20],[32,3],[32,3],0,0,0,0,0,0,[[]],[[]],[28,28],[[]],[[28,17],18],[[]],[[]],[[]],[28,[[30,[6]]]],[28],[[]],[[],22],[[],22],[[],35]],"p":[[3,"Punct"],[15,"char"],[3,"Literal"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[15,"bool"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[15,"str"],[4,"Result"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"Demand"],[15,"usize"],[8,"RangeBounds"],[3,"String"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[13,"Group"],[13,"Ident"],[13,"Punct"],[13,"Literal"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,6,6,6,6,7,0,8,8,0,0,7,7,8,8,8],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,2],0,[[],3],[[],3],0,0,[[],[[5,[4]]]],[[],[[5,[4]]]],[[],3],[[],3],[3]],"p":[[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"roots":{"doc":"A set of functions to find real roots of numerical …","t":[8,3,8,13,3,13,13,13,13,3,4,3,4,3,13,13,13,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,12,11,10,10,10,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,12,12,12,12,12],"n":["Convergency","DebugConvergency","FloatType","Four","Interval","No","NoBracketing","NoConvergency","One","Parabola","Roots","Sample","SearchError","SimpleConvergency","Three","Two","ZeroDerivative","abs","acos","add_new_root","as_ref","atan","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cos","description","eps","eq","eq","eq","eq","eq","find_root_brent","find_root_inverse_quadratic","find_root_newton_raphson","find_root_regula_falsi","find_root_secant","find_roots_biquadratic","find_roots_cubic","find_roots_cubic_depressed","find_roots_cubic_normalized","find_roots_eigen","find_roots_linear","find_roots_quadratic","find_roots_quartic","find_roots_quartic_depressed","find_roots_sturm","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_iter_count","into","into","into","into","into","into","into","is_converged","is_converged","is_converged","is_iteration_limit_reached","is_iteration_limit_reached","is_iteration_limit_reached","is_root_found","is_root_found","is_root_found","max_iter","new","one","one_third","pi","powf","provide","reset","sin","sqrt","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_third_pi","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","0","0","0","0","0"],"q":["roots","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","roots::Roots","","","",""],"d":["The way to check if the algorithm has finished by either …","Convergency provider for debugging. It will print out the …","Generic type that lists functions and constants needed in …","Equation has four roots","Interval between two samples, including these samples","Equation has no roots","Initial values do not bracket zero","The algorithm could not converge within the given number …","Equation has one root (or all roots of the equation are …","Definition of the quadratic equation a<em>x^2 + b</em>x + c","Sorted and unique list of roots of an equation.","Pair of the independent variable x and the function value …","Possible errors","A very basic convergency rules that must be sufficient for …","Equation has three roots","Equation has two roots","The algorithm cannot continue from the point where the …","","","Add a new root to existing ones keeping the list of roots …","","","","","","","","","","","","","","","","","The cubic root function is pow(x, 1/3) accepting negative …","The cubic root function is pow(x, 1/3) accepting negative …","","","Precision for both X and Y axes","","","","","","Find a root of the function f(x) = 0 using the Brent …","Find a root of the function f(x) = 0 using inverse …","Find a root of the function f(x) = 0 using the …","Find a root of the function f(x) = 0 using the Illinois …","Find a root of the function f(x) = 0 using the secant …","Solves a bi-quadratic equation a4<em>x^4 + a2</em>x^2 + a0 = 0.","Solves a cubic equation a3<em>x^3 + a2</em>x^2 + a1*x + a0 = 0.","Solves a depressed cubic equation x^3 + a1*x + a0 = 0.","Solves a normalized cubic equation x^3 + a2<em>x^2 + a1</em>x + a0 …","Find all roots of the normalized polynomial by finding …","Solves a linear equation a1*x + a0 = 0.","Solves a quadratic equation a2<em>x^2 + a1</em>x + a0 = 0.","Solves a quartic equation a4<em>x^4 + a3</em>x^3 + a2<em>x^2 + a1</em>x + a0 …","Solves a depressed quartic equation x^4 + a2<em>x^2 + a1</em>x + a0 …","Find all roots of the normalized polynomial x^n + a[0]*…","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if given x values are close enough to each …","Prints values being checked","","Return true if no more iterations desired","Updates internal iteration counter","","Return true if the given Y value is close enough to the …","Prints the value being checked","","Maximum number of iterations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,2,0,2,3,3,2,0,0,0,0,0,2,2,3,1,1,2,2,1,18,22,2,7,8,3,9,18,22,2,7,8,3,9,1,1,1,3,22,2,7,8,3,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,8,3,3,9,18,22,2,7,8,3,9,18,18,22,2,7,8,3,9,10,18,22,10,18,22,10,18,22,22,18,1,1,1,1,3,18,1,1,3,18,22,2,7,8,3,9,18,22,2,7,8,3,9,1,18,22,2,7,8,3,9,1,26,27,28,29,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[2,[1]],1],[[2,[1]]]],[[[2,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,4],0,[[[2,[[0,[5,1]]]],2],6],[[[7,[5]],7],6],[[[8,[5]],8],6],[[3,3],6],[[[9,[5]],9],6],[10,[[11,[3]]]],[10,[[11,[3]]]],[10,[[11,[3]]]],[10,[[11,[3]]]],[10,[[11,[3]]]],[[1,1,1],[[2,[1]]]],[[1,1,1,1],[[2,[1]]]],[[1,1],[[2,[1]]]],[[1,1,1],[[2,[1]]]],[[[13,[12]]],[[14,[12]]]],[[1,1],[[2,[1]]]],[[1,1,1],[[2,[1]]]],[[1,1,1,1,1],[[2,[1]]]],[[1,1,1],[[2,[1]]]],[10,[[13,[[11,[3]]]]]],[[[2,[[0,[15,1]]]],16],17],[[[7,[15]],16],17],[[[8,[15]],16],17],[[3,16],17],[[3,16],17],[[[9,[15]],16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[[18,[[0,[1,20,21]]]],[0,[1,20,21]],[0,[1,20,21]]],6],[[[22,[1]],1,1],6],[19,6],[[[18,[[0,[1,20,21]]]],19],6],[[[22,[1]],19],6],[[],6],[[[18,[[0,[1,20,21]]]],[0,[1,20,21]]],6],[[[22,[1]],1],6],0,[[1,19],[[18,[1]]]],[[]],[[]],[[]],[[]],[23],[18],[[]],[[]],[[],24],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],0,0,0,0,0],"p":[[8,"FloatType"],[4,"Roots"],[4,"SearchError"],[15,"str"],[8,"PartialEq"],[15,"bool"],[3,"Sample"],[3,"Interval"],[3,"Parabola"],[8,"Convergency"],[4,"Result"],[15,"f64"],[3,"Vec"],[3,"VecDeque"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"DebugConvergency"],[15,"usize"],[8,"Display"],[8,"LowerExp"],[3,"SimpleConvergency"],[3,"Demand"],[3,"String"],[3,"TypeId"],[13,"No"],[13,"One"],[13,"Two"],[13,"Three"],[13,"Four"]]},\
"safemem":{"doc":"Safe wrappers for memory-accessing functions like …","t":[5,5,5],"n":["copy_over","prepend","write_bytes"],"q":["safemem","",""],"d":["Copy <code>len</code> elements from <code>src_idx</code> to <code>dest_idx</code>. Ranges may …","Prepend <code>elems</code> to <code>vec</code>, resizing if necessary.","Safe wrapper for <code>std::ptr::write_bytes()</code>/<code>memset()</code>."],"i":[0,0,0],"f":[[[1,1,1]],[2],[3]],"p":[[15,"usize"],[3,"Vec"],[15,"u8"]]},\
"serde":{"doc":"Serde","t":[8,8,16,16,16,8,16,16,16,16,16,16,16,8,11,11,11,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,14,11,11,0,14,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,2,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,10,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,2,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11],"n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","0","0","0","0","0","0","0","0","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","provide","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":["serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::deserde::de::Unexpected","","","","","","","","serde::de::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","","","","","","","","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,63,64,64,0,64,64,64,64,64,64,64,0,64,64,64,0,65,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,63,64,0,0,66,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,20,20,20,0,0,0,0,67,20,0,0,63,68,69,70,71,0,20,0,0,20,0,20,20,20,20,20,0,20,0,20,20,20,0,20,20,20,72,73,70,0,0,19,20,19,20,19,20,19,20,74,19,65,72,19,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,74,20,73,19,23,23,19,19,20,20,19,20,19,20,67,74,74,74,63,74,71,71,68,68,69,69,69,69,69,69,68,69,71,19,20,20,19,20,19,20,71,19,20,71,74,74,0,70,70,73,19,73,73,73,73,19,73,73,19,73,73,19,73,19,73,73,73,19,73,73,19,73,19,73,19,73,19,73,19,73,19,73,73,19,73,73,73,19,73,73,19,75,76,77,78,79,80,81,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,37,37,37,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,36,54,37,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,36,54,36,36,36,37,36,36,54,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,37,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,29,30,31,32,33,56,0,64,83,84,85,86,87,88,89,0,64,83,84,85,86,87,88,89,0,0,64,0,64,0,64,0,64,0,64,0,64,0,64,0,0,62,62,64,64,64,90,83,84,85,86,87,88,89,62,62,62,62,62,62,62,62,62,64,66,64,64,64,83,84,62,62,87,64,64,85,86,88,89,62,62,62,62,64,64,64,64,64,87,62,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,87,62,88,89,62,62,62],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[2,1],[3,1],[[2,3],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],0,[[],4],[[],4],0,0,[[],1],[4,1],[[],1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[[[13,[3]]],1],[2,1],[[2,14,2],1],[[],1],[[[13,[3]]],1],[[],1],[2,1],[[2,3],1],[[2,14,2,3],1],[3,1],[[2,3],1],[[2,14,2,3],1],[15,1],[16,1],[14,1],[17,1],[18,1],[[],1],[2,1],[[2,14,2],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[19,19],[20,20],[[]],[[]],[[]],[[],19],[[],1],[[],1],[[],[[1,[19]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[[],1],[[],1],[[],1],[[],1],[2,1],[3,1],[[2,3],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[2,1],[2],[[20,20],4],[21,22],[[19,21],22],[21,22],[[23,21],22],[21,[[1,[24]]]],[[19,21],22],[[20,21],22],[[20,21],22],[[]],[[]],[[]],[[]],[[]],[[3,23]],[[20,23]],[[20,23]],[[],4],[2],[[],1],[[],1],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],[[1,[13]]]],[[],1],[[],1],[[],[[13,[3]]]],[[],[[13,[3]]]],[[],1],[[]],[[]],[[],25],[[],1],[[],1],[[],1],[[],1],[3,1],[[],26],[[],26],[[],1],[2],[2],0,[[],1],[[],1],[4,1],[[19,4],1],[[],1],[2,1],[[[27,[18]]],1],[[],1],[19,1],[5,1],[[],1],[19,1],[6,1],[7,1],[[19,7],1],[8,1],[[19,8],1],[9,1],[10,1],[11,1],[[19,11],1],[12,1],[[],1],[19,1],[[],1],[19,1],[[],1],[19,1],[[],1],[19,1],[[],1],[19,1],[2,1],[[19,2],1],[25,1],[15,1],[[19,15],1],[16,1],[14,1],[17,1],[[19,17],1],[18,1],[[],1],[19,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[[[54,[53,53]]],[[54,[53,53]]]],[[[55,[53]]],[[55,[53]]]],[[[56,[53]]],[[56,[53]]]],[[[57,[53]]],[[57,[53]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],37],[37,2],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[[57,2],1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[[57,2],1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[[57,2],1],[[28,3],1],[[29,3],1],[[30,3],1],[[31,3],1],[[32,3],1],[[33,3],1],[[34,3],1],[[35,3],1],[[36,3],1],[[38,3],1],[[39,3],1],[[40,3],1],[[41,3],1],[[42,3],1],[[43,3],1],[[44,3],1],[[45,3],1],[[46,3],1],[[47,3],1],[[48,3],1],[[49,3],1],[[50,3],1],[[51,3],1],[[52,3],1],[[54,3],1],[[55,3],1],[[56,3],1],[[57,3],1],[[28,2,3],1],[[29,2,3],1],[[30,2,3],1],[[31,2,3],1],[[32,2,3],1],[[33,2,3],1],[[34,2,3],1],[[35,2,3],1],[[36,2,3],1],[[38,2,3],1],[[39,2,3],1],[[40,2,3],1],[[41,2,3],1],[[42,2,3],1],[[43,2,3],1],[[44,2,3],1],[[45,2,3],1],[[46,2,3],1],[[47,2,3],1],[[48,2,3],1],[[49,2,3],1],[[50,2,3],1],[[51,2,3],1],[[52,2,3],1],[[54,2,3],1],[[55,2,3],1],[[56,2,3],1],[[57,2,3],1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[54,1],[55,1],[56,1],[57,1],[[28,2],1],[[29,2],1],[[30,2],1],[[31,2],1],[[32,2],1],[[33,2],1],[[34,2],1],[[35,2],1],[[36,2],1],[[38,2],1],[[39,2],1],[[40,2],1],[[41,2],1],[[42,2],1],[[43,2],1],[[44,2],1],[[45,2],1],[[46,2],1],[[47,2],1],[[48,2],1],[[49,2],1],[[50,2],1],[[51,2],1],[[52,2],1],[[54,2],1],[[55,2],1],[[56,2],1],[[57,2],1],[36,1],[54,1],[[37,37],4],[[28,21],22],[[29,21],22],[[30,21],22],[[31,21],22],[[32,21],22],[[33,21],22],[[34,21],22],[[35,21],22],[[36,21],22],[[37,21],22],[[37,21],22],[[38,21],22],[[39,21],22],[[40,21],22],[[41,21],22],[[42,21],22],[[43,21],22],[[44,21],22],[[45,21],22],[[46,21],22],[[47,21],22],[[48,21],22],[[49,21],22],[[50,21],22],[[51,21],22],[[52,21],22],[[54,21],22],[[[55,[58]],21],22],[[[56,[58]],21],22],[[[57,[58]],21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[14,29],[2,30],[2,31],[25,32],[[[59,[2]]],33],[[],34],[[],35],[[],36],[4,38],[12,39],[9,40],[10,41],[11,42],[60,43],[18,44],[16,45],[17,46],[3,47],[6,48],[7,49],[5,50],[8,51],[15,52],[[],54],[[],55],[[],56],[[],57],[36,[[1,[13]]]],[54,[[1,[13]]]],[36,[[1,[13]]]],[36,[[1,[13]]]],[36,1],[61],[36,[[13,[3]]]],[36,[[13,[3]]]],[54,[[13,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[29,1],[30,1],[31,1],[32,1],[33,1],[56,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[[],1],[[],1],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[[]],[[]],[[],4],[[],1],[4,1],[[],1],[5,1],[[],1],[[],1],[62,1],[62,1],[[],1],[6,1],[7,1],[[],1],[[],1],[2,1],[2,1],[62,1],[[62,2],1],[62,1],[[62,2],1],[8,1],[9,1],[10,1],[11,1],[12,1],[[],1],[62,1],[[[13,[3]]],1],[2,1],[[2,14,2],1],[[],1],[[[13,[3]]],1],[[],1],[2,1],[[2,3],1],[[2,14,2,3],1],[3,1],[[2,3],1],[[2,14,2,3],1],[15,1],[16,1],[14,1],[17,1],[18,1],[[],1],[2,1],[[2,14,2],1],[[],1],[62,1],[2,1],[2,1],[[],1],[[],1],[[],26]],"p":[[4,"Result"],[15,"str"],[15,"usize"],[15,"bool"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[3,"IgnoredAny"],[4,"Unexpected"],[3,"Formatter"],[6,"Result"],[8,"Expected"],[3,"Error"],[3,"String"],[3,"TypeId"],[3,"Vec"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[8,"Clone"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[3,"EnumAccessDeserializer"],[8,"Debug"],[4,"Cow"],[15,"isize"],[3,"Demand"],[3,"Impossible"],[8,"Deserializer"],[8,"Serializer"],[8,"Deserialize"],[8,"Serialize"],[8,"IntoDeserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[8,"Error"],[13,"Bool"],[13,"Unsigned"],[13,"Signed"],[13,"Float"],[13,"Char"],[13,"Str"],[13,"Bytes"],[13,"Other"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[8,"Error"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Deserialize","Serialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"skia_bindings":{"doc":"","tn":["A","A2B","ASTC","AVIF","Absolute","Alias","Allocate","Allow","AllowJIT","AntiAlias","Append","AsWinding","B","B","B2A","BC1_RGB8_UNORM","BC1_RGBA8_UNORM","BMP","BT2020","BT2020_10bit_Full","BT2020_10bit_Limited","BT2020_12bit_Full","BT2020_12bit_Limited","BT2020_8bit_Full","BT2020_8bit_Limited","Bevel","Blender","Bold","BoldItalic","BottomLeft","BottomRight","BottomUp","Butt","C","CCW","CICP","COUNT","CW","C_Core_Types","C_Effects_Types","C_ImageFilters_DistantLitSpecular","C_RustStream_construct","C_RustStream_destruct","C_SVG_Types","C_Sk3DView_delete","C_Sk3DView_new","C_SkAutoCanvasRestore_Construct","C_SkAutoCanvasRestore_destruct","C_SkAutoCanvasRestore_restore","C_SkBitmap_ComputeIsOpaque","C_SkBitmap_Construct","C_SkBitmap_Copy","C_SkBitmap_asImage","C_SkBitmap_destruct","C_SkBitmap_eraseARGB","C_SkBitmap_extractAlpha","C_SkBitmap_getAlphaf","C_SkBitmap_makeShader","C_SkBitmap_pixelRefOrigin","C_SkBitmap_readyToDraw","C_SkBitmap_setPixelRef","C_SkBitmap_tryAllocN32Pixels","C_SkBitmap_tryAllocPixels","C_SkBlender_Deserialize","C_SkBlender_Mode","C_SkBlenders_Arithmetic","C_SkCanvas_MakeRasterDirect","C_SkCanvas_clipShader","C_SkCanvas_delete","C_SkCanvas_discard","C_SkCanvas_getBaseLayerSize","C_SkCanvas_getDeviceClipBounds","C_SkCanvas_getLocalClipBounds","C_SkCanvas_getLocalToDevice","C_SkCanvas_getTotalMatrix","C_SkCanvas_imageInfo","C_SkCanvas_isClipEmpty","C_SkCanvas_isClipRect","C_SkCanvas_makeSurface","C_SkCanvas_newEmpty","C_SkCanvas_newFromBitmap","C_SkCanvas_newFromBitmapAndProps","C_SkCanvas_newWidthHeightAndProps","C_SkCodec_MakeFromData","C_SkCodec_bounds","C_SkCodec_dimensions","C_SkCodec_getEncodedFormat","C_SkCodec_getFrameCount","C_SkCodec_getImage","C_SkCodec_getInfo","C_SkCodec_getOrigin","C_SkCodec_getRepetitionCount","C_SkCodec_getScaledDimensions","C_SkCodec_getScanlineOrder","C_SkCodec_getValidSubset","C_SkCodec_incrementalDecode","C_SkCodec_nextScanline","C_SkColor4f_FromBytes_RGBA","C_SkColor4f_toBytes_RGBA","C_SkColorFilter_Deserialize","C_SkColorFilter_filterColor4f","C_SkColorFilter_makeComposed","C_SkColorFilters_Blend","C_SkColorFilters_Blend2","C_SkColorFilters_Compose","C_SkColorFilters_HSLAMatrix","C_SkColorFilters_HSLAMatrixOfColorMatrix","C_SkColorFilters_Lerp","C_SkColorFilters_Lighting","C_SkColorFilters_LinearToSRGBGamma","C_SkColorFilters_Matrix","C_SkColorFilters_MatrixRowMajor","C_SkColorFilters_SRGBToLinearGamma","C_SkColorFilters_Table","C_SkColorFilters_TableARGB","C_SkColorInfo_Construct","C_SkColorInfo_Construct2","C_SkColorInfo_Copy","C_SkColorInfo_Equals","C_SkColorInfo_destruct","C_SkColorInfo_makeAlphaType","C_SkColorInfo_makeColorSpace","C_SkColorInfo_makeColorType","C_SkColorMatrix_Construct","C_SkColorMatrix_Construct2","C_SkColorMatrix_getRowMajor","C_SkColorMatrix_setRowMajor","C_SkColorSpace_Deserialize","C_SkColorSpace_MakeSRGB","C_SkColorSpace_MakeSRGBLinear","C_SkColorSpace_Types","C_SkColorSpace_makeColorSpin","C_SkColorSpace_makeLinearGamma","C_SkColorSpace_makeSRGBGamma","C_SkColorSpace_ref","C_SkColorSpace_serialize","C_SkColorSpace_unique","C_SkColorSpace_unref","C_SkContourMeasureIter_destruct","C_SkContourMeasureIter_next","C_SkContourMeasure_isClosed","C_SkContourMeasure_length","C_SkCornerPathEffect_Make","C_SkCubicMap_computeFromT","C_SkCustomTypefaceBuilder_destruct","C_SkCustomTypefaceBuilder_detach","C_SkCustomTypefaceBuilder_setGlyph","C_SkDashPathEffect_Make","C_SkDataTable_MakeCopyArray","C_SkDataTable_MakeCopyArrays","C_SkDataTable_MakeEmpty","C_SkDataTable_count","C_SkData_MakeEmpty","C_SkData_MakeSubset","C_SkData_MakeUninitialized","C_SkData_MakeWithCString","C_SkData_MakeWithCopy","C_SkData_MakeWithoutCopy","C_SkData_MakeZeroInitialized","C_SkData_ref","C_SkData_unique","C_SkData_unref","C_SkDeferredDisplayListRecorder_destruct","C_SkDeferredDisplayListRecorder_detach","C_SkDeferredDisplayList_ref","C_SkDeferredDisplayList_unique","C_SkDeferredDisplayList_unref","C_SkDiscretePathEffect_Make","C_SkDrawable_Deserialize","C_SkDrawable_getBounds","C_SkDynamicMemoryWStream_Construct","C_SkDynamicMemoryWStream_detachAsData","C_SkDynamicMemoryWStream_detachAsStream","C_SkEncodeBitmap","C_SkEncodePixmap","C_SkEncodedOriginToMatrix","C_SkFlattenable_getTypeName","C_SkFlattenable_serialize","C_SkFontArguments_construct","C_SkFontArguments_destruct","C_SkFontArguments_getPalette","C_SkFontArguments_getVariationDesignPosition","C_SkFontArguments_setCollectionIndex","C_SkFontArguments_setPalette","C_SkFontArguments_setVariationDesignPosition","C_SkFontMgr_RefDefault","C_SkFontMgr_makeFromStream","C_SkFontParameters_Variation_Axis_isHidden","C_SkFontParameters_Variation_Axis_setHidden","C_SkFontStyleSet_count","C_SkFontStyleSet_createTypeface","C_SkFontStyleSet_getStyle","C_SkFontStyleSet_matchStyle","C_SkFontStyle_Construct","C_SkFontStyle_Construct2","C_SkFontStyle_Equals","C_SkFontStyle_slant","C_SkFontStyle_weight","C_SkFontStyle_width","C_SkFont_ConstructFromTypeface","C_SkFont_ConstructFromTypefaceWithSize","C_SkFont_ConstructFromTypefaceWithSizeScaleAndSkew","C_SkFont_Equals","C_SkFont_destruct","C_SkFont_getEdging","C_SkFont_getHinting","C_SkFont_getIntercepts","C_SkFont_getTypeface","C_SkFont_makeWithSize","C_SkFont_setTypeface","C_SkGradientShader_MakeLinear","C_SkGradientShader_MakeLinearWithInterpolation","C_SkGradientShader_MakeRadial","C_SkGradientShader_MakeRadialWithInterpolation","C_SkGradientShader_MakeSweep","C_SkGradientShader_MakeSweepWithInterpolation","C_SkGradientShader_MakeTwoPointConical","C_SkGradientShader_MakeTwoPointConicalWithInterpolation","C_SkGradientShader_Types","C_SkHighContrastFilter_Make","C_SkIRect_contains","C_SkIRect_isEmpty","C_SkImageFilter_Deserialize","C_SkImageFilter_computeFastBounds","C_SkImageFilter_countInputs","C_SkImageFilter_filterBounds","C_SkImageFilter_getInput","C_SkImageFilter_isColorFilterNode","C_SkImageFilter_makeWithLocalMatrix","C_SkImageFilters_AlphaThreshold","C_SkImageFilters_Arithmetic","C_SkImageFilters_Blend","C_SkImageFilters_Blur","C_SkImageFilters_ColorFilter","C_SkImageFilters_Compose","C_SkImageFilters_Dilate","C_SkImageFilters_DisplacementMap","C_SkImageFilters_DistantLitDiffuse","C_SkImageFilters_DropShadow","C_SkImageFilters_DropShadowOnly","C_SkImageFilters_Erode","C_SkImageFilters_Image","C_SkImageFilters_Magnifier","C_SkImageFilters_MatrixConvolution","C_SkImageFilters_MatrixTransform","C_SkImageFilters_Merge","C_SkImageFilters_Offset","C_SkImageFilters_Paint","C_SkImageFilters_Picture","C_SkImageFilters_PointLitDiffuse","C_SkImageFilters_PointLitSpecular","C_SkImageFilters_Shader","C_SkImageFilters_SpotLitDiffuse","C_SkImageFilters_SpotLitSpecular","C_SkImageFilters_Tile","C_SkImageGenerator_MakeFromEncoded","C_SkImageGenerator_MakeFromPicture","C_SkImageGenerator_delete","C_SkImageGenerator_refEncodedData","C_SkImageInfo_Construct","C_SkImageInfo_Copy","C_SkImageInfo_Equals","C_SkImageInfo_Make","C_SkImageInfo_MakeA8","C_SkImageInfo_MakeN32","C_SkImageInfo_MakeN32Premul","C_SkImageInfo_MakeS32","C_SkImageInfo_MakeUnknown","C_SkImageInfo_destruct","C_SkImageInfo_makeColorSpace","C_SkImageInfo_reset","C_SkImage_MakeFromBitmap","C_SkImage_MakeFromEncoded","C_SkImage_MakeFromGenerator","C_SkImage_MakeFromPicture","C_SkImage_MakeRasterData","C_SkImage_MakeRasterFromCompressed","C_SkImage_encodeToData","C_SkImage_makeColorSpace","C_SkImage_makeNonTextureImage","C_SkImage_makeRasterImage","C_SkImage_makeRawShader","C_SkImage_makeShader","C_SkImage_makeSubset","C_SkImage_makeWithFilter","C_SkImage_refEncodedData","C_SkImage_reinterpretColorSpace","C_SkImage_withDefaultMipmaps","C_SkLine2DPathEffect_Make","C_SkLumaColorFilter_Make","C_SkM44_LookAt","C_SkM44_Perspective","C_SkM44_RectToRect","C_SkM44_Types","C_SkM44_equals","C_SkM44_map","C_SkM44_transpose","C_SkMakeNullCanvas","C_SkMaskFilter_Deserialize","C_SkMaskFilter_MakeBlur","C_SkMatrixPathEffect_Make","C_SkMatrixPathEffect_MakeTranslate","C_SkMatrix_Equals","C_SkMatrix_InvalidMatrix","C_SkMatrix_SubscriptMut","C_SkMatrix_getType","C_SkMatrix_hasPerspective","C_SkMatrix_invert","C_SkMatrix_isFinite","C_SkMatrix_normalizePerspective","C_SkMatrix_rectStaysRect","C_SkMatrix_setScaleTranslate","C_SkMemoryStream_MakeDirect","C_SkMergePathEffect_Make","C_SkOpBuilder_Construct","C_SkOpBuilder_destruct","C_SkOrderedFontMgr_append","C_SkOrderedFontMgr_new","C_SkOverdrawColorFilter_MakeWithSkColors","C_SkPDF_AttributeList_appendFloatArray","C_SkPDF_AttributeList_destruct","C_SkPDF_MakeDocument","C_SkPDF_Metadata_Construct","C_SkPDF_Metadata_destruct","C_SkPDF_StructElementNode_appendChild","C_SkPDF_StructureElementNode_New","C_SkPDF_StructureElementNode_delete","C_SkPDF_StructureElementNode_getChildVector","C_SkPDF_StructureElementNode_setChildVector","C_SkPaint_Equals","C_SkPaint_asBlendMode","C_SkPaint_copy","C_SkPaint_destruct","C_SkPaint_getAlpha","C_SkPaint_getStrokeCap","C_SkPaint_getStrokeJoin","C_SkPaint_getStyle","C_SkPaint_setBlender","C_SkPaint_setColorFilter","C_SkPaint_setImageFilter","C_SkPaint_setMaskFilter","C_SkPaint_setPathEffect","C_SkPaint_setShader","C_SkPath1DPathEffect_Make","C_SkPath2DPathEffect_Make","C_SkPathBuilder_Construct","C_SkPathBuilder_Construct3","C_SkPathBuilder_CopyConstruct","C_SkPathBuilder_computeBounds","C_SkPathBuilder_destruct","C_SkPathBuilder_detach","C_SkPathBuilder_snapshot","C_SkPathEffect_DashInfo_Construct","C_SkPathEffect_Deserialize","C_SkPathEffect_MakeCompose","C_SkPathEffect_MakeSum","C_SkPathMeasure_destruct","C_SkPathTypes_Types","C_SkPath_Circle","C_SkPath_Construct","C_SkPath_Equals","C_SkPath_Iter_destruct","C_SkPath_Iter_isCloseLine","C_SkPath_Make","C_SkPath_Oval","C_SkPath_OvalWithStartIndex","C_SkPath_Polygon","C_SkPath_RRect","C_SkPath_RRectWithStartIndex","C_SkPath_RawIter_Construct","C_SkPath_RawIter_destruct","C_SkPath_RawIter_peek","C_SkPath_Rect","C_SkPath_computeTightBounds","C_SkPath_destruct","C_SkPath_getBounds","C_SkPath_getFillType","C_SkPath_getPoint","C_SkPath_serialize","C_SkPerlinNoiseShader_MakeFractalNoise","C_SkPerlinNoiseShader_MakeTurbulence","C_SkPictureRecorder_Construct","C_SkPictureRecorder_destruct","C_SkPictureRecorder_finishRecordingAsDrawable","C_SkPictureRecorder_finishRecordingAsPicture","C_SkPicture_MakeFromData","C_SkPicture_MakeFromData2","C_SkPicture_MakePlaceholder","C_SkPicture_approximateBytesUsed","C_SkPicture_approximateOpCount","C_SkPicture_cullRect","C_SkPicture_makeShader","C_SkPicture_playback","C_SkPicture_serialize","C_SkPicture_uniqueID","C_SkPixelRef_height","C_SkPixelRef_isImmutable","C_SkPixelRef_notifyAddedToCache","C_SkPixelRef_pixels","C_SkPixelRef_rowBytes","C_SkPixelRef_width","C_SkPixmap_destruct","C_SkPixmap_setColorSpace","C_SkPoint_isFinite","C_SkRRect_Construct","C_SkRRect_Equals","C_SkRRect_dumpToString","C_SkRRect_getType","C_SkRRect_setRect","C_SkRect_round","C_SkRect_roundIn","C_SkRect_roundOut","C_SkRefCntBase_ref","C_SkRefCntBase_unique","C_SkRefCntBase_unref","C_SkRegion_Cliperator_destruct","C_SkRegion_Equals","C_SkRegion_Iterator_Construct","C_SkRegion_Iterator_destruct","C_SkRegion_Iterator_rgn","C_SkRegion_Spanerator_destruct","C_SkRegion_destruct","C_SkRegion_quickContains","C_SkRegion_set","C_SkRuntimeEffect_MakeForBlender","C_SkRuntimeEffect_MakeForColorFilter","C_SkRuntimeEffect_MakeForShader","C_SkRuntimeEffect_allowBlender","C_SkRuntimeEffect_allowColorFilter","C_SkRuntimeEffect_allowShader","C_SkRuntimeEffect_children","C_SkRuntimeEffect_findChild","C_SkRuntimeEffect_findUniform","C_SkRuntimeEffect_makeBlender","C_SkRuntimeEffect_makeColorFilter","C_SkRuntimeEffect_makeImage","C_SkRuntimeEffect_makeShader","C_SkRuntimeEffect_source","C_SkRuntimeEffect_uniforms","C_SkSVGCanvas_Make","C_SkShaderMaskFilter_Make","C_SkShader_Deserialize","C_SkShader_isAImage","C_SkShader_isOpaque","C_SkShader_makeWithColorFilter","C_SkShader_makeWithLocalMatrix","C_SkShaders_Blend","C_SkShaders_Color","C_SkShaders_Color2","C_SkShaders_Empty","C_SkSize_toCeil","C_SkSize_toFloor","C_SkSize_toRound","C_SkStreamAsset_getLength","C_SkStream_delete","C_SkStream_read","C_SkString_c_str_size","C_SkString_destruct","C_SkStrings_construct","C_SkStrings_destruct","C_SkStrings_ptr_count","C_SkStrokeAndFillePathEffect_Make","C_SkStrokePathEffect_Make","C_SkStrokeRec_copy","C_SkStrokeRec_destruct","C_SkStrokeRec_getCap","C_SkStrokeRec_getJoin","C_SkStrokeRec_hasEqualEffect","C_SkSurfaceCharacterization_Construct","C_SkSurfaceCharacterization_CopyConstruct","C_SkSurfaceCharacterization_createColorSpace","C_SkSurfaceCharacterization_destruct","C_SkSurfaceCharacterization_equals","C_SkSurfaceProps_Equals","C_SkSurface_MakeNull","C_SkSurface_MakeRaster","C_SkSurface_MakeRasterDirect","C_SkSurface_MakeRasterN32Premul","C_SkSurface_draw","C_SkSurface_height","C_SkSurface_imageInfo","C_SkSurface_makeImageSnapshot","C_SkSurface_makeSurface","C_SkSurface_makeSurface2","C_SkSurface_props","C_SkSurface_width","C_SkTextBlobBuilder_destruct","C_SkTextBlobBuilder_make","C_SkTextBlob_Iter_destruct","C_SkTextBlob_MakeFromPosText","C_SkTextBlob_MakeFromPosTextH","C_SkTextBlob_MakeFromRSXform","C_SkTextBlob_MakeFromText","C_SkTextBlob_ref","C_SkTextBlob_unique","C_SkTextBlob_unref","C_SkTrimPathEffect_Make","C_SkTypeface_LocalizedStrings_next","C_SkTypeface_LocalizedStrings_unref","C_SkTypeface_MakeDefault","C_SkTypeface_MakeDeserialize","C_SkTypeface_MakeFromData","C_SkTypeface_MakeFromName","C_SkTypeface_copyTableData","C_SkTypeface_getBounds","C_SkTypeface_isBold","C_SkTypeface_isItalic","C_SkTypeface_makeClone","C_SkTypeface_openStream","C_SkTypeface_serialize","C_SkVertices_Builder_destruct","C_SkVertices_Builder_detach","C_SkVertices_MakeCopy","C_SkVertices_ref","C_SkVertices_unique","C_SkVertices_unref","C_SkWStream_destruct","C_SkWStream_write","C_SkYUVAInfo_Construct","C_SkYUVAInfo_NumChannelsInPlane","C_SkYUVAInfo_NumPlanes","C_SkYUVAInfo_PlaneSubsamplingFactors","C_SkYUVAInfo_SubsamplingFactors","C_SkYUVAInfo_destruct","C_SkYUVAInfo_equals","C_SkYUVAInfo_makeDimensions","C_SkYUVAInfo_makeSubsampling","C_SkYUVAPixmapInfo_Construct","C_SkYUVAPixmapInfo_DefaultColorTypeForDataType","C_SkYUVAPixmapInfo_NumChannelsAndDataType","C_SkYUVAPixmapInfo_SupportedDataTypes_All","C_SkYUVAPixmapInfo_SupportedDataTypes_Construct","C_SkYUVAPixmapInfo_SupportedDataTypes_destruct","C_SkYUVAPixmapInfo_SupportedDataTypes_supported","C_SkYUVAPixmapInfo_destruct","C_SkYUVAPixmapInfo_equals","C_SkYUVAPixmapInfo_isValid","C_SkYUVAPixmapInfo_planeInfo","C_SkYUVAPixmapInfo_rowBytes","C_SkYUVAPixmaps_Allocate","C_SkYUVAPixmaps_Construct","C_SkYUVAPixmaps_FromData","C_SkYUVAPixmaps_FromExternalMemory","C_SkYUVAPixmaps_FromExternalPixmaps","C_SkYUVAPixmaps_MakeCopy","C_SkYUVAPixmaps_destruct","C_SkYUVAPixmaps_isValid","C_SkYUVAPixmaps_pixmapsInfo","C_SkYUVAPixmaps_planes","C_Utils_Types","C_string_ptr_size","C_string_view_ptr_size","Center","Center","Centered","Circle","Claimed","Clamp","Clear","Close","Close","CoeffCount","Color","Color","ColorBurn","ColorDodge","ColorFilter","Complex","ComputeTonalColors","Conic","Conic","Conical","ConvertConicToQuads","CouldNotRewind","Create","CreateClip","CreateEmpty","CreateGamma","CubeRoot","Cubic","Cubic","DA","DC","DNG","Darken","Decal","Default","Default","Default","Default","Deserialize","Deserialize","Deserialize","Deserialize","Deserialize","Deserialize","Difference","Difference","Difference","Difference","Difference","Disallow","Discard","DoIncludeData","Done","Done","DontIncludeData","Draw","DrawShadow","Dst","DstATop","DstIn","DstOut","DstOver","DumpMemoryStatistics","ETC1","ETC2_RGB8_UNORM","Empty","End","Equal","Equals","ErrorInInput","EvenOdd","Exclusion","Extend","F16","FILE","FactoryToName","Fast","Fill","Fill","Fill","Fill","FixedColor","Float","Float16","Float16","Float2","Float2x2","Float3","Float3x3","Float4","Float4x4","Forward","FromData","FromExternalMemory","FromExternalPixmaps","FromSVGString","Full","G","GIF","GetFontCacheCountLimit","GetFontCacheCountUsed","GetFontCacheLimit","GetFontCacheUsed","GetInflationRadius","GetInflationRadius1","GetLocalBounds","GetOpenTypeSVGDecoderFactory","GetPath","GetResourceCacheSingleAllocationByteLimit","GetResourceCacheTotalByteLimit","GetResourceCacheTotalBytesUsed","GetVariableColrV1Enabled","GetYUVALocations","GrBackendSemaphore","GrBackendTexture","GrContextPriv","GrContextThreadSafeProxy","GrContextThreadSafeProxyPriv","GrContext_Base","GrDirectContext","GrImageContext","GrImageContextPriv","GrRecordingContext","GrRecordingContextPriv","GrSurfaceOrigin","HEIF","Hairline","Hairline","HardLight","HasAlpha","Hue","I","ICO","IDA","IDC","ISA","ISC","Identity","IncludeDataIfLocal","IncompleteInput","Init","InitEffects","InitImageFilters","Inner","Int","Int2","Int3","Int4","InternalError","Intersect","Intersect","Intersect","Intersect","InvalidConversion","InvalidInput","InvalidMatrix","InvalidParameters","InvalidScale","InverseEvenOdd","InverseWinding","InvertBrightness","InvertLightness","Inverted","IsCubicDegenerate","IsLineDegenerate","IsQuadDegenerate","Italic","Italic","JPEG","JPEG","JPEGXL","JPEG_Full","KTX","Large","Large","Last","Last","Last","Last","Last","Last","Last","Last","Last","Last","Last","LastCoeffMode","LastEnum","LastEnum","LastEnum","LastEnum","LastEnum","LastMode","LastOp","LastSeparableMode","LastTileMode","LastType","Left","LeftBottom","LeftTop","Length","Length","Lighten","Line","Line","Line","Linear","Linear","Linear","Lines","LookAt","LowerLeft","LowerRight","Luminosity","MAX_POINTS","MAX_POINTS","Make","Make","Make","Make","Make","Make","Make","Make1","Make1","Make2","Make3","MakeA8","MakeA81","MakeArrayProc","MakeBlur","MakeCanvas","MakeClipTable","MakeCompose","MakeCopy","MakeCopy","MakeCopy","MakeCopyArray","MakeCopyArrays","MakeDefault","MakeDeserialize","MakeDirect","MakeEmpty","MakeEmpty","MakeForBlender","MakeForColorFilter","MakeForShader","MakeFromBitmap","MakeFromData","MakeFromData","MakeFromData","MakeFromData1","MakeFromEncoded","MakeFromEncoded","MakeFromFD","MakeFromFILE","MakeFromFile","MakeFromFile","MakeFromFileName","MakeFromGenerator","MakeFromMalloc","MakeFromName","MakeFromPicture","MakeFromPicture","MakeFromPosText","MakeFromPosTextH","MakeFromRSXform","MakeFromRaster","MakeFromStream","MakeFromStream","MakeFromStream","MakeFromStream","MakeFromText","MakeGammaTable","MakeLinear","MakeLinear1","MakeN32","MakeN321","MakeN32Premul","MakeN32Premul1","MakeN32Premul2","MakeN32Premul3","MakeNull","MakePlaceholder","MakeRGB","MakeRadial","MakeRadial1","MakeRaster","MakeRasterCopy","MakeRasterData","MakeRasterDirect","MakeRasterDirect","MakeRasterDirectReleaseProc","MakeRasterFromCompressed","MakeRasterN32Premul","MakeRenderTarget","MakeS32","MakeSRGB","MakeSRGBLinear","MakeSubset","MakeSum","MakeSweep","MakeSweep1","MakeTraced","MakeTwoPointConical","MakeTwoPointConical1","MakeUninitialized","MakeUnknown","MakeWithCString","MakeWithCopy","MakeWithProc","MakeZeroInitialized","Max_EnumValue","Mirror","Miter","Mode","Modulate","Morph","Move","Move","Multiply","NameToFactory","Nearest","Nearest","NinePatch","No","No","No","No","NoAccess","NoInvert","None","None","None","None","Normal","Normal","Normal","Normal","Normalize","NotStarted","NumChannelsAndDataType","Oblique","One","Op","Opaque","Outer","Oval","Oval","Oval1","Overlay","PKM","PNG","Perspective","PlaneDimensions","PlaneSubsamplingFactors","Plus","Points","Polygon","Polygon","PreferAnimation","PreferStillImage","Premul","Present","PurgeAllCaches","PurgeFontCache","PurgeResourceCache","Quad","Quad","R","RGBtoYUV","RRect","RRect1","RRect2","Radial","Rec601","Rec601_Limited","Rec709","Rec709_Full","Rec709_Limited","RecommendedRGBAColorType","Rect","Rect","RectToRect","RefDefault","RefEmpty","Register","Register","RegisterFlattenables","Relative","Repeat","Replace","ResultToString","Retain","Reverse","ReverseDifference","ReverseDifference","ReverseDifference","Right","RightBottom","RightTop","Rotate","Round","Round","RustStream","RustStream_RustStream","RustStream_getLength","RustStream_hasLength","RustStream_isAtEnd","RustStream_move","RustStream_read","RustStream_rewind","RustStream_seek","SA","SC","SK_ColorBLACK","SK_ColorBLUE","SK_ColorCYAN","SK_ColorDKGRAY","SK_ColorGRAY","SK_ColorGREEN","SK_ColorLTGRAY","SK_ColorMAGENTA","SK_ColorRED","SK_ColorTRANSPARENT","SK_ColorWHITE","SK_ColorYELLOW","Saturation","Screen","SetAffineIdentity","SetFlags","SetFontCacheCountLimit","SetFontCacheLimit","SetImageGeneratorFromEncodedDataFactory","SetOpenTypeSVGDecoderFactory","SetResourceCacheSingleAllocationByteLimit","SetResourceCacheTotalByteLimit","SetVariableColrV1EnabledFunc","Shader","Simple","Simplify","SizeOfPackedUInt","Sk3DView","Sk3DView_Rec","Sk3DView_Sk3DView","Sk3DView_Sk3DView_destructor","Sk3DView_applyToCanvas","Sk3DView_dotWithNormal","Sk3DView_getMatrix","Sk3DView_restore","Sk3DView_rotateX","Sk3DView_rotateY","Sk3DView_rotateZ","Sk3DView_save","Sk3DView_translate","SkAdvancedTypefaceMetrics","SkAlphaType","SkAnnotateLinkToDestination","SkAnnotateNamedDestination","SkAnnotateRectWithURL","SkApplyPerspectiveClip","SkAutoCanvasRestore","SkAutoTMalloc","SkBBHFactory","SkBBoxHierarchy","SkBBoxHierarchy_Metadata","SkBBoxHierarchy_insert1","SkBaseDevice","SkBitmap","SkBitmap_AllocFlags","SkBitmap_AllocFlags_kZeroPixels_AllocFlag","SkBitmap_Allocator","SkBitmap_Allocator_INHERITED","SkBitmap_HeapAllocator","SkBitmap_HeapAllocator_allocPixelRef","SkBitmap_SkBitmap","SkBitmap_SkBitmap1","SkBitmap_SkBitmap2","SkBitmap_SkBitmap_destructor","SkBitmap_allocN32Pixels","SkBitmap_allocPixels","SkBitmap_allocPixels1","SkBitmap_allocPixels2","SkBitmap_allocPixels3","SkBitmap_allocPixelsFlags","SkBitmap_asImage","SkBitmap_colorSpace","SkBitmap_erase","SkBitmap_erase1","SkBitmap_erase2","SkBitmap_eraseColor","SkBitmap_eraseColor1","SkBitmap_extractAlpha","SkBitmap_extractSubset","SkBitmap_getAddr","SkBitmap_getBounds","SkBitmap_getBounds1","SkBitmap_getGenerationID","SkBitmap_installMaskPixels","SkBitmap_installPixels","SkBitmap_installPixels1","SkBitmap_isImmutable","SkBitmap_makeShader","SkBitmap_notifyPixelsChanged","SkBitmap_peekPixels","SkBitmap_pixelRefOrigin","SkBitmap_readPixels","SkBitmap_readPixels1","SkBitmap_refColorSpace","SkBitmap_reset","SkBitmap_setAlphaType","SkBitmap_setImmutable","SkBitmap_setInfo","SkBitmap_setPixelRef","SkBitmap_setPixels","SkBitmap_swap","SkBitmap_tryAllocN32Pixels","SkBitmap_tryAllocPixels","SkBitmap_tryAllocPixels1","SkBitmap_tryAllocPixelsFlags","SkBitmap_writePixels","SkBlendMode","SkBlendModeCoeff","SkBlendMode_AsCoeff","SkBlendMode_Name","SkBlender","SkBlender","SkBlender_INHERITED","SkBlender_Mode","SkBlurStyle","SkBudgeted","SkCamera3D","SkCamera3D_SkCamera3D","SkCamera3D_patchToMatrix","SkCamera3D_reset","SkCamera3D_update","SkCanvas","SkCanvas_AutoUpdateQRBounds","SkCanvas_BackImage","SkCanvas_CheckForOverwrite","SkCanvas_ClipEdgeStyle","SkCanvas_DeviceCompatibleWithFilter","SkCanvas_INHERITED","SkCanvas_ImageSetEntry","SkCanvas_ImageSetEntry_ImageSetEntry","SkCanvas_ImageSetEntry_ImageSetEntry1","SkCanvas_ImageSetEntry_ImageSetEntry2","SkCanvas_ImageSetEntry_ImageSetEntry3","SkCanvas_ImageSetEntry_ImageSetEntry_destructor","SkCanvas_Lattice","SkCanvas_Lattice_RectType","SkCanvas_Layer","SkCanvas_Layer_Layer","SkCanvas_MCRec","SkCanvas_MCRec_MCRec","SkCanvas_MCRec_MCRec1","SkCanvas_MCRec_MCRec_destructor","SkCanvas_MCRec_newLayer","SkCanvas_MCRec_reset","SkCanvas_MakeRasterDirect","SkCanvas_PointMode","SkCanvas_QuadAAFlags","SkCanvas_QuadAAFlags_kAll_QuadAAFlags","SkCanvas_QuadAAFlags_kBottom_QuadAAFlag","SkCanvas_QuadAAFlags_kLeft_QuadAAFlag","SkCanvas_QuadAAFlags_kNone_QuadAAFlags","SkCanvas_QuadAAFlags_kRight_QuadAAFlag","SkCanvas_QuadAAFlags_kTop_QuadAAFlag","SkCanvas_SaveLayerFlags","SkCanvas_SaveLayerFlagsSet","SkCanvas_SaveLayerFlagsSet_kF16ColorType","SkCanvas_SaveLayerFlagsSet_kInitWithPrevious_SaveLayerFlag","SkCanvas_SaveLayerFlagsSet_kPreserveLCDText_SaveLayerFlag","SkCanvas_SaveLayerRec","SkCanvas_SaveLayerStrategy","SkCanvas_ShaderOverrideOpacity","SkCanvas_SkCanvas","SkCanvas_SkCanvas1","SkCanvas_SkCanvas2","SkCanvas_SkCanvas3","SkCanvas_SkCanvas4","SkCanvas_SkCanvas5","SkCanvas_SkCanvas_destructor","SkCanvas_SrcRectConstraint","SkCanvas__bindgen_vtable","SkCanvas_accessTopLayerPixels","SkCanvas_accessTopRasterHandle","SkCanvas_androidFramework_setDeviceClipRestriction","SkCanvas_clipPath","SkCanvas_clipRRect","SkCanvas_clipRect","SkCanvas_clipRegion","SkCanvas_clipShader","SkCanvas_concat","SkCanvas_concat1","SkCanvas_drawAnnotation","SkCanvas_drawArc","SkCanvas_drawAtlas","SkCanvas_drawCircle","SkCanvas_drawColor","SkCanvas_drawDRRect","SkCanvas_drawDrawable","SkCanvas_drawDrawable1","SkCanvas_drawGlyphs","SkCanvas_drawGlyphs1","SkCanvas_drawGlyphs2","SkCanvas_drawImage","SkCanvas_drawImageLattice","SkCanvas_drawImageNine","SkCanvas_drawImageRect","SkCanvas_drawImageRect1","SkCanvas_drawLine","SkCanvas_drawMesh","SkCanvas_drawOval","SkCanvas_drawPaint","SkCanvas_drawPatch","SkCanvas_drawPath","SkCanvas_drawPicture","SkCanvas_drawPoint","SkCanvas_drawPoints","SkCanvas_drawRRect","SkCanvas_drawRect","SkCanvas_drawRegion","SkCanvas_drawRoundRect","SkCanvas_drawSimpleText","SkCanvas_drawTextBlob","SkCanvas_drawVertices","SkCanvas_drawVertices1","SkCanvas_experimental_DrawEdgeAAImageSet","SkCanvas_experimental_DrawEdgeAAQuad","SkCanvas_flush","SkCanvas_getBaseLayerSize","SkCanvas_getBaseProps","SkCanvas_getDeviceClipBounds","SkCanvas_getLocalClipBounds","SkCanvas_getLocalToDevice","SkCanvas_getProps","SkCanvas_getSaveCount","SkCanvas_getSurface","SkCanvas_getTopProps","SkCanvas_getTotalMatrix","SkCanvas_imageInfo","SkCanvas_isClipEmpty","SkCanvas_isClipRect","SkCanvas_kMCRecCount","SkCanvas_kMCRecSize","SkCanvas_makeSurface","SkCanvas_onAccessTopLayerPixels","SkCanvas_onClipPath","SkCanvas_onClipRRect","SkCanvas_onClipRect","SkCanvas_onClipRegion","SkCanvas_onClipShader","SkCanvas_onDiscard","SkCanvas_onDrawAnnotation","SkCanvas_onDrawArc","SkCanvas_onDrawAtlas2","SkCanvas_onDrawBehind","SkCanvas_onDrawDRRect","SkCanvas_onDrawDrawable","SkCanvas_onDrawEdgeAAImageSet2","SkCanvas_onDrawEdgeAAQuad","SkCanvas_onDrawGlyphRunList","SkCanvas_onDrawImage2","SkCanvas_onDrawImageLattice2","SkCanvas_onDrawImageRect2","SkCanvas_onDrawMesh","SkCanvas_onDrawOval","SkCanvas_onDrawPaint","SkCanvas_onDrawPatch","SkCanvas_onDrawPath","SkCanvas_onDrawPicture","SkCanvas_onDrawPoints","SkCanvas_onDrawRRect","SkCanvas_onDrawRect","SkCanvas_onDrawRegion","SkCanvas_onDrawShadowRec","SkCanvas_onDrawTextBlob","SkCanvas_onDrawVerticesObject","SkCanvas_onFlush","SkCanvas_onGetProps","SkCanvas_onImageInfo","SkCanvas_onNewSurface","SkCanvas_onPeekPixels","SkCanvas_onResetClip","SkCanvas_peekPixels","SkCanvas_private_draw_shadow_rec","SkCanvas_quickReject","SkCanvas_quickReject1","SkCanvas_readPixels","SkCanvas_readPixels1","SkCanvas_readPixels2","SkCanvas_recorder","SkCanvas_recordingContext","SkCanvas_resetMatrix","SkCanvas_restore","SkCanvas_restoreToCount","SkCanvas_rotate","SkCanvas_rotate1","SkCanvas_save","SkCanvas_saveLayer","SkCanvas_saveLayer1","SkCanvas_saveLayerAlpha","SkCanvas_scale","SkCanvas_setMatrix","SkCanvas_setMatrix1","SkCanvas_skew","SkCanvas_temporary_internal_getRgnClip","SkCanvas_translate","SkCanvas_writePixels","SkCanvas_writePixels1","SkCapabilities","SkClipOp","SkCodec","SkCodecAnimation_Blend","SkCodecAnimation_DisposalMethod","SkCodec_FrameInfo","SkCodec_MakeFromData","SkCodec_MakeFromStream","SkCodec_Options","SkCodec_Register","SkCodec_Result","SkCodec_ResultToString","SkCodec_SelectionPolicy","SkCodec_SkCodec","SkCodec_SkCodec_destructor","SkCodec_SkScanlineOrder","SkCodec_XformFormat","SkCodec_XformTime","SkCodec_ZeroInitialized","SkCodec__bindgen_vtable","SkCodec_applyColorXform","SkCodec_conversionSupported","SkCodec_getFrameInfo","SkCodec_getImage","SkCodec_getImage1","SkCodec_getPixels","SkCodec_getScanlines","SkCodec_getYUVAPlanes","SkCodec_kNoFrame","SkCodec_kRepetitionCountInfinite","SkCodec_onOutputScanline","SkCodec_outputScanline","SkCodec_queryYUVAInfo","SkCodec_rewindIfNeeded","SkCodec_setSrcXformFormat","SkCodec_skipScanlines","SkCodec_startIncrementalDecode","SkCodec_startScanlineDecode","SkColor","SkColor4f","SkColorChannel","SkColorChannelFlag","SkColorFilter","SkColorFilter","SkColorFilter_Deserialize","SkColorFilter_INHERITED","SkColorFilter_asAColorMatrix","SkColorFilter_asAColorMode","SkColorFilter_filterColor","SkColorFilter_filterColor4f","SkColorFilter_isAlphaUnchanged","SkColorFilter_makeComposed","SkColorInfo","SkColorInfo_SkColorInfo","SkColorInfo_SkColorInfo1","SkColorInfo_SkColorInfo2","SkColorInfo_SkColorInfo3","SkColorInfo_SkColorInfo_destructor","SkColorInfo_bytesPerPixel","SkColorInfo_colorSpace","SkColorInfo_gammaCloseToSRGB","SkColorInfo_makeAlphaType","SkColorInfo_makeColorSpace","SkColorInfo_makeColorType","SkColorInfo_refColorSpace","SkColorInfo_shiftPerPixel","SkColorMatrix","SkColorMatrix_RGBtoYUV","SkColorMatrix_YUVtoRGB","SkColorMatrix_postTranslate","SkColorMatrix_setConcat","SkColorMatrix_setIdentity","SkColorMatrix_setSaturation","SkColorMatrix_setScale","SkColorSpace","SkColorSpacePrimaries","SkColorSpacePrimaries_toXYZD50","SkColorSpace_Deserialize","SkColorSpace_Equals","SkColorSpace_Make","SkColorSpace_MakeRGB","SkColorSpace_MakeSRGB","SkColorSpace_MakeSRGBLinear","SkColorSpace_gammaCloseToSRGB","SkColorSpace_gammaIsLinear","SkColorSpace_gamutTransformTo","SkColorSpace_invTransferFn","SkColorSpace_isNumericalTransferFn","SkColorSpace_isSRGB","SkColorSpace_makeColorSpin","SkColorSpace_makeLinearGamma","SkColorSpace_makeSRGBGamma","SkColorSpace_serialize","SkColorSpace_toProfile","SkColorSpace_toXYZD50","SkColorSpace_transferFn","SkColorSpace_transferFn1","SkColorSpace_writeToMemory","SkColorType","SkColorTypeBytesPerPixel","SkColorTypeIsAlwaysOpaque","SkColorTypeValidateAlphaType","SkContourMeasure","SkContourMeasureIter","SkContourMeasureIter_Impl","SkContourMeasureIter_SkContourMeasureIter","SkContourMeasureIter_SkContourMeasureIter1","SkContourMeasureIter_SkContourMeasureIter_destructor","SkContourMeasureIter_next","SkContourMeasureIter_reset","SkContourMeasure_MatrixFlags","SkContourMeasure_MatrixFlags_kGetPosAndTan_MatrixFlag","SkContourMeasure_MatrixFlags_kGetPosition_MatrixFlag","SkContourMeasure_MatrixFlags_kGetTangent_MatrixFlag","SkContourMeasure_Segment","SkContourMeasure_Segment_getScalarT","SkContourMeasure_getMatrix","SkContourMeasure_getPosTan","SkContourMeasure_getSegment","SkCoverageMode","SkCubicMap","SkCubicMap_SkCubicMap","SkCubicMap_Type","SkCubicMap_computeFromT","SkCubicMap_computeYFromX","SkCubicResampler","SkCustomTypefaceBuilder","SkCustomTypefaceBuilder_GlyphRec","SkCustomTypefaceBuilder_SkCustomTypefaceBuilder","SkCustomTypefaceBuilder_detach","SkCustomTypefaceBuilder_setFontStyle","SkCustomTypefaceBuilder_setGlyph","SkCustomTypefaceBuilder_setMetrics","SkData","SkDataTable","SkDataTable_Dir","SkDataTable_FreeProc","SkDataTable_INHERITED","SkDataTable_MakeArrayProc","SkDataTable_MakeCopyArray","SkDataTable_MakeCopyArrays","SkDataTable_MakeEmpty","SkDataTable__bindgen_ty_1","SkDataTable_at","SkDataTable_atSize","SkData_INHERITED","SkData_MakeEmpty","SkData_MakeFromFD","SkData_MakeFromFILE","SkData_MakeFromFileName","SkData_MakeFromMalloc","SkData_MakeFromStream","SkData_MakeSubset","SkData_MakeUninitialized","SkData_MakeWithCString","SkData_MakeWithCopy","SkData_MakeWithProc","SkData_MakeZeroInitialized","SkData_ReleaseProc","SkData_copyRange","SkData_equals","SkDeferredDisplayList","SkDeferredDisplayListPriv","SkDeferredDisplayListRecorder","SkDeferredDisplayListRecorder_SkDeferredDisplayListRecorder","SkDeferredDisplayListRecorder_SkDeferredDisplayListRecorder_destructor","SkDeferredDisplayListRecorder_detach","SkDeferredDisplayListRecorder_getCanvas","SkDeferredDisplayList_LazyProxyData","SkDeferredDisplayList_SkDeferredDisplayList_destructor","SkDeque","SkDeque_Block","SkDeque_F2BIter","SkDeque_F2BIter_INHERITED","SkDeque_Iter","SkDeque_Iter_Iter","SkDeque_Iter_Iter1","SkDeque_Iter_IterStart","SkDeque_Iter_next","SkDeque_Iter_prev","SkDeque_Iter_reset","SkDeque_SkDeque","SkDeque_SkDeque1","SkDeque_SkDeque_destructor","SkDeque_pop_back","SkDeque_pop_front","SkDeque_push_back","SkDeque_push_front","SkDescriptor","SkDeserialProcs","SkDocument","SkDocument_INHERITED","SkDocument_SkDocument","SkDocument_SkDocument_destructor","SkDocument_State","SkDocument_abort","SkDocument_beginPage","SkDocument_close","SkDocument_endPage","SkDrawLooper","SkDrawShadowRec","SkDrawable","SkDrawable","SkDrawable_GpuDrawHandler","SkDrawable_SkDrawable","SkDrawable_approximateBytesUsed","SkDrawable_draw","SkDrawable_draw1","SkDrawable_getBounds","SkDrawable_getGenerationID","SkDrawable_newPictureSnapshot","SkDrawable_notifyDrawingChanged","SkDrawable_onApproximateBytesUsed","SkDrawable_onNewPictureSnapshot","SkDynamicMemoryWStream","SkDynamicMemoryWStream_Block","SkDynamicMemoryWStream_INHERITED","SkDynamicMemoryWStream_SkDynamicMemoryWStream","SkDynamicMemoryWStream_SkDynamicMemoryWStream_destructor","SkDynamicMemoryWStream_bytesWritten","SkDynamicMemoryWStream_copyTo","SkDynamicMemoryWStream_copyToAndReset","SkDynamicMemoryWStream_detachAsData","SkDynamicMemoryWStream_detachAsStream","SkDynamicMemoryWStream_padToAlign4","SkDynamicMemoryWStream_prependToAndReset","SkDynamicMemoryWStream_read","SkDynamicMemoryWStream_reset","SkDynamicMemoryWStream_write","SkDynamicMemoryWStream_writeToAndReset","SkDynamicMemoryWStream_writeToAndReset1","SkDynamicMemoryWStream_writeToStream","SkEncodedImageFormat","SkEncodedInfo","SkEncodedInfo_Alpha","SkEncodedInfo_Color","SkEncodedInfo_ICCProfile","SkEncodedInfo_ICCProfile_Make","SkEncodedInfo_ICCProfile_Make1","SkEncodedOrigin","SkExecutor","SkFilterMode","SkFlattenable","SkFlattenable_Deserialize","SkFlattenable_Factory","SkFlattenable_FactoryToName","SkFlattenable_INHERITED","SkFlattenable_NameToFactory","SkFlattenable_PrivateInitializer","SkFlattenable_PrivateInitializer_InitEffects","SkFlattenable_PrivateInitializer_InitImageFilters","SkFlattenable_Register","SkFlattenable_Type","SkFlattenable_serialize","SkFlattenable_serialize1","SkFont","SkFontArguments","SkFontArguments_Palette","SkFontArguments_Palette_Override","SkFontArguments_VariationPosition","SkFontArguments_VariationPosition_Coordinate","SkFontDescriptor","SkFontHinting","SkFontMetrics","SkFontMetrics_FontMetricsFlags","SkFontMetrics_FontMetricsFlags_kBoundsInvalid_Flag","SkFontMetrics_FontMetricsFlags_kStrikeoutPositionIsValid_Flag","SkFontMetrics_FontMetricsFlags_kStrikeoutThicknessIsValid_Flag","SkFontMetrics_FontMetricsFlags_kUnderlinePositionIsValid_Flag","SkFontMetrics_FontMetricsFlags_kUnderlineThicknessIsValid_Flag","SkFontMgr","SkFontMgr_INHERITED","SkFontMgr_RefDefault","SkFontMgr_RefEmpty","SkFontMgr_countFamilies","SkFontMgr_createStyleSet","SkFontMgr_getFamilyName","SkFontMgr_legacyMakeTypeface","SkFontMgr_makeFromData","SkFontMgr_makeFromFile","SkFontMgr_makeFromStream","SkFontMgr_makeFromStream1","SkFontMgr_matchFamily","SkFontMgr_matchFamilyStyle","SkFontMgr_matchFamilyStyleCharacter","SkFontParameters_Variation_Axis","SkFontParameters_Variation_Axis_HIDDEN","SkFontStyle","SkFontStyleSet","SkFontStyleSet_CreateEmpty","SkFontStyleSet_INHERITED","SkFontStyleSet_matchStyleCSS3","SkFontStyle_Slant","SkFontStyle_Weight","SkFontStyle_Width","SkFontTableTag","SkFont_Edging","SkFont_PrivFlags","SkFont_PrivFlags_kBaselineSnap_PrivFlag","SkFont_PrivFlags_kEmbeddedBitmaps_PrivFlag","SkFont_PrivFlags_kEmbolden_PrivFlag","SkFont_PrivFlags_kForceAutoHinting_PrivFlag","SkFont_PrivFlags_kLinearMetrics_PrivFlag","SkFont_PrivFlags_kSubpixel_PrivFlag","SkFont_SkFont","SkFont_SkFont1","SkFont_SkFont2","SkFont_SkFont3","SkFont_dump","SkFont_getIntercepts","SkFont_getMetrics","SkFont_getPath","SkFont_getPaths","SkFont_getPos","SkFont_getTypefaceOrDefault","SkFont_getWidthsBounds","SkFont_getXPos","SkFont_kAllFlags","SkFont_makeWithSize","SkFont_measureText","SkFont_refTypefaceOrDefault","SkFont_setBaselineSnap","SkFont_setEdging","SkFont_setEmbeddedBitmaps","SkFont_setEmbolden","SkFont_setForceAutoHinting","SkFont_setHinting","SkFont_setLinearMetrics","SkFont_setScaleX","SkFont_setSize","SkFont_setSkewX","SkFont_setSubpixel","SkFont_sk_is_trivially_relocatable","SkFont_textToGlyphs","SkFont_unicharToGlyph","SkFont_unicharsToGlyphs","SkFourByteTag","SkGlyphID","SkGradientShader","SkGradientShader_Flags","SkGradientShader_Flags_kInterpolateColorsInPremul_Flag","SkGradientShader_Interpolation","SkGradientShader_Interpolation_InPremul","SkGradientShader_MakeLinear","SkGradientShader_MakeLinear1","SkGradientShader_MakeRadial","SkGradientShader_MakeRadial1","SkGradientShader_MakeSweep","SkGradientShader_MakeSweep1","SkGradientShader_MakeTwoPointConical","SkGradientShader_MakeTwoPointConical1","SkGraphics","SkGraphics_AllowJIT","SkGraphics_DumpMemoryStatistics","SkGraphics_GetFontCacheCountLimit","SkGraphics_GetFontCacheCountUsed","SkGraphics_GetFontCacheLimit","SkGraphics_GetFontCacheUsed","SkGraphics_GetOpenTypeSVGDecoderFactory","SkGraphics_GetResourceCacheSingleAllocationByteLimit","SkGraphics_GetResourceCacheTotalByteLimit","SkGraphics_GetResourceCacheTotalBytesUsed","SkGraphics_GetVariableColrV1Enabled","SkGraphics_ImageGeneratorFromEncodedDataFactory","SkGraphics_Init","SkGraphics_OpenTypeSVGDecoderFactory","SkGraphics_PurgeAllCaches","SkGraphics_PurgeFontCache","SkGraphics_PurgeResourceCache","SkGraphics_SetFlags","SkGraphics_SetFontCacheCountLimit","SkGraphics_SetFontCacheLimit","SkGraphics_SetImageGeneratorFromEncodedDataFactory","SkGraphics_SetOpenTypeSVGDecoderFactory","SkGraphics_SetResourceCacheSingleAllocationByteLimit","SkGraphics_SetResourceCacheTotalByteLimit","SkGraphics_SetVariableColrV1EnabledFunc","SkGraphics_VariableColrV1EnabledFunc","SkHSVToColor","SkHighContrastConfig","SkHighContrastConfig_InvertStyle","SkIDChangeListener","SkIDChangeListener_List","SkIDChangeListener_List_List","SkIDChangeListener_List_List_destructor","SkIDChangeListener_List_add","SkIDChangeListener_List_changed","SkIDChangeListener_List_count","SkIDChangeListener_List_reset","SkIDChangeListener_SkIDChangeListener","SkIDChangeListener_SkIDChangeListener_destructor","SkIPoint","SkIRect","SkIRect_intersect","SkIRect_join","SkISize","SkImage","SkImageFilter","SkImageFilter","SkImageFilter_INHERITED","SkImageFilter_MapDirection","SkImageFilter_asAColorFilter","SkImageFilter_canComputeFastBounds","SkImageFilter_computeFastBounds","SkImageFilter_countInputs","SkImageFilter_filterBounds","SkImageFilter_getInput","SkImageFilter_isColorFilterNode","SkImageFilter_makeWithLocalMatrix","SkImageFilters_CropRect","SkImageFilters_Dither","SkImageGenerator","SkImageGenerator_MakeFromEncoded","SkImageGenerator_MakeFromPicture","SkImageGenerator_Options","SkImageGenerator_SkImageGenerator","SkImageGenerator__bindgen_vtable","SkImageGenerator_getPixels","SkImageGenerator_getYUVAPlanes","SkImageGenerator_kNeedNewImageUniqueID","SkImageGenerator_queryYUVAInfo","SkImageInfo","SkImageInfo_Make","SkImageInfo_Make1","SkImageInfo_Make2","SkImageInfo_Make3","SkImageInfo_MakeA8","SkImageInfo_MakeA81","SkImageInfo_MakeN32","SkImageInfo_MakeN321","SkImageInfo_MakeN32Premul","SkImageInfo_MakeN32Premul1","SkImageInfo_MakeN32Premul2","SkImageInfo_MakeN32Premul3","SkImageInfo_MakeS32","SkImageInfo_MakeUnknown","SkImageInfo_colorSpace","SkImageInfo_computeByteSize","SkImageInfo_computeOffset","SkImageInfo_makeColorSpace","SkImageInfo_refColorSpace","SkImage_AsyncReadResult","SkImage_AsyncReadResult__bindgen_vtable","SkImage_BackendTextureReleaseProc","SkImage_BitDepth","SkImage_CachingHint","SkImage_CompressionType","SkImage_CubicResampler","SkImage_INHERITED","SkImage_LegacyBitmapMode","SkImage_MakeFromBitmap","SkImage_MakeFromEncoded","SkImage_MakeFromGenerator","SkImage_MakeFromPicture","SkImage_MakeFromRaster","SkImage_MakeRasterCopy","SkImage_MakeRasterData","SkImage_MakeRasterFromCompressed","SkImage_RasterReleaseProc","SkImage_ReadPixelsCallback","SkImage_ReadPixelsContext","SkImage_ReleaseContext","SkImage_RescaleGamma","SkImage_RescaleMode","SkImage_alphaType","SkImage_asLegacyBitmap","SkImage_asyncReadPixels","SkImage_asyncRescaleAndReadPixels","SkImage_asyncRescaleAndReadPixelsYUV420","SkImage_colorSpace","SkImage_colorType","SkImage_encodeToData","SkImage_encodeToData1","SkImage_hasMipmaps","SkImage_isAlphaOnly","SkImage_isLazyGenerated","SkImage_isTextureBacked","SkImage_isValid","SkImage_kCompressionTypeCount","SkImage_kETC1_CompressionType","SkImage_makeColorSpace","SkImage_makeColorTypeAndColorSpace","SkImage_makeNonTextureImage","SkImage_makeRasterImage","SkImage_makeRawShader","SkImage_makeShader","SkImage_makeSubset","SkImage_makeWithFilter","SkImage_peekPixels","SkImage_readPixels","SkImage_readPixels1","SkImage_readPixels2","SkImage_readPixels3","SkImage_refColorSpace","SkImage_refEncodedData","SkImage_reinterpretColorSpace","SkImage_scalePixels","SkImage_withDefaultMipmaps","SkM44","SkM44_LookAt","SkM44_NaN_Constructor","SkM44_Perspective","SkM44_RectToRect","SkM44_Uninitialized_Constructor","SkM44_dump","SkM44_getRowMajor","SkM44_invert","SkM44_map","SkM44_normalizePerspective","SkM44_postTranslate","SkM44_preConcat","SkM44_preScale","SkM44_preScale1","SkM44_preTranslate","SkM44_setConcat","SkM44_setRotate","SkM44_setRotateUnitSinCos","SkM44_transpose","SkMask","SkMaskFilter","SkMaskFilter","SkMaskFilter_Deserialize","SkMaskFilter_MakeBlur","SkMaskFilter_approximateFilteredBounds","SkMatrix","SkMatrix_I","SkMatrix_InvalidMatrix","SkMatrix_MapPtsProc","SkMatrix_MapXYProc","SkMatrix_ScaleToFit","SkMatrix_SetAffineIdentity","SkMatrix_TypeMask","SkMatrix_TypeMask_kAffine_Mask","SkMatrix_TypeMask_kIdentity_Mask","SkMatrix_TypeMask_kPerspective_Mask","SkMatrix_TypeMask_kScale_Mask","SkMatrix_TypeMask_kTranslate_Mask","SkMatrix_asAffine","SkMatrix_decomposeScale","SkMatrix_dump","SkMatrix_gMapPtsProcs","SkMatrix_gMapXYProcs","SkMatrix_getMaxScale","SkMatrix_getMinMaxScales","SkMatrix_getMinScale","SkMatrix_isSimilarity","SkMatrix_kAScaleX","SkMatrix_kAScaleY","SkMatrix_kASkewX","SkMatrix_kASkewY","SkMatrix_kATransX","SkMatrix_kATransY","SkMatrix_kAllMasks","SkMatrix_kMPersp0","SkMatrix_kMPersp1","SkMatrix_kMPersp2","SkMatrix_kMScaleX","SkMatrix_kMScaleY","SkMatrix_kMSkewX","SkMatrix_kMSkewY","SkMatrix_kMTransX","SkMatrix_kMTransY","SkMatrix_kORableMasks","SkMatrix_kOnlyPerspectiveValid_Mask","SkMatrix_kRectStaysRect_Mask","SkMatrix_kUnknown_Mask","SkMatrix_mapHomogeneousPoints","SkMatrix_mapHomogeneousPoints1","SkMatrix_mapPoints","SkMatrix_mapRadius","SkMatrix_mapRect","SkMatrix_mapRectScaleTranslate","SkMatrix_mapVectors","SkMatrix_mapXY","SkMatrix_postConcat","SkMatrix_postRotate","SkMatrix_postRotate1","SkMatrix_postScale","SkMatrix_postScale1","SkMatrix_postSkew","SkMatrix_postSkew1","SkMatrix_postTranslate","SkMatrix_preConcat","SkMatrix_preRotate","SkMatrix_preRotate1","SkMatrix_preScale","SkMatrix_preScale1","SkMatrix_preSkew","SkMatrix_preSkew1","SkMatrix_preTranslate","SkMatrix_preservesRightAngles","SkMatrix_reset","SkMatrix_set9","SkMatrix_setAffine","SkMatrix_setConcat","SkMatrix_setPolyToPoly","SkMatrix_setRSXform","SkMatrix_setRectToRect","SkMatrix_setRotate","SkMatrix_setRotate1","SkMatrix_setScale","SkMatrix_setScale1","SkMatrix_setSinCos","SkMatrix_setSinCos1","SkMatrix_setSkew","SkMatrix_setSkew1","SkMatrix_setTranslate","SkMemoryStream","SkMemoryStream_INHERITED","SkMemoryStream_Make","SkMemoryStream_MakeCopy","SkMemoryStream_MakeDirect","SkMemoryStream_SkMemoryStream","SkMemoryStream_SkMemoryStream1","SkMemoryStream_SkMemoryStream2","SkMemoryStream_SkMemoryStream3","SkMemoryStream_getAtPos","SkMemoryStream_getLength","SkMemoryStream_getMemoryBase","SkMemoryStream_getPosition","SkMemoryStream_isAtEnd","SkMemoryStream_move","SkMemoryStream_peek","SkMemoryStream_read","SkMemoryStream_rewind","SkMemoryStream_seek","SkMemoryStream_setData","SkMemoryStream_setMemory","SkMemoryStream_setMemoryOwned","SkMemoryStream_skipToAlign4","SkMesh","SkMipmap","SkMipmapMode","SkMutex","SkNVRefCnt","SkNoncopyable","SkOnce","SkOnce_State","SkOpBuilder","SkOpBuilder_add","SkOpBuilder_resolve","SkOpenTypeSVGDecoder","SkOrderedFontMgr","SkOrderedFontMgr_SkOrderedFontMgr","SkOrderedFontMgr_SkOrderedFontMgr_destructor","SkOrderedFontMgr_append","SkOrderedFontMgr_onCountFamilies","SkOrderedFontMgr_onCreateStyleSet","SkOrderedFontMgr_onGetFamilyName","SkOrderedFontMgr_onLegacyMakeTypeface","SkOrderedFontMgr_onMakeFromData","SkOrderedFontMgr_onMakeFromFile","SkOrderedFontMgr_onMakeFromStreamArgs","SkOrderedFontMgr_onMakeFromStreamIndex","SkOrderedFontMgr_onMatchFamily","SkOrderedFontMgr_onMatchFamilyStyle","SkOrderedFontMgr_onMatchFamilyStyleCharacter","SkPDFArray","SkPDF_AttributeList","SkPDF_AttributeList_AttributeList","SkPDF_AttributeList_AttributeList_destructor","SkPDF_AttributeList_appendFloat","SkPDF_AttributeList_appendFloatArray","SkPDF_AttributeList_appendInt","SkPDF_AttributeList_appendName","SkPDF_AttributeList_appendNodeIdArray","SkPDF_Metadata","SkPDF_Metadata_Subsetter","SkPDF_StructureElementNode","SkPMColor","SkPaint","SkPaint_Cap","SkPaint_Join","SkPaint_SkPaint","SkPaint_SkPaint1","SkPaint_SkPaint2","SkPaint_SkPaint3","SkPaint_SkPaint_destructor","SkPaint_Style","SkPaint__bindgen_ty_1","SkPaint__bindgen_ty_1__bindgen_ty_1","SkPaint_asBlendMode","SkPaint_canComputeFastBounds","SkPaint_computeFastBounds","SkPaint_doComputeFastBounds","SkPaint_getBlendMode_or","SkPaint_getFillPath","SkPaint_getFillPath1","SkPaint_isSrcOver","SkPaint_kCapCount","SkPaint_kJoinCount","SkPaint_kStyleCount","SkPaint_nothingToDraw","SkPaint_refBlender","SkPaint_refColorFilter","SkPaint_refImageFilter","SkPaint_refMaskFilter","SkPaint_refPathEffect","SkPaint_refShader","SkPaint_reset","SkPaint_setARGB","SkPaint_setAlphaf","SkPaint_setBlendMode","SkPaint_setBlender","SkPaint_setColor","SkPaint_setColor1","SkPaint_setColorFilter","SkPaint_setImageFilter","SkPaint_setMaskFilter","SkPaint_setPathEffect","SkPaint_setShader","SkPaint_setStroke","SkPaint_setStrokeCap","SkPaint_setStrokeJoin","SkPaint_setStrokeMiter","SkPaint_setStrokeWidth","SkPaint_setStyle","SkPaint_sk_is_trivially_relocatable","SkParsePath","SkParsePath_FromSVGString","SkParsePath_PathEncoding","SkParsePath_ToSVGString","SkPatch3D","SkPatch3D_SkPatch3D","SkPatch3D_dotWith","SkPatch3D_reset","SkPatch3D_transform","SkPath","SkPath1DPathEffect_Style","SkPathBuilder","SkPathBuilder_ArcSize","SkPathBuilder_IsA","SkPathBuilder_SkPathBuilder","SkPathBuilder_SkPathBuilder1","SkPathBuilder_SkPathBuilder2","SkPathBuilder_SkPathBuilder_destructor","SkPathBuilder_addArc","SkPathBuilder_addCircle","SkPathBuilder_addOval","SkPathBuilder_addPath","SkPathBuilder_addPolygon","SkPathBuilder_addRRect","SkPathBuilder_addRect","SkPathBuilder_arcTo","SkPathBuilder_arcTo1","SkPathBuilder_arcTo2","SkPathBuilder_close","SkPathBuilder_computeBounds","SkPathBuilder_conicTo","SkPathBuilder_cubicTo","SkPathBuilder_detach","SkPathBuilder_incReserve","SkPathBuilder_lineTo","SkPathBuilder_moveTo","SkPathBuilder_offset","SkPathBuilder_polylineTo","SkPathBuilder_quadTo","SkPathBuilder_rConicTo","SkPathBuilder_rCubicTo","SkPathBuilder_rLineTo","SkPathBuilder_rQuadTo","SkPathBuilder_reset","SkPathBuilder_snapshot","SkPathDirection","SkPathEffect","SkPathEffect","SkPathEffect_DashInfo","SkPathEffect_DashType","SkPathEffect_Deserialize","SkPathEffect_INHERITED","SkPathEffect_MakeCompose","SkPathEffect_MakeSum","SkPathEffect_asADash","SkPathEffect_filterPath","SkPathEffect_filterPath1","SkPathEffect_needsCTM","SkPathFillType","SkPathMeasure","SkPathMeasure_MatrixFlags","SkPathMeasure_MatrixFlags_kGetPosAndTan_MatrixFlag","SkPathMeasure_MatrixFlags_kGetPosition_MatrixFlag","SkPathMeasure_MatrixFlags_kGetTangent_MatrixFlag","SkPathMeasure_SkPathMeasure","SkPathMeasure_SkPathMeasure1","SkPathMeasure_SkPathMeasure_destructor","SkPathMeasure_getLength","SkPathMeasure_getMatrix","SkPathMeasure_getPosTan","SkPathMeasure_getSegment","SkPathMeasure_isClosed","SkPathMeasure_nextContour","SkPathMeasure_setPath","SkPathOp","SkPathRef","SkPathSegmentMask","SkPathSegmentMask_kConic_SkPathSegmentMask","SkPathSegmentMask_kCubic_SkPathSegmentMask","SkPathSegmentMask_kLine_SkPathSegmentMask","SkPathSegmentMask_kQuad_SkPathSegmentMask","SkPathVerb","SkPath_AddPathMode","SkPath_ArcSize","SkPath_Circle","SkPath_ConvertConicToQuads","SkPath_IsCubicDegenerate","SkPath_IsLineDegenerate","SkPath_IsQuadDegenerate","SkPath_Iter","SkPath_Iter_Iter","SkPath_Iter_Iter1","SkPath_Iter_isClosedContour","SkPath_Iter_next","SkPath_Iter_setPath","SkPath_Make","SkPath_Oval","SkPath_Oval1","SkPath_Polygon","SkPath_RRect","SkPath_RRect1","SkPath_RRect2","SkPath_RangeIter","SkPath_RawIter","SkPath_RawIter_next","SkPath_RawIter_setPath","SkPath_Rect","SkPath_SegmentMask","SkPath_SegmentMask_kConic_SegmentMask","SkPath_SegmentMask_kCubic_SegmentMask","SkPath_SegmentMask_kLine_SegmentMask","SkPath_SegmentMask_kQuad_SegmentMask","SkPath_SkPath","SkPath_SkPath1","SkPath_SkPath_destructor","SkPath_Verb","SkPath_addArc","SkPath_addCircle","SkPath_addOval","SkPath_addOval1","SkPath_addPath","SkPath_addPath1","SkPath_addPoly","SkPath_addRRect","SkPath_addRRect1","SkPath_addRect","SkPath_addRoundRect","SkPath_addRoundRect1","SkPath_approximateBytesUsed","SkPath_arcTo","SkPath_arcTo1","SkPath_arcTo2","SkPath_close","SkPath_computeTightBounds","SkPath_conicTo","SkPath_conservativelyContainsRect","SkPath_contains","SkPath_countPoints","SkPath_countVerbs","SkPath_cubicTo","SkPath_dump","SkPath_dumpArrays","SkPath_getBounds","SkPath_getGenerationID","SkPath_getLastPt","SkPath_getPoint","SkPath_getPoints","SkPath_getSegmentMasks","SkPath_getVerbs","SkPath_incReserve","SkPath_interpolate","SkPath_isConvex","SkPath_isEmpty","SkPath_isFinite","SkPath_isInterpolatable","SkPath_isLastContourClosed","SkPath_isLine","SkPath_isOval","SkPath_isRRect","SkPath_isRect","SkPath_isValid","SkPath_lineTo","SkPath_moveTo","SkPath_offset","SkPath_quadTo","SkPath_rArcTo","SkPath_rConicTo","SkPath_rCubicTo","SkPath_rLineTo","SkPath_rMoveTo","SkPath_rQuadTo","SkPath_readFromMemory","SkPath_reset","SkPath_reverseAddPath","SkPath_rewind","SkPath_serialize","SkPath_setLastPt","SkPath_sk_is_trivially_relocatable","SkPath_swap","SkPath_transform","SkPath_writeToMemory","SkPicture","SkPictureRecorder","SkPictureRecorder_FinishFlags","SkPictureRecorder_SkPictureRecorder","SkPictureRecorder_SkPictureRecorder_destructor","SkPictureRecorder_beginRecording","SkPictureRecorder_beginRecording1","SkPictureRecorder_finishRecordingAsDrawable","SkPictureRecorder_finishRecordingAsPicture","SkPictureRecorder_finishRecordingAsPictureWithCull","SkPictureRecorder_getRecordingCanvas","SkPicture_AbortCallback","SkPicture_MakeFromData","SkPicture_MakeFromData1","SkPicture_MakeFromStream","SkPicture_MakePlaceholder","SkPicture_SkPicture_destructor","SkPicture_makeShader","SkPicture_serialize","SkPicture_serialize1","SkPixelGeometry","SkPixelRef","SkPixelRef_INHERITED","SkPixelRef_Mutability","SkPixelRef_SkPixelRef","SkPixelRef_SkPixelRef_destructor","SkPixelRef_addGenIDChangeListener","SkPixelRef_android_only_reset","SkPixelRef_getGenerationID","SkPixelRef_notifyPixelsChanged","SkPixelRef_setImmutable","SkPixmap","SkPixmap_colorSpace","SkPixmap_computeIsOpaque","SkPixmap_erase","SkPixmap_erase1","SkPixmap_extractSubset","SkPixmap_getAlphaf","SkPixmap_getColor","SkPixmap_getColor4f","SkPixmap_readPixels","SkPixmap_refColorSpace","SkPixmap_reset","SkPixmap_reset1","SkPixmap_reset2","SkPixmap_scalePixels","SkPixmap_setColorSpace","SkPngChunkReader","SkPoint","SkPoint3","SkPoint3_Length","SkPoint3_normalize","SkPoint_Length","SkPoint_Normalize","SkPoint_normalize","SkPoint_scale","SkPoint_setLength","SkPoint_setLength1","SkPoint_setNormalize","SkPreMultiplyARGB","SkPreMultiplyColor","SkRGBA4f_FromBytes_RGBA","SkRGBA4f_FromColor","SkRGBA4f_FromPMColor","SkRGBA4f_toBytes_RGBA","SkRGBA4f_toSkColor","SkRGBToHSV","SkRRect","SkRRect_Corner","SkRRect_Type","SkRRect_contains","SkRRect_dump","SkRRect_dumpToString","SkRRect_inset","SkRRect_isValid","SkRRect_kSizeInMemory","SkRRect_readFromMemory","SkRRect_setNinePatch","SkRRect_setOval","SkRRect_setRectRadii","SkRRect_setRectXY","SkRRect_transform","SkRRect_writeToMemory","SkRSXform","SkRSXform_toQuad","SkRSXform_toTriStrip","SkRasterHandleAllocator","SkRasterHandleAllocator_Handle","SkRasterHandleAllocator_MakeCanvas","SkRasterHandleAllocator_Rec","SkReadBuffer","SkRecord","SkRecorder","SkRect","SkRect_dump","SkRect_intersect","SkRect_intersect1","SkRect_join","SkRect_setBoundsCheck","SkRect_setBoundsNoCheck","SkRect_toQuad","SkRefCnt","SkRefCntBase","SkRefCntBase__bindgen_vtable","SkRegion","SkRegion_Cliperator","SkRegion_Cliperator_Cliperator","SkRegion_Cliperator_next","SkRegion_Iterator","SkRegion_Iterator_Iterator","SkRegion_Iterator_next","SkRegion_Iterator_reset","SkRegion_Iterator_rewind","SkRegion_Op","SkRegion_RunHead","SkRegion_RunType","SkRegion_SkRegion","SkRegion_SkRegion1","SkRegion_SkRegion2","SkRegion_SkRegion_destructor","SkRegion_Spanerator","SkRegion_Spanerator_Spanerator","SkRegion_Spanerator_next","SkRegion_computeRegionComplexity","SkRegion_contains","SkRegion_contains1","SkRegion_contains2","SkRegion_getBoundaryPath","SkRegion_intersects","SkRegion_intersects1","SkRegion_kOpCnt","SkRegion_kOpCount","SkRegion_kRectRegionRuns","SkRegion_kRectRunHeadPtr","SkRegion_op","SkRegion_op1","SkRegion_op2","SkRegion_readFromMemory","SkRegion_setEmpty","SkRegion_setPath","SkRegion_setRect","SkRegion_setRects","SkRegion_setRegion","SkRegion_sk_is_trivially_relocatable","SkRegion_swap","SkRegion_translate","SkRegion_writeToMemory","SkRuntimeEffect","SkRuntimeEffect_Child","SkRuntimeEffect_ChildPtr","SkRuntimeEffect_ChildPtr_ChildPtr","SkRuntimeEffect_ChildPtr_blender","SkRuntimeEffect_ChildPtr_colorFilter","SkRuntimeEffect_ChildPtr_shader","SkRuntimeEffect_ChildPtr_sk_is_trivially_relocatable","SkRuntimeEffect_ChildPtr_type","SkRuntimeEffect_ChildType","SkRuntimeEffect_Flags","SkRuntimeEffect_Flags_kAllowBlender_Flag","SkRuntimeEffect_Flags_kAllowColorFilter_Flag","SkRuntimeEffect_Flags_kAllowShader_Flag","SkRuntimeEffect_Flags_kAlwaysOpaque_Flag","SkRuntimeEffect_Flags_kSamplesOutsideMain_Flag","SkRuntimeEffect_Flags_kUsesColorTransform_Flag","SkRuntimeEffect_Flags_kUsesSampleCoords_Flag","SkRuntimeEffect_MakeForBlender","SkRuntimeEffect_MakeForColorFilter","SkRuntimeEffect_MakeForShader","SkRuntimeEffect_MakeTraced","SkRuntimeEffect_Options","SkRuntimeEffect_RegisterFlattenables","SkRuntimeEffect_Result","SkRuntimeEffect_SkRuntimeEffect_destructor","SkRuntimeEffect_TracedShader","SkRuntimeEffect_Uniform","SkRuntimeEffect_Uniform_Flags","SkRuntimeEffect_Uniform_Flags_kArray_Flag","SkRuntimeEffect_Uniform_Flags_kColor_Flag","SkRuntimeEffect_Uniform_Flags_kFragment_Flag","SkRuntimeEffect_Uniform_Flags_kHalfPrecision_Flag","SkRuntimeEffect_Uniform_Flags_kVertex_Flag","SkRuntimeEffect_Uniform_Type","SkRuntimeEffect_Uniform_sizeInBytes","SkRuntimeEffect_findChild","SkRuntimeEffect_findUniform","SkRuntimeEffect_makeBlender","SkRuntimeEffect_makeColorFilter","SkRuntimeEffect_makeColorFilter1","SkRuntimeEffect_makeColorFilter2","SkRuntimeEffect_makeImage","SkRuntimeEffect_makeShader","SkRuntimeEffect_makeShader1","SkRuntimeEffect_source","SkRuntimeEffect_uniformSize","SkSL_DebugTrace","SkSL_Version","SkSVGCanvas","SkSVGCanvas_Make","SkSVGCanvas__bindgen_ty_1","SkSVGCanvas_kConvertTextToPaths_Flag","SkSVGCanvas_kNoPrettyXML_Flag","SkSVGCanvas_kRelativePathEncoding_Flag","SkSamplingOptions","SkScalar","SkScalerContext","SkScalerContextEffects","SkScalerContextRec","SkSerialProcs","SkShader","SkShader","SkShader_GradientInfo","SkShader_GradientType","SkShader_INHERITED","SkShader_isAImage","SkShader_makeWithColorFilter","SkShader_makeWithLocalMatrix","SkShadowFlags","SkShadowFlags_kAll_ShadowFlag","SkShadowFlags_kConcaveBlurOnly_ShadowFlag","SkShadowFlags_kDirectionalLight_ShadowFlag","SkShadowFlags_kGeometricOnly_ShadowFlag","SkShadowFlags_kNone_ShadowFlag","SkShadowFlags_kTransparentOccluder_ShadowFlag","SkShadowUtils","SkShadowUtils_ComputeTonalColors","SkShadowUtils_DrawShadow","SkShadowUtils_GetLocalBounds","SkSize","SkSpan","SkSpecialImage","SkStream","SkStreamAsset","SkStreamMemory","SkStream_MakeFromFile","SkStream_readPackedUInt","SkStream_readS16","SkStream_readS32","SkStream_readS8","SkStream_readScalar","SkString","SkString_Rec","SkString_Rec_Make","SkString_Rec_ref","SkString_Rec_unique","SkString_Rec_unref","SkString_SkString","SkString_SkString1","SkString_SkString2","SkString_SkString3","SkString_SkString4","SkString_SkString5","SkString_SkString6","SkString_SkString7","SkString_SkString_destructor","SkString_appendVAList","SkString_appendf","SkString_equals","SkString_equals1","SkString_equals2","SkString_gEmptyRec","SkString_insert","SkString_insert1","SkString_insertHex","SkString_insertS32","SkString_insertS64","SkString_insertScalar","SkString_insertU32","SkString_insertU64","SkString_insertUnichar","SkString_prependVAList","SkString_prependf","SkString_printVAList","SkString_printf","SkString_remove","SkString_reset","SkString_resize","SkString_set","SkString_set1","SkString_sk_is_trivially_relocatable","SkString_swap","SkString_writable_str","SkStrings","SkStrokeRec","SkStrokeRec_GetInflationRadius","SkStrokeRec_GetInflationRadius1","SkStrokeRec_InitStyle","SkStrokeRec_SkStrokeRec","SkStrokeRec_SkStrokeRec1","SkStrokeRec_SkStrokeRec2","SkStrokeRec_Style","SkStrokeRec_applyToPaint","SkStrokeRec_applyToPath","SkStrokeRec_getInflationRadius","SkStrokeRec_getStyle","SkStrokeRec_kStyleCount","SkStrokeRec_setFillStyle","SkStrokeRec_setHairlineStyle","SkStrokeRec_setStrokeStyle","SkSurface","SkSurfaceCharacterization","SkSurfaceProps","SkSurfaceProps_Flags","SkSurfaceProps_Flags_kDynamicMSAA_Flag","SkSurfaceProps_Flags_kUseDeviceIndependentFonts_Flag","SkSurfaceProps_SkSurfaceProps","SkSurfaceProps_SkSurfaceProps1","SkSurfaceProps_SkSurfaceProps2","SkSurfaceProps_kUseDistanceFieldFonts_Flag","SkSurface_AsyncReadResult","SkSurface_BackendSurfaceAccess","SkSurface_Base","SkSurface_ContentChangeMode","SkSurface_INHERITED","SkSurface_MakeNull","SkSurface_MakeRaster","SkSurface_MakeRasterDirect","SkSurface_MakeRasterDirectReleaseProc","SkSurface_MakeRasterN32Premul","SkSurface_MakeRenderTarget","SkSurface_ReadPixelsCallback","SkSurface_ReadPixelsContext","SkSurface_ReleaseContext","SkSurface_RenderTargetReleaseProc","SkSurface_RescaleGamma","SkSurface_RescaleMode","SkSurface_SkSurface","SkSurface_SkSurface1","SkSurface_TextureReleaseProc","SkSurface_asyncRescaleAndReadPixels","SkSurface_asyncRescaleAndReadPixelsYUV420","SkSurface_capabilities","SkSurface_characterize","SkSurface_draw","SkSurface_draw1","SkSurface_flush","SkSurface_flushAndSubmit","SkSurface_generationID","SkSurface_getCanvas","SkSurface_imageInfo","SkSurface_isCompatible","SkSurface_makeImageSnapshot","SkSurface_makeImageSnapshot1","SkSurface_makeSurface","SkSurface_makeSurface1","SkSurface_notifyContentWillChange","SkSurface_peekPixels","SkSurface_readPixels","SkSurface_readPixels1","SkSurface_readPixels2","SkSurface_recorder","SkSurface_recordingContext","SkSurface_wait","SkSurface_writePixels","SkSurface_writePixels1","SkSwapRB","SkTArray_ReallocType","SkTArray_value_type","SkTDArray","SkTDStorage","SkTDStorage_SkTDStorage","SkTDStorage_SkTDStorage1","SkTDStorage_SkTDStorage2","SkTDStorage_SkTDStorage3","SkTDStorage_SkTDStorage_destructor","SkTDStorage_append","SkTDStorage_append1","SkTDStorage_append2","SkTDStorage_erase","SkTDStorage_insert","SkTDStorage_insert1","SkTDStorage_prepend","SkTDStorage_removeShuffle","SkTDStorage_reserve","SkTDStorage_reset","SkTDStorage_resize","SkTDStorage_shrink_to_fit","SkTDStorage_swap","SkTableMaskFilter","SkTableMaskFilter_Create","SkTableMaskFilter_CreateClip","SkTableMaskFilter_CreateGamma","SkTableMaskFilter_MakeClipTable","SkTableMaskFilter_MakeGammaTable","SkTextBlob","SkTextBlobBuilder","SkTextBlobBuilder_RunBuffer","SkTextBlobBuilder_SkTextBlobBuilder","SkTextBlobBuilder_SkTextBlobBuilder_destructor","SkTextBlobBuilder_allocRun","SkTextBlobBuilder_allocRunPos","SkTextBlobBuilder_allocRunPosH","SkTextBlobBuilder_allocRunRSXform","SkTextBlobBuilder_allocRunText","SkTextBlobBuilder_allocRunTextPos","SkTextBlobBuilder_allocRunTextPosH","SkTextBlobBuilder_allocRunTextRSXform","SkTextBlobBuilder_make","SkTextBlob_Deserialize","SkTextBlob_GlyphPositioning","SkTextBlob_INHERITED","SkTextBlob_Iter","SkTextBlob_Iter_ExperimentalRun","SkTextBlob_Iter_Iter","SkTextBlob_Iter_Run","SkTextBlob_Iter_experimentalNext","SkTextBlob_Iter_next","SkTextBlob_MakeFromPosText","SkTextBlob_MakeFromPosTextH","SkTextBlob_MakeFromRSXform","SkTextBlob_MakeFromText","SkTextBlob_RunRecord","SkTextBlob_getIntercepts","SkTextBlob_serialize","SkTextBlob_serialize1","SkTextEncoding","SkTextUtils","SkTextUtils_Align","SkTextUtils_Draw","SkTextUtils_GetPath","SkTileMode","SkTime_DateTime","SkTime_DateTime_toISO8601","SkTraceMemoryDump","SkTrimPathEffect_Mode","SkTypeface","SkTypefaceID","SkTypeface_Equal","SkTypeface_INHERITED","SkTypeface_LocalizedString","SkTypeface_LocalizedStrings","SkTypeface_MakeDefault","SkTypeface_MakeDeserialize","SkTypeface_MakeFromData","SkTypeface_MakeFromFile","SkTypeface_MakeFromName","SkTypeface_MakeFromStream","SkTypeface_SerializeBehavior","SkTypeface_SkTypeface","SkTypeface_SkTypeface_destructor","SkTypeface_Style","SkTypeface_UniqueID","SkTypeface_copyTableData","SkTypeface_countGlyphs","SkTypeface_countTables","SkTypeface_createFamilyNameIterator","SkTypeface_createScalerContext","SkTypeface_getBounds","SkTypeface_getFamilyName","SkTypeface_getKerningPairAdjustments","SkTypeface_getPostScriptName","SkTypeface_getTableData","SkTypeface_getTableSize","SkTypeface_getTableTags","SkTypeface_getUnitsPerEm","SkTypeface_getVariationDesignParameters","SkTypeface_getVariationDesignPosition","SkTypeface_makeClone","SkTypeface_onComputeBounds","SkTypeface_onCopyTableData","SkTypeface_onGetKerningPairAdjustments","SkTypeface_onOpenExistingStream","SkTypeface_openExistingStream","SkTypeface_openStream","SkTypeface_serialize","SkTypeface_serialize1","SkTypeface_textToGlyphs","SkTypeface_unicharToGlyph","SkTypeface_unicharsToGlyphs","SkUnichar","SkV2","SkV3","SkV4","SkVector","SkVertices","SkVerticesPriv","SkVertices_Builder","SkVertices_BuilderFlags","SkVertices_BuilderFlags_kHasColors_BuilderFlag","SkVertices_BuilderFlags_kHasTexCoords_BuilderFlag","SkVertices_Builder_Builder","SkVertices_Builder_colors","SkVertices_Builder_detach","SkVertices_Builder_indices","SkVertices_Builder_positions","SkVertices_Builder_texCoords","SkVertices_Desc","SkVertices_MakeCopy","SkVertices_Sizes","SkVertices_VertexMode","SkVertices_approximateSize","SkWStream","SkWStream_SizeOfPackedUInt","SkWStream_SkWStream_destructor","SkWStream_flush","SkWStream_writeBigDecAsText","SkWStream_writeDecAsText","SkWStream_writeHexAsText","SkWStream_writePackedUInt","SkWStream_writeScalar","SkWStream_writeScalarAsText","SkWStream_writeStream","SkWeakRefCnt","SkWeakRefCnt_INHERITED","SkYUVAInfo","SkYUVAInfo_GetYUVALocations","SkYUVAInfo_HasAlpha","SkYUVAInfo_PlaneConfig","SkYUVAInfo_PlaneDimensions","SkYUVAInfo_PlaneSubsamplingFactors","SkYUVAInfo_Siting","SkYUVAInfo_SkYUVAInfo","SkYUVAInfo_Subsampling","SkYUVAInfo_SubsamplingFactors","SkYUVAInfo_YUVAChannels","SkYUVAInfo_YUVALocation","SkYUVAInfo_YUVALocations","SkYUVAInfo_computeTotalBytes","SkYUVAInfo_kMaxPlanes","SkYUVAInfo_kYUVAChannelCount","SkYUVAInfo_makeDimensions","SkYUVAInfo_makeSubsampling","SkYUVAInfo_toYUVALocations","SkYUVAPixmapInfo","SkYUVAPixmapInfo_DataType","SkYUVAPixmapInfo_NumChannelsAndDataType","SkYUVAPixmapInfo_PlaneConfig","SkYUVAPixmapInfo_SkYUVAPixmapInfo","SkYUVAPixmapInfo_SkYUVAPixmapInfo1","SkYUVAPixmapInfo_Subsampling","SkYUVAPixmapInfo_SupportedDataTypes","SkYUVAPixmapInfo_SupportedDataTypes_SupportedDataTypes","SkYUVAPixmapInfo_SupportedDataTypes_enableDataType","SkYUVAPixmapInfo_computeTotalBytes","SkYUVAPixmapInfo_initPixmapsFromSingleAllocation","SkYUVAPixmapInfo_isSupported","SkYUVAPixmapInfo_kDataTypeCnt","SkYUVAPixmapInfo_kMaxPlanes","SkYUVAPixmaps","SkYUVAPixmaps_Allocate","SkYUVAPixmaps_DataType","SkYUVAPixmaps_FromData","SkYUVAPixmaps_FromExternalMemory","SkYUVAPixmaps_FromExternalPixmaps","SkYUVAPixmaps_MakeCopy","SkYUVAPixmaps_RecommendedRGBAColorType","SkYUVAPixmaps_kMaxPlanes","SkYUVAPixmaps_pixmapsInfo","SkYUVAPixmaps_toYUVALocations","SkYUVColorSpace","Slight","Small","Small","SoftLight","Solid","Solver","Square","Src","SrcATop","SrcIn","SrcOut","SrcOver","Start","Strict","Stroke","Stroke","StrokeAndFill","StrokeAndFill","SubpixelAntiAlias","SubsamplingFactors","Success","Sweep","TightBounds","ToSVGString","TopDown","TopLeft","TopRight","TraitObject","Translate","Transparent","TriangleFan","TriangleStrip","Triangles","U8","U8CPU","UYV","UYV","UYVA","UYVA","Unimplemented","Union","Union","Union","UniqueID","Unknown","Unknown","Unknown","Unorm10_Unorm2","Unorm10_Unorm2","Unorm16","Unorm16","Unorm8","Unorm8","Unpremul","UpperLeft","UpperRight","Upright","VecSink","WBMP","WEBP","Winding","XOR","XOR","Xor","Xor","YUV","YUV","YUVA","YUVA","YUVtoRGB","Y_UV","Y_UV","Y_UV_A","Y_UV_A","Y_U_V","Y_U_V","Y_U_V_A","Y_U_V_A","Y_VU","Y_VU","Y_VU_A","Y_VU_A","Y_V_U","Y_V_U","Y_V_U_A","Y_V_U_A","Yes","Yes","Yes","Yes","Zero","_IO_FILE","_IO_backup_base","_IO_buf_base","_IO_buf_end","_IO_lock_t","_IO_marker","_IO_read_base","_IO_read_end","_IO_read_ptr","_IO_save_base","_IO_save_end","_IO_write_base","_IO_write_end","_IO_write_ptr","_M_allocated_capacity","_M_bpos","_M_current","_M_empty","_M_end_of_storage","_M_finish","_M_impl","_M_len","_M_local_buf","_M_off","_M_p","_M_payload","_M_payload","_M_start","_M_state","_M_str","_M_sv","_M_t","_M_wp","_S_local_capacity","__BindgenBitfieldUnit","__BindgenUnionField","__align","__bindgen_anon_1","__bindgen_anon_1","__bindgen_anon_2","__bindgen_cannot_repr_c_on_empty_enum","__bindgen_cannot_repr_c_on_empty_enum","__bindgen_cannot_repr_c_on_empty_enum","__bindgen_padding_0","__builtin_va_list","__count","__data","__gnu_cxx__Char_types","__gnu_cxx__Char_types_int_type","__gnu_cxx__Char_types_off_type","__gnu_cxx__Char_types_pos_type","__gnu_cxx__Char_types_state_type","__gnu_cxx___alloc_traits","__gnu_cxx___alloc_traits__Base_type","__gnu_cxx___alloc_traits___is_custom_pointer","__gnu_cxx___alloc_traits_allocator_type","__gnu_cxx___alloc_traits_const_pointer","__gnu_cxx___alloc_traits_const_reference","__gnu_cxx___alloc_traits_difference_type","__gnu_cxx___alloc_traits_pointer","__gnu_cxx___alloc_traits_rebind","__gnu_cxx___alloc_traits_rebind_other","__gnu_cxx___alloc_traits_reference","__gnu_cxx___alloc_traits_size_type","__gnu_cxx___alloc_traits_value_type","__gnu_cxx___normal_iterator","__gnu_cxx___normal_iterator___traits_type","__gnu_cxx___normal_iterator_difference_type","__gnu_cxx___normal_iterator_iterator_category","__gnu_cxx___normal_iterator_iterator_type","__gnu_cxx___normal_iterator_pointer","__gnu_cxx___normal_iterator_reference","__gnu_cxx___normal_iterator_value_type","__gnu_cxx_char_traits","__gnu_cxx_char_traits_char_type","__gnu_cxx_char_traits_int_type","__gnu_cxx_char_traits_off_type","__gnu_cxx_char_traits_pos_type","__gnu_cxx_char_traits_state_type","__gnu_cxx_new_allocator","__gnu_cxx_new_allocator_const_pointer","__gnu_cxx_new_allocator_const_reference","__gnu_cxx_new_allocator_difference_type","__gnu_cxx_new_allocator_pointer","__gnu_cxx_new_allocator_propagate_on_container_move_assignment","__gnu_cxx_new_allocator_rebind","__gnu_cxx_new_allocator_reference","__gnu_cxx_new_allocator_size_type","__gnu_cxx_new_allocator_value_type","__mbstate_t","__mbstate_t__bindgen_ty_1","__off64_t","__off_t","__pad1","__pad2","__pad3","__pad4","__pad5","__va_list_tag","__value","__wch","__wchb","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_address","_base","_base","_base","_base","_base","_base","_base","_base","_base","_base","_base","_base","_base","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_opaque_blob","_bindgen_ty_30","_bindgen_ty_31","_bitfield_1","_bitfield_1","_bitfield_1","_bitfield_1","_bitfield_align_1","_bitfield_align_1","_bitfield_align_1","_bitfield_align_1","_chain","_cur_column","_fileno","_flags","_flags2","_lock","_markers","_mode","_next","_offset","_old_offset","_phantom_0","_phantom_0","_phantom_0","_phantom_0","_phantom_0","_phantom_0","_phantom_0","_phantom_0","_phantom_0","_pos","_sbuf","_shortbuf","_unused2","_vtable_offset","a","abort","accessTopLayerPixels","accessTopRasterHandle","add","add","addArc","addArc","addCircle","addCircle","addGenIDChangeListener","addOval","addOval","addOval1","addPath","addPath","addPath1","addPoly","addPolygon","addRRect","addRRect","addRRect1","addRect","addRect","addRoundRect","addRoundRect1","alias_of_table_entries","allocN32Pixels","allocPixels","allocPixels1","allocPixels2","allocPixels3","allocPixelsFlags","allocRun","allocRunPos","allocRunPosH","allocRunRSXform","allocRunText","allocRunTextPos","allocRunTextPosH","allocRunTextRSXform","alphaType","androidFramework_setDeviceClipRestriction","android_only_reset","append","append","append1","append2","appendFloat","appendFloatArray","appendInt","appendName","appendNodeIdArray","appendVAList","applyColorXform","applyToCanvas","applyToPaint","applyToPath","approximateBytesUsed","approximateBytesUsed","approximateFilteredBounds","approximateSize","arcTo","arcTo","arcTo1","arcTo1","arcTo2","arcTo2","asAColorFilter","asAColorMatrix","asAColorMode","asADash","asAffine","asBlendMode","asImage","asLegacyBitmap","as_coeff","as_mut","as_ref","asyncReadPixels","asyncRescaleAndReadPixels","asyncRescaleAndReadPixels","asyncRescaleAndReadPixelsYUV420","asyncRescaleAndReadPixelsYUV420","at","atSize","axis","b","beginPage","beginRecording","beginRecording1","bindgen_union_field","blender","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","bytesPerPixel","c","canComputeFastBounds","canComputeFastBounds","capabilities","changed","characterize","clipPath","clipRRect","clipRect","clipRegion","clipShader","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","close","close","clusters","cmp","color","colorFilter","colorSpace","colorSpace","colorSpace","colorSpace","colorSpace","colorType","color_primaries","colors","computeBounds","computeByteSize","computeFastBounds","computeFromT","computeIsOpaque","computeOffset","computeRegionComplexity","computeTightBounds","computeTotalBytes","computeTotalBytes","computeYFromX","concat","concat1","conicTo","conicTo","conservativelyContainsRect","contains","contains","contains","contains1","contains2","coordinateCount","coordinates","copyRange","copyTableData","copyTo","copyToAndReset","count","count","count","countFamilies","countGlyphs","countInputs","countPoints","countTables","countVerbs","createFamilyNameIterator","createScalerContext","createStyleSet","cubic","cubicTo","cubicTo","current","d","data","data_color_space","debugTrace","decomposeScale","def","default","default","default","default","default","default","default","default","default","default","default","default","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","destruct","detach","detach","detach","detach","detachAsData","detachAsStream","doComputeFastBounds","dotWith","dotWithNormal","draw","draw","draw1","draw1","drawAnnotation","drawArc","drawAtlas","drawCircle","drawColor","drawDRRect","drawDrawable","drawDrawable1","drawGlyphs","drawGlyphs1","drawGlyphs2","drawImage","drawImageLattice","drawImageNine","drawImageRect","drawImageRect1","drawLine","drawMesh","drawOval","drawPaint","drawPatch","drawPath","drawPicture","drawPoint","drawPoints","drawRRect","drawRect","drawRegion","drawRoundRect","drawSimpleText","drawTextBlob","drawVertices","drawVertices1","dump","dump","dump","dump","dump","dump","dumpArrays","dumpToString","e","effect","enableDataType","encodeToData","encodeToData1","endPage","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equals","equals","equals1","equals2","erase","erase","erase","erase1","erase1","erase2","eraseColor","eraseColor1","errorText","experimentalNext","experimental_DrawEdgeAAImageSet","experimental_DrawEdgeAAQuad","extractAlpha","extractSubset","extractSubset","f","fAAFlags","fActivelyRecording","fAdditionalNodeIds","fAdvance","fAllocator","fAlpha","fAlpha","fAlphaType","fAlphaType","fAlt","fAndroidCodecHandlesFrameIndex","fAntiAlias","fAscent","fAttributes","fAttrs","fAuthor","fAvgCharWidth","fAxis","fBBH","fBX","fBY","fBackImage","fBackdrop","fBaseDevice","fBeginningOfData","fBitfields","fBitfieldsUInt","fBitsPerComponent","fBlend","fBlender","fBottom","fBottom","fBottom","fBounds","fBounds","fBounds","fBounds","fBounds","fBounds","fBounds","fBounds","fBoundsOnce","fBytesWrittenBeforeTail","fCacheID","fCamera","fCanvas","fCap","fCapHeight","fCapType","fCharacterization","fChild","fChildVector","fClip","fClipRestrictionRect","fClipRestrictionSaveCount","fCloseLine","fCoeff","fCollectionIndex","fColor","fColor4f","fColorCount","fColorDepth","fColorFilter","fColorInfo","fColorOffsets","fColorSpace","fColorType","fColors","fColors","fColors","fConicWeight","fConicWeights","fConicWeights","fContour","fContrast","fConvexity","fCount","fCount","fCreation","fCreator","fCropRect","fCullRect","fCurrScanline","fCurrentRunBuffer","fData","fData","fData","fDataType","fDataType","fDataTypeSupport","fDay","fDayOfWeek","fDeferredBounds","fDeferredSaveCount","fDescent","fDevice","fDevice","fDimensions","fDimensions","fDir","fDiscard","fDisposalMethod","fDistance","fDither","fDone","fDone","fDone","fDrawable","fDstInfo","fDstProfile","fDstRect","fDstXformAlphaFormat","fDstXformFormat","fDuration","fEdging","fElems","fEncodedInfo","fEncodingQuality","fEnd","fExecutor","fExperimentalBackdropScale","fFillType","fFillType","fFirstDirection","fFlags","fFlags","fFlags","fForceClose","fFrameIndex","fFrameRect","fFromXYZD50","fFullyReceived","fGX","fGY","fGlyphCount","fGlyphIndices","fGlyphRecs","fGradientFlags","fGrayscale","fHandle","fHasAlphaWithinBounds","fHasClip","fHead","fHeight","fHeight","fHeight","fHinting","fHour","fImage","fImage","fImageFilter","fImageFilter","fImpl","fInPremul","fIndexCount","fIndices","fInfo","fInfo","fInfo","fInitialRec","fIntermediateFanIndices","fIntervals","fInvTransferFn","fInvertStyle","fIsA","fIsACCW","fIsAStart","fIsFixedPitch","fIsVolatile","fIsVolatile","fIter","fIter","fIter","fJoin","fJoinType","fKeywords","fLang","fLanguage","fLastMoveIndex","fLastMovePoint","fLastMoveToIndex","fLastPt","fLastRun","fLayer","fLazyDstFieldsOnce","fLeading","fLeft","fLeft","fLeft","fLength","fList","fListeners","fLoc","fLocation","fMCRec","fMCRecStorage","fMCStack","fMaskFilter","fMat","fMat","fMat","fMatrix","fMatrix","fMatrixIndex","fMaxCharWidth","fMetrics","fMinute","fMips","fMiterLimit","fMiterLimit","fMode","fModified","fMonth","fMoveTo","fMutex","fNeedClose","fNeedToUpdate","fNeedsMoveVerb","fNeedsRewind","fNext","fNodeId","fObserver","fOffset","fOps","fOptions","fOrientation","fOrigin","fOrigin","fOrigin","fPDFA","fPadding","fPaint","fPaint","fPalette","fPath","fPathEffect","fPathRef","fPathRefs","fPhase","fPixelGeometry","fPixelRef","fPixels","fPixels","fPixmap","fPlaneConfig","fPlaneInfos","fPlanes","fPoint","fPoints","fPositions","fPriorFrame","fProducer","fProfile","fProfile","fProps","fPtIndex","fPtr","fPtr","fPtr","fPtr","fPts","fPts","fQuickRejectBounds","fRX","fRY","fRadii","fRadius","fRasterDPI","fRec","fRec","fRecord","fRecorder","fRect","fRect","fRect","fRectTypes","fRefCnt","fRefCnt","fRefCnt","fReleaseCtx","fReleaseProc","fReleaseProc","fReleaseProcContext","fRequiredFrame","fResScale","fReserve","fRgn","fRight","fRight","fRight","fRowBytes","fRowBytes","fRowBytes","fRunCount","fRunHead","fRunRecord","fRuns","fRuns","fSCos","fSSin","fSaveCount","fSaveCount","fSaveLayerFlags","fScaleX","fScratchGlyphRunBuilder","fSecond","fSegmentMask","fShader","fSitingX","fSitingY","fSize","fSize","fSize","fSize","fSizeOfT","fSkewX","fSrcRect","fSrcXformFormat","fStartedIncrementalDecode","fState","fStorage","fStorage","fStorage","fStorageSize","fStorageUsed","fStream","fStrikeoutPosition","fStrikeoutThickness","fString","fStrokeAndFill","fStructureElementTreeRoot","fStyle","fStyle","fStyle","fSubject","fSubsampling","fSubset","fSubsetter","fSurfaceBase","fSurfaceProps","fTValue","fTail","fTexs","fTileMode","fTimeZoneMinutes","fTitle","fToXYZD50","fToXYZD50Hash","fTop","fTop","fTop","fTransferFn","fTransferFnHash","fTx","fTy","fType","fType","fType","fTypeMask","fTypeString","fTypeface","fTypeface","fU","fUnderlinePosition","fUnderlineThickness","fUniqueID","fUniqueID","fUniqueID","fUniqueID","fUniqueID","fV","fValue","fVariationDesignPosition","fVerb","fVerbStop","fVerbs","fVerbs","fVertexCount","fVertices","fWX","fWY","fWeights","fWidth","fWidth","fWidth","fWidth","fWidth","fX","fX","fX","fXCount","fXDivs","fXHeight","fXMax","fXMin","fXformTime","fY","fY","fY","fYCount","fYDivs","fYUVAInfo","fYUVAInfo","fYUVColorSpace","fYear","fZ","fZenith","fZeroInitialized","filter","filterBounds","filterColor","filterColor4f","filterPath","filterPath1","findChild","findUniform","finishRecordingAsDrawable","finishRecordingAsPicture","finishRecordingAsPictureWithCull","flags","flags","flush","flush","flushAndSubmit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_trait","font","forceUnoptimized","fp_offset","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","gammaCloseToSRGB","gammaCloseToSRGB","gammaIsLinear","gamutTransformTo","generationID","get","getAddr","getAlphaf","getAtPos","getBaseProps","getBlendMode_or","getBoundaryPath","getBounds","getBounds","getBounds","getBounds","getBounds1","getCanvas","getCanvas","getColor","getColor4f","getDeviceClipBounds","getFamilyName","getFamilyName","getFillPath","getFillPath1","getFrameInfo","getGenerationID","getGenerationID","getGenerationID","getGenerationID","getImage","getImage1","getInflationRadius","getInput","getIntercepts","getIntercepts","getKerningPairAdjustments","getLastPt","getLength","getLocalClipBounds","getLocalToDevice","getMatrix","getMatrix","getMatrix","getMaxScale","getMetrics","getMinMaxScales","getMinScale","getPath","getPaths","getPixels","getPixels","getPoint","getPoints","getPos","getPosTan","getPosTan","getPostScriptName","getProps","getRecordingCanvas","getRowMajor","getSaveCount","getScalarT","getScanlines","getSegment","getSegment","getSegmentMasks","getStyle","getSurface","getTableData","getTableSize","getTableTags","getTopProps","getTotalMatrix","getTypefaceOrDefault","getUnitsPerEm","getVariationDesignParameters","getVariationDesignPosition","getVerbs","getWidthsBounds","getXPos","getYUVAPlanes","getYUVAPlanes","get_bit","glyphs","glyphs","gp_offset","grid_16","grid_16","grid_8","grid_8","grid_points","grid_points","hasMipmaps","has_A2B","has_B2A","has_CICP","has_toXYZD50","has_trc","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","imageInfo","imageInfo","incReserve","incReserve","index","index","index","indices","initPixmapsFromSingleAllocation","input_channels","input_channels","input_curves","input_curves","insert","insert","insert1","insert1","insertHex","insertS32","insertS64","insertScalar","insertU32","insertU64","insertUnichar","inset","installMaskPixels","installPixels","installPixels1","interpolate","intersect","intersect","intersect1","intersects","intersects1","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","invTransferFn","invert","isAImage","isAlphaOnly","isAlphaUnchanged","isClosed","isClosedContour","isColorFilterNode","isCompatible","isConvex","isDraw","isEmpty","isFinite","isImmutable","isInterpolatable","isLastContourClosed","isLazyGenerated","isLine","isNumericalTransferFn","isOval","isRRect","isRect","isSRGB","isSimilarity","isSrcOver","isSupported","isTextureBacked","isValid","isValid","isValid","is_even_odd","is_inverse","is_opaque","join","join","k100","k300","k410","k410","k411","k411","k420","k420","k422","k422","k440","k440","k444","k444","k565_Color","kA","kA16_float_SkColorType","kA16_unorm_SkColorType","kARGB_4444_SkColorType","kAlpha_8_SkColorType","kAlpha_SkColorChannelFlag","kBGRA_1010102_SkColorType","kBGRA_8888_SkColorType","kBGRA_Color","kBGRX_Color","kBGR_101010x_SkColorType","kBGR_Color","kBGR_H_SkPixelGeometry","kBGR_V_SkPixelGeometry","kBack_IterStart","kBetweenPages_State","kBinary_Alpha","kBlack_Weight","kBlue_SkColorChannelFlag","kBold_Weight","kClosed_State","kCondensed_Width","kConvertTextToPaths_Flag","kDash_DashType","kDecodeRow_XformTime","kExactFit","kExpanded_Width","kExtraBlack_Weight","kExtraBold_Weight","kExtraCondensed_Width","kExtraExpanded_Width","kExtraLight_Weight","kFront_IterStart","kFullLayer_SaveLayerStrategy","kGlyphID","kGrayAlpha_Color","kGrayAlpha_SkColorChannelFlags","kGray_8_SkColorType","kGray_Color","kGray_SkColorChannelFlag","kGreen_SkColorChannelFlag","kGrowing","kHard_ClipEdgeStyle","kHarfbuzz_Subsetter","kImmutable","kInPage_State","kInvertedCMYK_Color","kInvisible_Weight","kIsA_JustMoves","kIsA_MoreThanMoves","kIsA_Oval","kIsA_RRect","kKeep","kLast","kLast","kLastEnum_SkColorType","kLight_Weight","kLinear","kLinear","kMedium_Weight","kMutable","kN32_SkColorType","kNaN_Constructor","kNearest","kNearest","kNo","kNo","kNoLayer_SaveLayerStrategy","kNoPrettyXML_Flag","kNo_XformTime","kNone_DashType","kNone_ShaderOverrideOpacity","kNormal_Weight","kNormal_Width","kNotOpaque_ShaderOverrideOpacity","kOpaque_Alpha","kOpaque_ShaderOverrideOpacity","kPalette_Color","kPalette_XformTime","kR16G16B16A16_unorm_SkColorType","kR16G16_float_SkColorType","kR16G16_unorm_SkColorType","kR8G8_unorm_SkColorType","kR8_unorm_SkColorType","kRGBA_1010102_SkColorType","kRGBA_8888_SkColorType","kRGBA_Color","kRGBA_F16Norm_SkColorType","kRGBA_F16_SkColorType","kRGBA_F32_SkColorType","kRGBA_SkColorChannelFlags","kRGB_101010x_SkColorType","kRGB_565_SkColorType","kRGB_888x_SkColorType","kRGB_Color","kRGB_H_SkPixelGeometry","kRGB_SkColorChannelFlags","kRGB_V_SkPixelGeometry","kRG_SkColorChannelFlags","kRO_LegacyBitmapMode","kRed_SkColorChannelFlag","kRelativePathEncoding_Flag","kRepeatedCubic","kRepeatedCubic","kRepeatedLinear","kRepeatedLinear","kRestoreBGColor","kRestorePrevious","kSRGBA_8888_SkColorType","kSemiBold_Weight","kSemiCondensed_Width","kSemiExpanded_Width","kSfntly_Subsetter","kShrinking","kSoft_ClipEdgeStyle","kSrc","kSrc","kSrc","kSrcOver","kTemporarilyImmutable","kThin_Weight","kU","kUTF16","kUTF32","kUTF8","kUltraCondensed_Width","kUltraExpanded_Width","kUninitialized_Constructor","kUnknown","kUnknown","kUnknown","kUnknown_SkColorType","kUnknown_SkPixelGeometry","kUnpremul_Alpha","kV","kXAlpha_Color","kY","kYCCK_Color","kYUVA_Color","kYUV_Color","kYes","kYes","kYes","legacyMakeTypeface","lineTo","lineTo","m_data","m_isEof","m_length","m_read","m_seekAbsolute","m_seekRelative","make","makeAlphaType","makeBlender","makeClone","makeColorFilter","makeColorFilter1","makeColorFilter2","makeColorSpace","makeColorSpace","makeColorSpace","makeColorSpin","makeColorType","makeColorTypeAndColorSpace","makeComposed","makeDimensions","makeFromData","makeFromFile","makeFromStream","makeFromStream1","makeImage","makeImageSnapshot","makeImageSnapshot1","makeLinearGamma","makeNonTextureImage","makeRasterImage","makeRawShader","makeSRGBGamma","makeShader","makeShader","makeShader","makeShader","makeShader1","makeSubsampling","makeSubset","makeSurface","makeSurface","makeSurface1","makeWithColorFilter","makeWithFilter","makeWithLocalMatrix","makeWithLocalMatrix","makeWithSize","map","mapHomogeneousPoints","mapHomogeneousPoints1","mapPoints","mapRadius","mapRect","mapRectScaleTranslate","mapVectors","mapXY","matchFamily","matchFamilyStyle","matchFamilyStyleCharacter","matchStyleCSS3","matrix","matrix","matrix_channels","matrix_channels","matrix_coefficients","matrix_curves","matrix_curves","max","maxAniso","maxVersionAllowed","mbstate_t","measureText","min","mipmap","moveTo","moveTo","name","name","name","needsCTM","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new1","new2","new2","new2","new2","new2","new2","new2","new2","new2","new2","new2","new2","new2","new3","new3","new3","new3","new3","new3","new3","new3","new4","new4","new5","new5","new6","new7","newLayer","newPictureSnapshot","new_bitfield_1","new_bitfield_1","new_bitfield_1","new_bitfield_1","next","next","next","next","next","next","next","next","nextContour","normalize","normalize","normalizePerspective","nothingToDraw","notifyContentWillChange","notifyDrawingChanged","notifyPixelsChanged","notifyPixelsChanged","offset","offset","offset","op","op1","op2","openExistingStream","openStream","outputScanline","output_channels","output_channels","output_curves","output_curves","overflow_arg_area","overrideCount","overrides","padToAlign4","parametric","partial_cmp","patchToMatrix","pcs","peekPixels","peekPixels","peekPixels","peekPixels","pixelRefOrigin","pixmapsInfo","points","points","polylineTo","pop_back","pop_front","pos","positions","positions","postConcat","postRotate","postRotate1","postScale","postScale1","postSkew","postSkew1","postTranslate","postTranslate","postTranslate","preConcat","preConcat","preRotate","preRotate1","preScale","preScale","preScale1","preScale1","preSkew","preSkew1","preTranslate","preTranslate","prepend","prependToAndReset","prependVAList","preservesRightAngles","prev","printVAList","private_draw_shadow_rec","push_back","push_front","quadTo","quadTo","queryYUVAInfo","queryYUVAInfo","quickReject","quickReject1","rArcTo","rConicTo","rConicTo","rCubicTo","rCubicTo","rLineTo","rLineTo","rMoveTo","rQuadTo","rQuadTo","read","readFromMemory","readFromMemory","readFromMemory","readPackedUInt","readPixels","readPixels","readPixels","readPixels","readPixels","readPixels1","readPixels1","readPixels1","readPixels1","readPixels2","readPixels2","readPixels2","readPixels3","readS16","readS32","readS8","readScalar","recorder","recordingContext","refBlender","refColorFilter","refColorSpace","refColorSpace","refColorSpace","refColorSpace","refColorSpace","refEncodedData","refImageFilter","refMaskFilter","refPathEffect","refShader","refTypefaceOrDefault","ref_","reg_save_area","reinterpretColorSpace","remove","removeShuffle","reserve","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset1","reset2","resetMatrix","resize","resize","resolve","restore","restore","restoreToCount","reverseAddPath","rewind","rewind","rewindIfNeeded","rotate","rotate1","rotateX","rotateY","rotateZ","save","save","saveLayer","saveLayer1","saveLayerAlpha","scale","scale","scalePixels","scalePixels","serialize","serialize","serialize","serialize","serialize","serialize","serialize1","serialize1","serialize1","serialize1","set","set","set1","set9","setARGB","setAffine","setAlphaType","setAlphaf","setBaselineSnap","setBlendMode","setBlender","setBoundsCheck","setBoundsNoCheck","setColor","setColor1","setColorFilter","setColorSpace","setConcat","setConcat","setConcat","setData","setEdging","setEmbeddedBitmaps","setEmbolden","setEmpty","setFillStyle","setFontStyle","setForceAutoHinting","setGlyph","setHairlineStyle","setHinting","setIdentity","setImageFilter","setImmutable","setImmutable","setInfo","setLastPt","setLength","setLength1","setLinearMetrics","setMaskFilter","setMatrix","setMatrix1","setMemoryOwned","setMetrics","setNinePatch","setNormalize","setOval","setPath","setPath","setPath","setPath","setPathEffect","setPixelRef","setPixels","setPolyToPoly","setRSXform","setRect","setRectRadii","setRectToRect","setRectXY","setRects","setRegion","setRotate","setRotate","setRotate1","setRotateUnitSinCos","setSaturation","setScale","setScale","setScale1","setScaleX","setShader","setSinCos","setSinCos1","setSize","setSkew","setSkew1","setSkewX","setSrcXformFormat","setStroke","setStrokeCap","setStrokeJoin","setStrokeMiter","setStrokeStyle","setStrokeWidth","setStyle","setSubpixel","setTranslate","set_bit","set_fAntiAlias","set_fCap","set_fCapType","set_fDither","set_fFillType","set_fIsVolatile","set_fJoin","set_fJoinType","set_fPadding","set_fStrokeAndFill","set_fStyle","set_fTValue","set_fType","set_fn","shader","shader","shiftPerPixel","shrink_to_fit","size","sizeInBytes","sk_sp","sk_sp_element_type","sk_sp_sk_is_trivially_relocatable","skcms_A2B","skcms_AlphaFormat","skcms_AlphaFormat_Opaque","skcms_AlphaFormat_PremulAsEncoded","skcms_AlphaFormat_Unpremul","skcms_B2A","skcms_CICP","skcms_Curve","skcms_Curve__bindgen_ty_1","skcms_Curve__bindgen_ty_2","skcms_ICCProfile","skcms_Matrix3x3","skcms_Matrix3x4","skcms_PixelFormat","skcms_PixelFormat_ABGR_4444","skcms_PixelFormat_ABGR_4444","skcms_PixelFormat_ARGB_4444","skcms_PixelFormat_ARGB_4444","skcms_PixelFormat_A_8","skcms_PixelFormat_A_8","skcms_PixelFormat_A_8_","skcms_PixelFormat_A_8_","skcms_PixelFormat_BGRA_1010102","skcms_PixelFormat_BGRA_1010102","skcms_PixelFormat_BGRA_16161616BE","skcms_PixelFormat_BGRA_16161616BE","skcms_PixelFormat_BGRA_16161616LE","skcms_PixelFormat_BGRA_16161616LE","skcms_PixelFormat_BGRA_8888","skcms_PixelFormat_BGRA_8888","skcms_PixelFormat_BGRA_8888_Palette8","skcms_PixelFormat_BGRA_8888_Palette8","skcms_PixelFormat_BGRA_8888_sRGB","skcms_PixelFormat_BGRA_8888_sRGB","skcms_PixelFormat_BGRA_ffff","skcms_PixelFormat_BGRA_ffff","skcms_PixelFormat_BGRA_hhhh","skcms_PixelFormat_BGRA_hhhh","skcms_PixelFormat_BGRA_hhhh_Norm","skcms_PixelFormat_BGRA_hhhh_Norm","skcms_PixelFormat_BGR_161616BE","skcms_PixelFormat_BGR_161616BE","skcms_PixelFormat_BGR_161616LE","skcms_PixelFormat_BGR_161616LE","skcms_PixelFormat_BGR_565","skcms_PixelFormat_BGR_565","skcms_PixelFormat_BGR_888","skcms_PixelFormat_BGR_888","skcms_PixelFormat_BGR_fff","skcms_PixelFormat_BGR_fff","skcms_PixelFormat_BGR_hhh","skcms_PixelFormat_BGR_hhh","skcms_PixelFormat_BGR_hhh_Norm","skcms_PixelFormat_BGR_hhh_Norm","skcms_PixelFormat_G_8","skcms_PixelFormat_G_8","skcms_PixelFormat_G_8_","skcms_PixelFormat_G_8_","skcms_PixelFormat_RGBA_1010102","skcms_PixelFormat_RGBA_1010102","skcms_PixelFormat_RGBA_16161616BE","skcms_PixelFormat_RGBA_16161616BE","skcms_PixelFormat_RGBA_16161616LE","skcms_PixelFormat_RGBA_16161616LE","skcms_PixelFormat_RGBA_8888","skcms_PixelFormat_RGBA_8888","skcms_PixelFormat_RGBA_8888_Palette8","skcms_PixelFormat_RGBA_8888_Palette8","skcms_PixelFormat_RGBA_8888_sRGB","skcms_PixelFormat_RGBA_8888_sRGB","skcms_PixelFormat_RGBA_ffff","skcms_PixelFormat_RGBA_ffff","skcms_PixelFormat_RGBA_hhhh","skcms_PixelFormat_RGBA_hhhh","skcms_PixelFormat_RGBA_hhhh_Norm","skcms_PixelFormat_RGBA_hhhh_Norm","skcms_PixelFormat_RGB_161616BE","skcms_PixelFormat_RGB_161616BE","skcms_PixelFormat_RGB_161616LE","skcms_PixelFormat_RGB_161616LE","skcms_PixelFormat_RGB_565","skcms_PixelFormat_RGB_565","skcms_PixelFormat_RGB_888","skcms_PixelFormat_RGB_888","skcms_PixelFormat_RGB_fff","skcms_PixelFormat_RGB_fff","skcms_PixelFormat_RGB_hhh","skcms_PixelFormat_RGB_hhh","skcms_PixelFormat_RGB_hhh_Norm","skcms_PixelFormat_RGB_hhh_Norm","skcms_TransferFunction","skew","skgpu_graphite_Recorder","skipScanlines","skipToAlign4","sktext_GlyphRunBuilder","sktext_GlyphRunList","snapshot","source","startIncrementalDecode","startScanlineDecode","std__Base_bitset__M_do_find_first","std__Base_bitset__M_do_find_next","std__Base_bitset__M_do_left_shift","std__Base_bitset__M_do_right_shift","std__Base_bitset__M_do_to_ullong","std__Base_bitset__M_do_to_ulong","std__Base_bitset__WordT","std__Optional_base","std__Optional_base__Stored_type","std__Optional_payload__Empty_byte","std__Optional_payload__Stored_type","std__Optional_payload___ctor_tag","std__Optional_payload__bindgen_ty_1","std__Vector_base","std__Vector_base__Tp_alloc_type","std__Vector_base__Vector_impl","std__Vector_base_allocator_type","std__Vector_base_pointer","std___alloc_rebind","std___allocator_base","std___allocator_traits_base","std___allocator_traits_base___c_pointer","std___allocator_traits_base___cv_pointer","std___allocator_traits_base___equal","std___allocator_traits_base___pocca","std___allocator_traits_base___pocma","std___allocator_traits_base___pocs","std___allocator_traits_base___pointer","std___allocator_traits_base___rebind","std___allocator_traits_base___v_pointer","std___and_","std___array_traits__Is_nothrow_swappable","std___array_traits__Is_swappable","std___array_traits__Type","std___detected_or","std___detected_or_t","std___detector","std___detector_type","std___detector_value_t","std___get_first_arg","std___get_first_arg_t","std___get_first_arg_type","std___is_nothrow_swappable","std___is_swappable","std___iterator_traits","std___replace_first_arg","std___undefined","std___uniq_ptr_impl","std___uniq_ptr_impl__DeleterConstraint","std___uniq_ptr_impl__Ptr","std___uniq_ptr_impl__Ptr_type","std___uniq_ptr_impl_pointer","std_aligned_storage_type","std_aligned_storage_type__bindgen_ty_1","std_allocator","std_allocator_const_pointer","std_allocator_const_reference","std_allocator_difference_type","std_allocator_is_always_equal","std_allocator_pointer","std_allocator_propagate_on_container_move_assignment","std_allocator_rebind","std_allocator_rebind_other","std_allocator_reference","std_allocator_size_type","std_allocator_traits","std_allocator_traits__Diff","std_allocator_traits__Diff_type","std_allocator_traits__Ptr","std_allocator_traits__Ptr_type","std_allocator_traits__Size","std_allocator_traits___construct_helper","std_allocator_traits___construct_helper_type","std_allocator_traits___has_construct","std_allocator_traits_allocator_type","std_allocator_traits_const_pointer","std_allocator_traits_const_void_pointer","std_allocator_traits_difference_type","std_allocator_traits_is_always_equal","std_allocator_traits_pointer","std_allocator_traits_propagate_on_container_copy_assignment","std_allocator_traits_propagate_on_container_move_assignment","std_allocator_traits_propagate_on_container_swap","std_allocator_traits_rebind_alloc","std_allocator_traits_rebind_traits","std_allocator_traits_size_type","std_allocator_traits_value_type","std_allocator_traits_void_pointer","std_allocator_value_type","std_atomic","std_basic_string","std_basic_string__Alloc_hider","std_basic_string__Alloc_traits","std_basic_string__Char_alloc_type","std_basic_string__If_sv","std_basic_string__S_local_capacity","std_basic_string___const_iterator","std_basic_string___sv_type","std_basic_string___sv_wrapper","std_basic_string__bindgen_ty_1","std_basic_string__bindgen_ty_2","std_basic_string_allocator_type","std_basic_string_const_iterator","std_basic_string_const_pointer","std_basic_string_const_reference","std_basic_string_const_reverse_iterator","std_basic_string_difference_type","std_basic_string_iterator","std_basic_string_pointer","std_basic_string_reference","std_basic_string_reverse_iterator","std_basic_string_size_type","std_basic_string_traits_type","std_basic_string_value_type","std_basic_string_view","std_basic_string_view_const_iterator","std_basic_string_view_const_pointer","std_basic_string_view_const_reference","std_basic_string_view_const_reverse_iterator","std_basic_string_view_difference_type","std_basic_string_view_iterator","std_basic_string_view_pointer","std_basic_string_view_reference","std_basic_string_view_reverse_iterator","std_basic_string_view_size_type","std_basic_string_view_traits_type","std_basic_string_view_value_type","std_bitset__Base","std_bitset__WordT","std_bitset_reference","std_byte","std_char_traits","std_default_delete","std_enable_if_t","std_false_type","std_fpos","std_function","std_integral_constant_type","std_integral_constant_value_type","std_is_empty","std_iterator","std_iterator_difference_type","std_iterator_iterator_category","std_iterator_pointer","std_iterator_reference","std_iterator_traits","std_iterator_value_type","std_make_unsigned","std_make_unsigned_type","std_optional","std_optional__Base","std_optional_value_type","std_pointer_traits","std_pointer_traits___difference_type","std_pointer_traits___element_type","std_pointer_traits___rebind","std_pointer_traits_difference_type","std_pointer_traits_element_type","std_pointer_traits_pointer","std_pointer_traits_rebind","std_remove_const","std_remove_const_t","std_remove_const_type","std_reverse_iterator","std_reverse_iterator___traits_type","std_reverse_iterator_difference_type","std_reverse_iterator_iterator_type","std_reverse_iterator_pointer","std_reverse_iterator_reference","std_streamoff","std_streampos","std_string","std_string_view","std_true_type","std_tuple","std_tuple__Inherited","std_tuple__TC2","std_tuple__TCC","std_tuple__TMC","std_tuple__TMCT","std_tuple__TNTC","std_unique_ptr","std_unique_ptr__DeleterConstraint","std_unique_ptr___safe_conversion_up","std_unique_ptr_deleter_type","std_unique_ptr_element_type","std_unique_ptr_pointer","strings","swap","swap","swap","swap","swap","table_16","table_8","table_entries","tag","tag_count","temporary_internal_getRgnClip","texCoords","textToGlyphs","textToGlyphs","toISO8601","toProfile","toQuad","toQuad","toTriStrip","toXYZD50","toXYZD50","toXYZD50","toYUVALocations","toYUVALocations","to_non_inverse","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transferFn","transferFn1","transfer_characteristics","transform","transform","transform","translate","translate","translate","transpose","trc","tryAllocN32Pixels","tryAllocPixels","tryAllocPixels1","tryAllocPixelsFlags","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicharToGlyph","unicharToGlyph","unicharsToGlyphs","unicharsToGlyphs","uniformSize","unique","unref","update","useCubic","usePrivateRTShaderModule","utf8text","va_list","vals","vals","value","video_full_range_flag","vtable","vtable_","vtable_","vtable_","vtable_","vtable_","w","wait","withDefaultMipmaps","writable_str","writeBigDecAsText","writeDecAsText","writeHexAsText","writePackedUInt","writePixels","writePixels","writePixels","writePixels1","writePixels1","writeScalar","writeScalarAsText","writeStream","writeToAndReset","writeToAndReset1","writeToMemory","writeToMemory","writeToMemory","writeToMemory","writeToStream","x","x","x","y","y","y","z","z"],"q":["skia_bindingsdhe maximum number of points an iterator will return for …","The maximum number of points an iterator will return for …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe number of points an iterator will return for the verb.","The number of points an iterator will return for the verbi":[225,52,223,223,109,335,2,313,338,335,119,0,229,225,52,88,88,223,102,102,102,102,102,102,102,38,385,334,334,101,101,252,39,229,4,52,88,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,26,234,5,236,80,95,291,293,255,95,308,95,95,385,354,397,291,293,308,5,78,389,389,11,389,302,291,293,255,255,223,95,80,282,101,39,38,14,18,19,10,20,21,95,152,300,349,116,313,362,332,236,293,332,398,397,95,95,95,95,95,338,88,88,354,220,30,14,78,53,95,119,74,0,18,280,220,37,359,360,282,384,105,105,384,384,384,384,384,384,339,2,2,2,396,256,225,223,338,338,338,338,130,130,397,338,398,338,338,338,338,35,0,0,0,0,0,0,0,0,0,0,0,0,223,359,360,95,35,95,40,223,255,255,255,255,102,332,78,338,290,290,58,384,384,384,384,78,152,300,349,116,78,78,40,78,78,53,53,378,378,390,5,5,5,324,334,223,102,223,102,223,132,133,101,227,228,43,105,39,38,300,88,61,378,95,50,102,225,58,374,95,349,95,80,354,26,101,101,7,27,95,291,293,302,227,228,308,279,46,355,355,95,291,293,455,48,51,14,5,436,391,455,51,51,51,51,51,57,10,263,389,21,2,436,63,57,57,30,30,436,34,57,382,382,382,69,128,30,71,71,69,435,34,34,30,64,34,69,34,30,69,435,20,20,20,69,128,34,30,71,20,389,375,375,51,51,51,51,51,51,84,71,14,375,375,84,69,69,22,84,84,69,84,84,51,14,14,34,21,375,375,382,375,375,34,51,34,34,34,34,152,80,38,96,95,374,291,293,95,18,227,228,354,219,250,376,388,363,378,228,256,308,88,256,334,58,390,7,236,1,324,255,0,50,58,5,354,5,95,223,223,46,35,35,95,279,5,279,79,79,50,363,338,338,338,291,293,225,103,5,5,5,308,102,102,102,102,102,2,5,354,46,106,106,128,18,382,109,80,349,128,362,339,300,349,116,26,101,101,374,39,38,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,95,95,40,338,338,338,338,338,338,338,338,385,354,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,132,133,95,58,302,39,95,95,95,95,95,220,280,37,360,37,360,335,35,78,308,0,396,252,101,101,0,374,282,61,61,61,74,0,43,43,43,43,78,300,349,116,30,50,43,43,105,105,105,105,105,105,50,355,355,324,0,223,223,53,349,116,95,300,43,43,43,43,103,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,219,250,376,388,255,0,212,212,212,0,0,212,212,212,212,212,212,212,212,456,424,203,457,191,191,423,188,456,178,158,457,194,191,178,188,157,198,424,159,0,0,164,25,238,238,196,91,367,5,0,209,164,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,212,212,212,212,0,209,210,210,156,160,161,162,163,165,166,167,168,169,170,171,173,174,175,176,179,422,180,181,182,183,184,185,186,187,189,190,192,193,195,197,199,200,201,202,204,205,425,206,207,208,213,249,290,338,341,375,389,391,396,397,398,399,400,124,34,14,307,69,30,134,436,406,20,63,96,439,214,263,265,267,269,18,19,297,57,306,81,131,314,111,325,333,11,106,120,340,10,71,343,146,147,347,114,118,64,356,357,54,84,21,382,0,0,262,5,298,130,262,5,298,130,212,212,212,212,212,212,212,212,211,212,212,456,157,177,178,188,203,15,217,379,211,211,212,212,212,85,111,22,22,113,115,5,117,5,117,118,5,117,5,5,117,5,5,117,5,117,5,5,117,5,5,239,68,68,68,68,68,68,121,121,121,121,121,121,121,121,69,22,118,124,125,125,125,126,126,126,126,126,65,128,129,130,130,5,131,10,63,5,117,5,117,5,117,134,19,19,21,40,25,68,69,95,138,138,69,69,84,69,84,57,57,318,85,111,145,145,457,148,458,447,459,460,461,462,463,464,138,456,457,465,466,1,2,455,467,128,25,468,446,469,470,471,103,413,124,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,422,180,181,182,183,184,185,186,187,188,189,190,423,191,192,193,194,195,196,197,198,199,200,201,424,202,203,204,205,425,206,207,208,209,210,211,212,90,213,426,214,427,15,215,65,48,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,149,51,225,226,227,228,229,230,231,36,34,35,232,233,43,100,234,105,235,428,236,86,237,85,238,239,240,241,242,243,52,244,245,246,14,429,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,22,278,279,280,281,282,408,283,284,285,286,430,409,287,288,431,289,17,18,16,290,19,53,4,291,292,5,132,119,293,294,295,296,125,432,297,298,410,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,69,88,74,313,433,141,142,137,411,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,30,332,434,333,334,24,335,336,11,106,337,29,338,134,339,68,120,340,435,341,58,10,117,133,342,412,71,343,146,344,147,345,346,145,347,114,113,118,348,27,153,349,350,351,352,353,104,354,355,75,64,356,357,54,436,406,358,130,359,360,150,361,91,84,362,363,20,364,365,366,416,367,121,122,63,368,369,61,403,370,371,372,126,437,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,67,148,93,387,388,116,115,389,390,391,392,393,394,129,395,438,396,109,397,398,26,439,399,400,127,458,447,459,460,461,462,463,464,138,456,457,465,466,1,2,455,467,128,25,468,446,469,470,471,103,413,124,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,422,180,181,182,183,184,185,186,187,188,189,190,423,191,192,193,194,195,196,197,198,199,200,201,424,202,203,204,205,425,206,207,208,209,210,211,212,90,213,426,214,427,15,215,65,48,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,149,51,225,226,227,228,229,230,231,36,34,35,232,233,43,100,234,105,235,428,236,86,237,85,238,239,240,241,242,243,52,244,245,246,14,429,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,22,278,279,280,281,282,408,283,284,285,286,430,409,287,288,431,289,17,18,16,290,19,53,4,291,292,5,132,119,293,294,295,296,125,432,297,298,410,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,69,88,74,313,433,141,142,137,411,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,30,332,434,333,334,24,335,336,11,106,337,29,338,134,339,68,120,340,435,341,58,10,117,133,342,412,71,343,146,344,147,345,346,145,347,114,113,118,348,27,153,349,350,351,352,353,104,354,355,75,64,356,357,54,436,406,358,130,359,360,150,361,91,84,362,363,20,364,365,366,416,367,121,122,63,368,369,61,403,370,371,372,126,437,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,67,148,93,387,388,116,115,389,390,391,392,393,394,129,395,438,396,109,397,398,26,439,399,400,127,52,149,85,25,134,84,113,84,22,22,22,22,22,138,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,90,213,214,215,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,225,226,227,228,229,230,231,35,232,233,43,100,234,105,235,236,86,237,85,238,239,240,241,242,243,52,244,245,246,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,17,18,16,290,19,53,4,291,292,132,119,293,294,295,296,297,298,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,88,74,313,141,142,137,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,11,106,337,29,338,134,339,120,340,341,58,10,133,342,71,343,146,344,147,345,346,347,114,118,348,27,349,350,351,352,353,104,354,355,75,64,356,357,54,358,130,359,360,150,361,91,84,362,363,364,365,366,367,122,368,369,61,370,371,372,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,387,388,116,389,390,391,392,393,394,395,396,109,397,398,26,399,400,127,138,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,90,213,214,215,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,225,226,227,228,229,230,231,35,232,233,43,100,234,105,235,236,86,237,85,238,239,240,241,242,243,52,244,245,246,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,17,18,16,290,19,53,4,291,292,132,119,293,294,295,296,297,298,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,88,74,313,141,142,137,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,11,106,337,29,338,134,339,120,340,341,58,10,133,342,71,343,146,344,147,345,346,347,114,118,348,27,349,350,351,352,353,104,354,355,75,64,356,357,54,358,130,359,360,150,361,91,84,362,363,364,365,366,367,122,368,369,61,370,371,372,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,387,388,116,389,390,391,392,393,394,395,396,109,397,398,26,399,400,127,5,111,117,122,155,320,148,149,51,36,69,68,69,243,403,117,51,25,301,36,51,153,5,1,35,301,22,22,5,117,5,5,153,104,153,153,317,317,34,30,406,406,113,416,383,106,30,134,5,30,5,30,30,106,230,5,117,177,85,216,52,93,40,321,138,155,102,95,152,39,38,282,4,80,58,109,25,65,149,265,408,409,5,125,410,306,411,68,117,412,145,113,153,121,126,129,413,411,117,403,406,406,25,393,129,131,84,131,84,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,41,40,46,5,24,104,5,104,85,67,235,69,69,111,138,155,159,196,90,215,219,220,101,221,222,50,223,49,102,225,226,227,228,232,43,100,234,105,236,244,245,247,248,78,79,250,252,254,95,255,152,23,256,259,260,37,39,38,264,268,279,280,282,283,284,285,286,287,16,53,4,291,132,119,293,300,302,80,308,88,74,313,141,142,137,315,322,323,324,332,334,335,339,58,133,342,348,349,354,355,359,360,91,362,363,367,61,373,374,136,376,378,380,384,385,388,116,390,392,109,26,65,34,65,65,36,125,68,36,68,68,68,68,67,365,22,22,68,36,68,85,408,145,471,438,22,429,408,149,253,471,128,262,336,471,126,437,336,394,145,246,246,409,278,22,48,261,261,429,253,25,123,41,336,278,281,30,153,20,121,63,438,30,406,20,129,431,130,336,262,411,148,471,351,22,22,294,301,316,429,25,309,429,25,51,309,149,149,281,309,63,296,294,117,412,377,5,125,135,437,437,387,145,128,121,2,455,436,1,2,235,370,370,121,409,336,446,409,51,35,304,446,253,298,262,350,351,352,438,128,128,408,128,128,253,24,304,128,437,296,437,278,5,117,5,60,24,336,294,251,253,14,253,246,246,366,366,413,309,377,59,253,408,406,55,218,429,24,370,408,430,25,446,410,83,63,63,36,69,435,129,403,135,14,377,117,117,117,30,5,117,296,412,351,130,262,437,471,434,117,117,5,294,121,409,14,336,123,41,352,48,124,113,430,394,22,22,22,25,103,40,46,409,395,408,336,413,370,68,25,130,63,437,370,294,113,294,394,117,128,395,471,394,436,115,128,394,128,35,393,437,262,446,278,316,438,25,5,115,135,60,68,36,59,68,35,1,2,309,295,63,251,437,455,429,22,298,15,34,303,379,294,117,22,246,246,104,309,437,65,129,145,145,350,351,104,281,426,427,48,59,34,59,34,253,130,125,350,123,41,352,1,36,59,121,153,365,350,352,75,75,22,431,278,24,22,370,117,25,35,35,34,303,24,379,125,24,408,128,128,428,125,432,121,121,121,128,336,336,434,130,437,262,413,30,437,35,251,437,22,151,298,406,63,309,370,437,14,14,123,41,336,14,14,75,75,298,301,104,40,471,24,366,393,336,336,69,30,435,20,63,393,73,316,295,294,294,117,63,403,246,246,295,25,55,218,429,130,92,7,27,281,281,336,336,336,128,92,7,27,281,281,1,2,35,370,27,394,251,230,134,19,19,21,21,382,382,145,145,145,321,383,22,84,84,138,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,422,180,181,182,183,184,185,186,187,188,189,190,423,191,192,193,194,195,196,197,198,199,200,201,424,202,203,204,205,425,206,207,208,211,212,90,213,426,214,427,15,215,65,48,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,149,51,225,226,227,228,229,230,231,36,34,35,232,233,43,100,234,105,235,428,236,86,237,85,239,240,243,244,245,246,14,429,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,22,278,279,280,281,282,408,283,284,285,286,430,409,287,288,431,289,17,18,16,290,19,53,4,291,292,5,132,119,293,294,295,296,125,432,297,298,410,299,300,301,302,57,303,151,305,306,307,80,81,308,309,310,311,312,69,88,74,313,433,141,142,137,411,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,30,332,434,333,334,24,335,336,11,106,337,29,338,134,339,68,120,340,435,341,58,10,117,133,342,412,71,343,146,344,147,345,346,145,347,114,113,118,348,27,153,349,350,351,352,353,104,354,355,75,64,356,357,54,436,406,358,130,359,360,150,361,91,84,362,363,20,364,365,366,416,367,121,122,63,368,369,61,403,370,371,372,126,437,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,67,148,93,387,388,116,115,389,390,391,392,393,394,129,395,438,396,109,397,398,26,439,399,400,127,217,416,66,127,458,447,459,460,461,462,463,464,138,456,457,465,466,1,2,455,467,128,25,468,446,469,470,471,103,413,124,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,422,180,181,182,183,184,185,186,187,188,189,190,423,191,192,193,194,195,196,197,198,199,200,201,424,202,203,204,205,425,206,207,208,209,210,211,212,90,213,426,214,427,15,215,65,48,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,149,51,225,226,227,228,229,230,231,36,34,35,232,233,43,100,234,105,235,428,236,86,237,85,238,239,240,241,242,243,52,244,245,246,14,429,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,22,278,279,280,281,282,408,283,284,285,286,430,409,287,288,431,289,17,18,16,290,19,53,4,291,292,5,132,119,293,293,294,295,296,125,432,297,298,410,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,69,88,74,313,433,141,142,137,411,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,30,332,434,333,334,24,335,336,11,106,337,29,338,134,339,68,120,340,435,341,58,10,117,133,342,412,71,343,146,344,147,345,346,145,347,114,113,118,348,27,153,349,350,351,352,353,104,354,355,75,64,356,357,54,436,406,358,130,359,360,150,361,91,84,362,363,20,364,365,366,416,367,121,122,63,368,369,61,403,370,371,372,126,437,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,67,148,93,387,388,116,115,389,390,391,392,393,394,129,395,438,396,109,397,398,26,439,399,400,127,85,149,14,14,14,84,155,68,36,436,22,25,153,5,131,30,68,68,411,84,36,36,22,30,106,25,25,128,5,131,68,118,128,128,130,134,24,20,30,5,412,22,22,297,412,129,40,24,40,40,24,24,128,435,5,5,24,297,412,30,22,145,46,22,298,128,297,412,5,130,22,30,30,30,22,22,24,30,30,30,5,24,24,128,435,155,416,122,127,241,242,241,242,241,242,69,52,52,52,52,52,138,155,159,196,90,215,219,220,101,221,222,50,223,49,102,225,226,227,228,232,43,100,234,105,236,244,245,247,248,78,79,250,252,254,95,255,152,23,256,259,260,37,39,38,264,268,279,280,282,283,284,285,286,287,16,53,4,291,132,119,293,300,302,80,308,88,74,313,141,142,137,315,322,323,324,332,334,335,339,58,133,342,348,349,354,355,359,360,91,362,363,367,61,373,374,136,376,378,380,384,385,388,116,390,392,109,26,22,84,5,117,319,320,386,403,1,241,242,241,242,65,125,65,125,65,65,65,65,65,65,65,104,68,68,68,5,123,41,41,153,153,458,447,459,460,461,462,463,464,138,456,457,465,466,1,2,455,467,128,25,468,446,469,470,471,103,413,124,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,422,180,181,182,183,184,185,186,187,188,189,190,423,191,192,193,194,195,196,197,198,199,200,201,424,202,203,204,205,425,206,207,208,209,210,211,212,90,213,426,214,427,15,215,65,48,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,149,51,225,226,227,228,229,230,231,36,34,35,232,233,43,100,234,105,235,428,236,86,237,85,238,239,240,241,242,243,52,244,245,246,14,429,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,22,278,279,280,281,282,408,283,284,285,286,430,409,287,288,431,289,17,18,16,290,19,53,4,291,292,5,132,119,293,294,295,296,125,432,297,298,410,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,69,88,74,313,433,141,142,137,411,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,30,332,434,333,334,24,335,336,11,106,337,29,338,134,339,68,120,340,435,341,58,10,117,133,342,412,71,343,146,344,147,345,346,145,347,114,113,118,348,27,153,349,350,351,352,353,104,354,355,75,64,356,357,54,436,406,358,130,359,360,150,361,91,84,362,363,20,364,365,366,416,367,121,122,63,368,369,61,403,370,371,372,126,437,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,67,148,93,387,388,116,115,389,390,391,392,393,394,129,395,438,396,109,397,398,26,439,399,400,127,14,46,81,69,19,412,294,134,84,5,344,5,5,68,5,5,69,5,14,5,5,5,14,40,25,1,69,5,69,104,53,53,50,123,41,380,380,100,100,100,100,100,100,100,100,100,100,100,100,248,232,49,49,49,49,226,49,49,248,248,49,248,264,264,268,315,247,322,226,322,315,323,392,136,254,215,323,322,322,323,323,322,268,283,23,248,226,49,248,226,226,215,284,373,348,315,248,322,342,342,342,342,221,232,100,49,322,141,141,322,348,49,260,142,142,90,286,283,392,254,136,285,322,323,285,247,285,248,254,49,49,49,49,49,49,49,248,49,49,49,226,49,49,49,248,264,226,264,226,137,226,392,142,142,142,142,221,221,49,322,323,323,373,215,284,222,141,141,222,348,322,232,23,23,23,323,323,259,100,100,287,49,264,247,232,248,232,248,248,248,90,286,287,106,5,117,439,439,439,439,439,439,121,149,382,30,382,382,382,149,51,69,14,149,69,19,35,106,106,106,106,382,84,84,14,69,69,69,14,69,68,71,382,382,35,69,22,84,84,81,69,81,134,24,46,40,40,40,40,40,40,40,40,106,106,106,11,241,242,241,242,243,241,242,321,230,66,0,24,321,230,5,117,95,383,386,21,138,1,128,25,446,413,124,155,65,149,35,235,60,265,267,22,408,409,5,294,125,410,301,411,131,111,30,24,68,435,117,412,145,114,113,118,153,350,351,352,436,406,130,84,365,121,403,126,148,393,394,129,439,1,25,65,149,60,265,267,22,408,409,5,294,125,410,24,68,117,412,153,436,130,84,25,65,149,60,22,408,125,24,68,117,153,436,130,25,65,149,22,408,125,24,436,65,22,65,22,65,65,409,131,262,5,298,130,267,294,296,410,350,351,352,365,412,7,27,46,25,84,131,68,118,5,117,383,153,153,153,30,30,128,241,242,241,242,127,319,319,406,239,155,394,52,22,69,68,84,68,2,291,293,117,265,265,122,403,416,40,40,40,40,40,40,40,103,40,46,40,46,40,40,40,46,40,46,40,40,40,46,125,406,65,40,267,65,22,265,265,5,117,128,435,22,22,5,5,117,5,117,5,117,5,5,117,406,5,153,104,64,36,22,69,68,84,22,69,68,84,22,69,84,69,64,64,64,64,84,84,25,25,149,51,36,69,68,69,25,25,25,25,24,48,127,69,65,125,125,25,65,40,36,267,409,5,125,410,68,117,113,350,406,393,394,36,36,22,65,125,115,22,129,22,5,5,350,128,22,22,129,129,129,22,129,22,22,22,7,22,36,69,14,18,5,30,71,20,18,30,71,20,155,65,65,40,25,40,68,25,24,25,25,41,41,25,25,25,36,103,40,46,436,24,24,24,153,130,413,24,413,130,24,103,25,68,118,68,5,7,7,24,25,22,22,436,413,104,7,104,294,296,412,153,25,68,68,40,40,153,104,40,104,153,153,40,46,40,46,103,103,40,40,24,25,40,40,24,40,40,24,128,25,25,25,25,130,25,25,24,40,155,262,130,262,262,5,5,130,262,262,130,262,298,298,217,148,93,149,125,52,383,0,0,0,0,0,245,245,245,0,0,0,0,0,0,0,0,0,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,0,22,0,128,436,0,0,117,382,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,466,65,5,125,68,153,240,240,240,321,52,22,403,30,24,370,14,41,75,75,246,14,52,2,35,53,138,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,90,213,214,215,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,225,226,227,228,229,230,231,35,232,233,43,100,234,105,235,236,86,237,85,238,239,240,241,242,243,52,244,245,246,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,17,18,16,290,19,53,4,291,292,132,119,293,294,295,296,297,298,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,88,74,313,141,142,137,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,11,106,337,29,338,134,339,120,340,341,58,10,133,342,71,343,146,344,147,345,346,347,114,118,348,27,349,350,351,352,353,104,354,355,75,64,356,357,54,358,130,359,360,150,361,91,84,362,363,364,365,366,367,122,368,369,61,370,371,372,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,387,388,116,389,390,391,392,393,394,395,396,109,397,398,26,399,400,127,14,14,243,5,104,393,22,153,129,46,52,68,68,68,68,458,447,459,460,461,462,463,464,138,456,457,465,466,1,2,455,467,128,25,468,446,469,470,471,103,413,124,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,422,180,181,182,183,184,185,186,187,188,189,190,423,191,192,193,194,195,196,197,198,199,200,201,424,202,203,204,205,425,206,207,208,209,210,211,212,90,213,426,214,427,15,215,65,48,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,149,51,225,226,227,228,229,230,231,36,34,35,232,233,43,100,234,105,235,428,236,86,237,85,238,239,240,241,242,243,52,244,245,246,14,429,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,22,278,279,280,281,282,408,283,284,285,286,430,409,287,288,431,289,17,18,16,290,19,53,4,291,292,5,132,119,293,294,295,296,125,432,297,298,410,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,69,88,74,313,433,141,142,137,411,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,30,332,434,333,334,24,335,336,11,106,337,29,338,134,339,68,120,340,435,341,58,10,117,133,342,412,71,343,146,344,147,345,346,145,347,114,113,118,348,27,153,349,350,351,352,353,104,354,355,75,64,356,357,54,436,406,358,130,359,360,150,361,91,84,362,363,20,364,365,366,416,367,121,122,63,368,369,61,403,370,371,372,126,437,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,67,148,93,387,388,116,115,389,390,391,392,393,394,129,395,438,396,109,397,398,26,439,399,400,127,458,447,459,460,461,462,463,464,138,456,457,465,466,1,2,455,467,128,25,468,446,469,470,471,103,413,124,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,422,180,181,182,183,184,185,186,187,188,189,190,423,191,192,193,194,195,196,197,198,199,200,201,424,202,203,204,205,425,206,207,208,209,210,211,212,90,213,426,214,427,15,215,65,48,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,149,51,225,226,227,228,229,230,231,36,34,35,232,233,43,100,234,105,235,428,236,86,237,85,238,239,240,241,242,243,52,244,245,246,14,429,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,22,278,279,280,281,282,408,283,284,285,286,430,409,287,288,431,289,17,18,16,290,19,53,4,291,292,5,132,119,293,294,295,296,125,432,297,298,410,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,69,88,74,313,433,141,142,137,411,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,30,332,434,333,334,24,335,336,11,106,337,29,338,134,339,68,120,340,435,341,58,10,117,133,342,412,71,343,146,344,147,345,346,145,347,114,113,118,348,27,153,349,350,351,352,353,104,354,355,75,64,356,357,54,436,406,358,130,359,360,150,361,91,84,362,363,20,364,365,366,416,367,121,122,63,368,369,61,403,370,371,372,126,437,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,67,148,93,387,388,116,115,389,390,391,392,393,394,129,395,438,396,109,397,398,26,439,399,400,127,148,383,386,458,447,459,460,461,462,463,464,138,456,457,465,466,1,2,455,467,128,25,468,446,469,470,471,103,413,124,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,422,180,181,182,183,184,185,186,187,188,189,190,423,191,192,193,194,195,196,197,198,199,200,201,424,202,203,204,205,425,206,207,208,209,210,211,212,90,213,426,214,427,15,215,65,48,216,217,92,7,55,218,123,41,219,40,220,101,221,222,50,223,49,224,102,149,51,225,226,227,228,229,230,231,36,34,35,232,233,43,100,234,105,235,428,236,86,237,85,238,239,240,241,242,243,52,244,245,246,14,429,247,248,249,70,78,79,250,251,252,253,254,95,255,152,23,256,257,45,258,46,259,260,37,39,38,261,262,263,59,264,60,265,266,267,268,269,270,271,89,272,273,274,275,276,277,22,278,279,280,281,282,408,283,284,285,286,430,409,287,288,431,289,17,18,16,290,19,53,4,291,292,5,132,119,293,294,295,296,125,432,297,298,410,299,300,301,302,57,303,304,151,305,306,307,80,81,308,309,310,311,312,69,88,74,313,433,141,142,137,411,131,314,111,315,316,317,318,319,320,321,73,322,323,324,325,326,327,328,329,330,331,30,332,434,333,334,24,335,336,11,106,337,29,338,134,339,68,120,340,435,341,58,10,117,133,342,412,71,343,146,344,147,345,346,145,347,114,113,118,348,27,153,349,350,351,352,353,104,354,355,75,64,356,357,54,436,406,358,130,359,360,150,361,91,84,362,363,20,364,365,366,416,367,121,122,63,368,369,61,403,370,371,372,126,437,373,374,96,21,136,135,375,83,376,377,378,379,380,381,382,383,384,385,386,66,67,148,93,387,388,116,115,389,390,391,392,393,394,129,395,438,396,109,397,398,26,439,399,400,127,30,24,30,24,382,48,48,394,230,66,122,0,86,237,318,243,216,128,426,22,433,435,258,84,69,65,54,54,54,54,22,68,84,22,84,54,54,54,406,406,14,5,153,104,406,257,45,258,257,45,258,45,258],"f":[0,0,0,0,0,0,[1,2],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,3,3,4],5],0,0,0,0,0,0,0,0,0,0,0,0,[[6,6,6,6]],0,0,0,[[7,7,7,3,7,8],8],0,[9,10],[[9,9],10],[[],11],[3,10],0,0,0,0,0,0,0,0,0,0,0,0,[[12,13],[[15,[14]]]],[[16,12,13,17],[[15,[18]]]],[[12,13,17],[[15,[19]]]],[[12,13,17],[[15,[10]]]],[[12,13,17],[[15,[20]]]],[[12,13,17],[[15,[21]]]],0,0,0,0,0,0,0,0,0,0,0,[[22,12,13,23,3,3,24,25,26]],[[22,5,27,27,3,6,6,28]],0,0,0,0,0,[29],0,0,0,0,[[30,30],31],[[14,14],31],0,0,0,0,0,0,[32,33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[15,[34]]],2],[[1,12],2],[[35,36],2],[[33,5],31],0,0,0,[[],8],[[],8],[[],13],[[],13],[[25,37],3],[[38,3,39,3],3],[[40,5,27,27,3,28,41],31],[[],42],[[12,13,23,3,3,24,5]],[[],13],[[],13],[[],13],[[],31],[[43,28],44],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[43,31],0,[[],40],0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[],40],0,0,0,0,0,0,0,[[7,7,7,7,31],31],[[7,7,31],31],[[7,7,7,31],31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,3],3],[[3,3,3],3],0,0,0,0,0,0,0,0,[[45,45,45],46],0,0,0,0,0,[[[15,[34]]],47],[[33,13],[[15,[48]]]],[[8,8,49,50],51],[52,[[15,[14]]]],[[7,8,9,8,3,8,53,31],5],[[[15,[34]]],47],[[41,54,28],47],[52,47],[[8,8,49,50,[15,[14]]],51],[[55,49,50],51],[[55,49,50,[15,[14]]],51],[[8,8],51],[55,51],[[12,13,8,56,12],[[15,[57]]]],[[58,3,31],[[15,[10]]]],[[47,51,59,60],47],[[9,9,9]],[[[15,[21]],[15,[21]]],[[15,[21]]]],[2,2],[[12,13],47],[[61,8,7,7,6,8,62],[[15,[63]]]],[[12,13,8],[[15,[57]]]],[[12,13,8],[[15,[57]]]],[[],[[15,[30]]]],[64,[[15,[30]]]],[[12,13],47],[[],[[15,[34]]]],[[],[[15,[57]]]],[[65,66],67],[[65,66],67],[[65,66],67],[68,[[15,[69]]]],[[[15,[34]],70],47],[[[15,[34]],8],[[15,[30]]]],[[34,17],[[15,[71]]]],[[12,13,17],[[15,[71]]]],[[[15,[34]]],[[15,[69]]]],[[[15,[34]]],47],[8,[[15,[34]]]],[72,[[15,[34]]]],[[33,8],[[15,[30]]]],[33,47],[33,[[15,[34]]]],[47,[[15,[69]]]],[[12,13],[[15,[34]]]],[[33,73],[[15,[30]]]],[[[15,[71]],55,40,25,74,[15,[14]],60],[[15,[69]]]],[[55,[15,[71]],40,25,74,[15,[14]],60],47],[[12,13,7,24,23],[[15,[20]]]],[[12,13,3,3,24,23],[[15,[20]]]],[[12,13,75,24,23],[[15,[20]]]],[[36,76,77],[[15,[69]]]],[[47,78,70,79],47],[[64,13],[[15,[34]]]],[[47,8],[[15,[30]]]],[[64,17],[[15,[71]]]],[[12,13,24,23],[[15,[20]]]],[[9,3]],[[7,6,3,8,80,28,40],[[15,[81]]]],[[7,82,[15,[14]],3,8,80,83,40],[[15,[81]]]],[[8,8,50],51],[[8,8,50,[15,[14]]],51],[[8,8],51],[[8,8,[15,[14]]],51],[55,51],[[55,[15,[14]]],51],[[8,8],[[15,[84]]]],[41,[[15,[71]]]],[[85,86],[[15,[14]]]],[[7,3,6,3,8,80,28,40],[[15,[81]]]],[[7,3,82,[15,[14]],3,8,80,83,40],[[15,[81]]]],[[51,13,60],[[15,[84]]]],[36,[[15,[69]]]],[[51,[15,[34]],13],[[15,[69]]]],[[51,12,13,60],47],[[51,12,13,60],[[15,[84]]]],[[51,12,13,87,12,60],[[15,[84]]]],[[[15,[34]],8,8,88],[[15,[69]]]],[[8,8,60],[[15,[84]]]],[[89,90,51,8,91,60,31],[[15,[84]]]],[[8,8,50],51],[[],[[15,[14]]]],[[],[[15,[14]]]],[[34,13,13],[[15,[34]]]],[[[15,[21]],[15,[21]]],[[15,[21]]]],[[3,3,6,3,8,80,3,3,28,40],[[15,[81]]]],[[3,3,82,[15,[14]],3,8,80,3,3,83,40],[[15,[81]]]],[[[15,[81]],92],93],[[7,3,7,3,6,3,8,80,28,40],[[15,[81]]]],[[7,3,7,3,82,[15,[14]],3,8,80,83,40],[[15,[81]]]],[13,[[15,[34]]]],[[8,8],51],[33,[[15,[34]]]],[[12,13],[[15,[34]]]],[[12,13,94,12],[[15,[34]]]],[13,[[15,[34]]]],0,0,0,[95,[[15,[96]]]],0,0,0,0,0,[33,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[97,3],0,[49],0,0,0,0,0,[[41,4],5],0,[[41,4,98],5],0,0,0,[[99,99,99],46],[[55,43,100,101,55],8],[[43,100,8]],0,0,[[7,8,31,53,31],5],0,0,0,0,0,[[]],[[]],[[]],0,0,0,[102,103],[[104,4],5],[[104,4,98],5],[[41,3,3,4],5],0,0,0,0,0,0,[105,49],[[41,4,98],5],0,[[41,41],46],[[],[[15,[106]]]],[[],[[15,[106]]]],[[87,87]],[[33,32]],[[]],0,0,0,[78,33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3],[33],[8,8],[13,13],[107,107],[42,42],[13,13],[13,13],[108,108],0,0,0,[13,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[100],0,0,0,[[5,65,109]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[30,110],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[102,103],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[111],[[22,51,13,92],12],[22,112],[[113,[15,[114]]]],[[115,5,116]],[[5,41,3,3],5],[[117,41,3,3],117],[[5,3,3,3,4],5],[[117,3,3,3,4],117],[[118,[15,[114]]]],[[5,41,4],5],[[117,41,4,98],117],[[5,41,4,98],5],[[5,5,3,3,119],5],[[117,5],117],[[5,5,40,119],5],[[5,7,8,31],5],[[117,7,8,31],117],[[5,104,4],5],[[117,104,4,98],117],[[5,104,4,98],5],[[5,41,4,98],5],[[117,41,4,98],117],[[5,41,3,3,4],5],[[5,41,3,4],5],0,[[68,8,8,31]],[[68,51,13]],[[68,51]],[68],[[68,120]],[[68,51,28]],[[121,24,8,3,3,41],122],[[121,24,8,41],122],[[121,24,8,3,41],122],[[121,24,8],122],[[121,24,8,3,3,8,41],122],[[121,24,8,8,41],122],[[121,24,8,3,8,41],122],[[121,24,8,8,41],122],[69,50],[[22,123]],[[118,8,8,13]],[[124,[15,[106]]]],[125],[[125,8]],[[125,12,8],12],[[126,33,33,99]],[[126,33,33]],[[126,33,33,8]],[[126,33,33,33]],[[126,33,33]],[[65,33,127]],[[128,12,12,8]],[[129,22]],[[130,25]],[[130,5,5],31],[5,13],[131,13],[[10,41],41],[63,13],[[5,41,3,3,31],5],[[117,41,3,3,31],117],[[5,3,3,3,3,3],5],[[117,7,7,3],117],[[5,3,3,3,132,4,3,3],5],[[117,7,3,133,4,7],117],[[134,19],31],[[19,99],31],[[19,6,95],31],[[21,135],136],[[40,3],31],[25],[68,[[15,[69]]]],[[69,68,137],31],[95,87],[138],[138],[[69,51,123,139,140]],[[69,51,123,141,142,139,140]],[[84,51,123,141,142,143,144]],[[69,102,[15,[14]],123,55,141,142,139,140]],[[84,102,[15,[14]],123,55,141,142,143,144]],[[57,8,13],12],[[57,8],13],0,0,[[111,3,3,41],22],[[145,41,[15,[146]]],22],[[145,41,147],22],0,[148,96],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[149,8],0,[25,31],[134,31],[84,[[15,[150]]]],[113],[[84,151],31],[[22,5,152,31]],[[22,104,152,31]],[[22,41,152,31]],[[22,153,152]],[[22,[15,[81]],152]],[138,138],[[[155,[154]]],[[155,[154]]]],[156,156],[[[157,[154]]],[[157,[154]]]],[158,158],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[[[177,[154]]],[[177,[154]]]],[[[178,[154]]],[[178,[154]]]],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[[[188,[154]]],[[188,[154]]]],[189,189],[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[[[203,[154]]],[[203,[154]]]],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[90,90],[213,213],[214,214],[215,215],[216,216],[[[217,[154]]],[[217,[154]]]],[92,92],[7,7],[55,55],[218,218],[123,123],[41,41],[219,219],[40,40],[220,220],[101,101],[221,221],[222,222],[50,50],[223,223],[49,49],[224,224],[102,102],[225,225],[226,226],[227,227],[228,228],[229,229],[230,230],[231,231],[35,35],[232,232],[233,233],[43,43],[100,100],[234,234],[105,105],[235,235],[236,236],[86,86],[237,237],[85,85],[238,238],[239,239],[240,240],[241,241],[242,242],[243,243],[52,52],[244,244],[245,245],[246,246],[247,247],[248,248],[249,249],[70,70],[78,78],[79,79],[250,250],[251,251],[252,252],[253,253],[254,254],[95,95],[255,255],[152,152],[23,23],[256,256],[257,257],[45,45],[258,258],[46,46],[259,259],[260,260],[37,37],[39,39],[38,38],[261,261],[262,262],[263,263],[59,59],[264,264],[60,60],[265,265],[266,266],[267,267],[268,268],[269,269],[270,270],[271,271],[89,89],[272,272],[273,273],[274,274],[275,275],[276,276],[277,277],[278,278],[279,279],[280,280],[281,281],[282,282],[283,283],[284,284],[285,285],[286,286],[287,287],[288,288],[289,289],[17,17],[18,18],[16,16],[290,290],[19,19],[53,53],[4,4],[291,291],[292,292],[132,132],[119,119],[293,293],[294,294],[295,295],[296,296],[297,297],[298,298],[299,299],[300,300],[301,301],[302,302],[57,57],[303,303],[304,304],[151,151],[305,305],[306,306],[307,307],[80,80],[81,81],[308,308],[309,309],[310,310],[311,311],[312,312],[88,88],[74,74],[313,313],[141,141],[142,142],[137,137],[131,131],[314,314],[111,111],[315,315],[316,316],[317,317],[318,318],[319,319],[320,320],[321,321],[73,73],[322,322],[323,323],[324,324],[325,325],[326,326],[327,327],[328,328],[329,329],[330,330],[331,331],[332,332],[333,333],[334,334],[335,335],[336,336],[11,11],[106,106],[337,337],[29,29],[338,338],[134,134],[339,339],[120,120],[340,340],[341,341],[58,58],[10,10],[133,133],[342,342],[71,71],[343,343],[146,146],[344,344],[147,147],[345,345],[346,346],[347,347],[114,114],[118,118],[348,348],[27,27],[349,349],[350,350],[351,351],[352,352],[353,353],[104,104],[354,354],[355,355],[75,75],[64,64],[356,356],[357,357],[54,54],[358,358],[130,130],[359,359],[360,360],[150,150],[361,361],[91,91],[84,84],[362,362],[363,363],[364,364],[365,365],[366,366],[367,367],[122,122],[368,368],[369,369],[61,61],[370,370],[371,371],[372,372],[373,373],[374,374],[96,96],[21,21],[136,136],[135,135],[375,375],[83,83],[376,376],[377,377],[378,378],[[[379,[154]]],[[379,[154]]]],[380,380],[381,381],[382,382],[383,383],[384,384],[385,385],[386,386],[66,66],[387,387],[388,388],[116,116],[389,389],[390,390],[391,391],[392,392],[393,393],[394,394],[395,395],[396,396],[109,109],[397,397],[398,398],[26,26],[399,399],[400,400],[127,127],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[111],[117,117],0,[[[155,[401]],155],402],0,[148,19],[149,14],[51,14],[36,14],[69,14],[68,14],[69,49],0,[403,6],[117,41],[[51,13],13],[[25,41,41],41],[[301,99],7],[36,31],[[51,8,8,13],13],[153,8],[5,41],[[1,13],13],[[35,13,13],13],[[301,99],99],[[22,40]],[[22,46]],[[5,3,3,3,3,3],5],[[117,7,7,3],117],[[5,41],31],[[5,3,3],31],[[153,404,404],31],[[104,41],31],[[153,123],31],[[153,153],31],0,0,[[34,13,13,12],13],[[30,405],[[15,[34]]]],[[406,12]],[[406,12]],[113,8],0,0,[106,8],[30,8],[134,8],[5,8],[30,8],[5,8],[30,333],[[30,330,326],9],[[106,8],11],0,[[5,3,3,3,3,3,3],5],[[117,7,7,7],117],0,0,0,0,0,[[40,218,40],31],0,[[],138],[[],[[155,[407]]]],[[],102],[[],95],[[],152],[[],39],[[],38],[[],282],[[],4],[[],80],[[],58],[[],109],[25],[65],[149],[265],[408],[409],[5],[125],[410],[306],[411],[68],[117],[412],[145],[113],[153],[121],[126],[129],[413,[[15,[30]]]],[411,[[15,[306]]]],[117,5],[403,[[15,[63]]]],[406,[[15,[34]]]],[406,47],[[25,41,41,37],41],[[393,3,3,3],3],[[129,3,3,3],3],[[131,22,40]],[[84,22,3,3,230,25]],[[131,22,3,3]],[[84,[15,[306]],8,8],31],[[22,41,33,34]],[[22,41,3,3,31,25]],[[22,69,75,41,6,8,95,230,41,25]],[[22,3,3,3,25]],[[22,82,95]],[[22,104,104,25]],[[22,131,40]],[[22,131,3,3]],[[22,8,414,7,28,8,33,7,24,25]],[[22,8,414,7,7,24,25]],[[22,8,414,75,7,24,25]],[[22,69,3,3,230,25]],[[22,69,281,41,227,25]],[[22,69,123,41,227,25]],[[22,69,41,41,230,25,280]],[[22,69,41,230,25]],[[22,3,3,3,3,25]],[[22,274,[15,[96]],25]],[[22,41,25]],[[22,25]],[[22,7,6,7,95,25]],[[22,5,25]],[[22,71,40,25]],[[22,3,3,25]],[[22,279,13,7,25]],[[22,104,25]],[[22,41,25]],[[22,153,25]],[[22,41,3,3,25]],[[22,12,13,23,3,3,24,25]],[[22,20,3,3,25]],[[22,63,95,25]],[[22,15,95,25]],[[41,31]],[40],[46],[[5,54,31]],[24],[[104,31]],[[5,54,31]],[[104,31],65],0,0,[[235,105,8]],[[69,223,8],[[15,[34]]]],[69,[[15,[34]]]],[111],[[138,138],31],[[[155,[415]],155],31],[[159,159],31],[[196,196],31],[[90,90],31],[[215,215],31],[[219,219],31],[[220,220],31],[[101,101],31],[[221,221],31],[[222,222],31],[[50,50],31],[[223,223],31],[[49,49],31],[[102,102],31],[[225,225],31],[[226,226],31],[[227,227],31],[[228,228],31],[[232,232],31],[[43,43],31],[[100,100],31],[[234,234],31],[[105,105],31],[[236,236],31],[[244,244],31],[[245,245],31],[[247,247],31],[[248,248],31],[[78,78],31],[[79,79],31],[[250,250],31],[[252,252],31],[[254,254],31],[[95,95],31],[[255,255],31],[[152,152],31],[[23,23],31],[[256,256],31],[[259,259],31],[[260,260],31],[[37,37],31],[[39,39],31],[[38,38],31],[[264,264],31],[[268,268],31],[[279,279],31],[[280,280],31],[[282,282],31],[[283,283],31],[[284,284],31],[[285,285],31],[[286,286],31],[[287,287],31],[[16,16],31],[[53,53],31],[[4,4],31],[[291,291],31],[[132,132],31],[[119,119],31],[[293,293],31],[[300,300],31],[[302,302],31],[[80,80],31],[[308,308],31],[[88,88],31],[[74,74],31],[[313,313],31],[[141,141],31],[[142,142],31],[[137,137],31],[[315,315],31],[[322,322],31],[[323,323],31],[[324,324],31],[[332,332],31],[[334,334],31],[[335,335],31],[[339,339],31],[[58,58],31],[[133,133],31],[[342,342],31],[[348,348],31],[[349,349],31],[[354,354],31],[[355,355],31],[[359,359],31],[[360,360],31],[[91,91],31],[[362,362],31],[[363,363],31],[[367,367],31],[[61,61],31],[[373,373],31],[[374,374],31],[[136,136],31],[[376,376],31],[[378,378],31],[[380,380],31],[[384,384],31],[[385,385],31],[[388,388],31],[[116,116],31],[[390,390],31],[[392,392],31],[[109,109],31],[[26,26],31],[[65,65],31],[[34,34],31],[[65,33],31],[[65,33,13],31],[[36,6,123],31],[[125,8,8]],[[68,82,14,123]],[[36,82,14,123],31],[[68,82,123]],[[68,6,123]],[[68,82,14]],[[68,6]],0,[[365,416],31],[[22,408,8,7,40,230,25,280]],[[22,41,7,417,82,95]],[[68,68,25,120,92],31],[[36,36,123],31],[[68,68,123],31],0,0,0,0,0,0,0,0,0,0,0,0,[262,98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[130,28],0,[262,98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[262,98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,9],0,0,0,0,[130,28],[262,98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[262,98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[130,28],0,[262,98],0,0,0,0,0,0,0,0,[298,98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[298,98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[134,123,40,339,123],123],[[19,6],6],[[19,82,14,14],82],[[21,5,5,130,41],31],[[21,5,5,130,41,40],31],[[382,418],386],[[382,418],383],[145,[[15,[131]]]],[145,[[15,[71]]]],[[145,41],[[15,[71]]]],0,0,[22],[84],[[84,31]],[[138,419],420],[[[155,[421]],419],420],[[156,419],420],[[[157,[421]],419],420],[[158,419],420],[[159,419],420],[[160,419],420],[[161,419],420],[[162,419],420],[[163,419],420],[[165,419],420],[[166,419],420],[[167,419],420],[[168,419],420],[[169,419],420],[[170,419],420],[[171,419],420],[[172,419],420],[[173,419],420],[[174,419],420],[[175,419],420],[[176,419],420],[[[177,[421]],419],420],[[[178,[421]],419],420],[[179,419],420],[[422,419],420],[[180,419],420],[[181,419],420],[[182,419],420],[[183,419],420],[[184,419],420],[[185,419],420],[[186,419],420],[[187,419],420],[[[188,[421]],419],420],[[189,419],420],[[190,419],420],[[423,419],420],[[191,419],420],[[192,419],420],[[193,419],420],[[194,419],420],[[195,419],420],[[196,419],420],[[197,419],420],[[198,419],420],[[199,419],420],[[200,419],420],[[201,419],420],[[424,419],420],[[202,419],420],[[[203,[421]],419],420],[[204,419],420],[[205,419],420],[[425,419],420],[[206,419],420],[[207,419],420],[[208,419],420],[[211,419],420],[[212,419],420],[[90,419],420],[[213,419],420],[[426,419],420],[[214,419],420],[[427,419],420],[[[15,[421]],419],420],[[215,419],420],[[65,419],420],[[48,419],420],[[216,419],420],[[[217,[421]],419],420],[[92,419],420],[[7,419],420],[[55,419],420],[[218,419],420],[[123,419],420],[[41,419],420],[[219,419],420],[[40,419],420],[[220,419],420],[[101,419],420],[[221,419],420],[[222,419],420],[[50,419],420],[[223,419],420],[[49,419],420],[[224,419],420],[[102,419],420],[[149,419],420],[[51,419],420],[[225,419],420],[[226,419],420],[[227,419],420],[[228,419],420],[[229,419],420],[[230,419],420],[[231,419],420],[[36,419],420],[[34,419],420],[[35,419],420],[[232,419],420],[[233,419],420],[[43,419],420],[[100,419],420],[[234,419],420],[[105,419],420],[[235,419],420],[[428,419],420],[[236,419],420],[[86,419],420],[[237,419],420],[[85,419],420],[[239,419],420],[[240,419],420],[[243,419],420],[[244,419],420],[[245,419],420],[[246,419],420],[[14,419],420],[[429,419],420],[[247,419],420],[[248,419],420],[[249,419],420],[[70,419],420],[[78,419],420],[[79,419],420],[[250,419],420],[[251,419],420],[[252,419],420],[[253,419],420],[[254,419],420],[[95,419],420],[[255,419],420],[[152,419],420],[[23,419],420],[[256,419],420],[[257,419],420],[[45,419],420],[[258,419],420],[[46,419],420],[[259,419],420],[[260,419],420],[[37,419],420],[[39,419],420],[[38,419],420],[[262,419],420],[[263,419],420],[[59,419],420],[[264,419],420],[[60,419],420],[[265,419],420],[[266,419],420],[[267,419],420],[[268,419],420],[[269,419],420],[[270,419],420],[[271,419],420],[[89,419],420],[[272,419],420],[[273,419],420],[[274,419],420],[[275,419],420],[[276,419],420],[[277,419],420],[[22,419],420],[[278,419],420],[[279,419],420],[[280,419],420],[[281,419],420],[[282,419],420],[[408,419],420],[[283,419],420],[[284,419],420],[[285,419],420],[[286,419],420],[[430,419],420],[[409,419],420],[[287,419],420],[[288,419],420],[[431,419],420],[[289,419],420],[[17,419],420],[[18,419],420],[[16,419],420],[[290,419],420],[[19,419],420],[[53,419],420],[[4,419],420],[[291,419],420],[[292,419],420],[[5,419],420],[[132,419],420],[[119,419],420],[[293,419],420],[[294,419],420],[[295,419],420],[[296,419],420],[[125,419],420],[[432,419],420],[[297,419],420],[[298,419],420],[[410,419],420],[[299,419],420],[[300,419],420],[[301,419],420],[[302,419],420],[[57,419],420],[[303,419],420],[[151,419],420],[[305,419],420],[[306,419],420],[[307,419],420],[[80,419],420],[[81,419],420],[[308,419],420],[[309,419],420],[[310,419],420],[[311,419],420],[[312,419],420],[[69,419],420],[[88,419],420],[[74,419],420],[[313,419],420],[[433,419],420],[[141,419],420],[[142,419],420],[[137,419],420],[[411,419],420],[[131,419],420],[[314,419],420],[[111,419],420],[[315,419],420],[[316,419],420],[[317,419],420],[[318,419],420],[[319,419],420],[[320,419],420],[[321,419],420],[[73,419],420],[[322,419],420],[[323,419],420],[[324,419],420],[[325,419],420],[[326,419],420],[[327,419],420],[[328,419],420],[[329,419],420],[[330,419],420],[[331,419],420],[[30,419],420],[[332,419],420],[[434,419],420],[[333,419],420],[[334,419],420],[[24,419],420],[[335,419],420],[[336,419],420],[[11,419],420],[[106,419],420],[[337,419],420],[[29,419],420],[[338,419],420],[[134,419],420],[[339,419],420],[[68,419],420],[[120,419],420],[[340,419],420],[[435,419],420],[[341,419],420],[[58,419],420],[[10,419],420],[[117,419],420],[[133,419],420],[[342,419],420],[[412,419],420],[[71,419],420],[[343,419],420],[[146,419],420],[[344,419],420],[[147,419],420],[[345,419],420],[[346,419],420],[[145,419],420],[[347,419],420],[[114,419],420],[[113,419],420],[[118,419],420],[[348,419],420],[[27,419],420],[[153,419],420],[[349,419],420],[[350,419],420],[[351,419],420],[[352,419],420],[[353,419],420],[[104,419],420],[[354,419],420],[[355,419],420],[[75,419],420],[[64,419],420],[[356,419],420],[[357,419],420],[[54,419],420],[[436,419],420],[[406,419],420],[[358,419],420],[[130,419],420],[[359,419],420],[[360,419],420],[[150,419],420],[[361,419],420],[[91,419],420],[[84,419],420],[[362,419],420],[[363,419],420],[[20,419],420],[[364,419],420],[[365,419],420],[[366,419],420],[[416,419],420],[[367,419],420],[[121,419],420],[[122,419],420],[[63,419],420],[[368,419],420],[[369,419],420],[[61,419],420],[[403,419],420],[[370,419],420],[[371,419],420],[[372,419],420],[[126,419],420],[[437,419],420],[[373,419],420],[[374,419],420],[[96,419],420],[[21,419],420],[[136,419],420],[[135,419],420],[[375,419],420],[[83,419],420],[[376,419],420],[[377,419],420],[[378,419],420],[[[379,[421]],419],420],[[380,419],420],[[381,419],420],[[382,419],420],[[383,419],420],[[384,419],420],[[385,419],420],[[386,419],420],[[66,419],420],[[67,419],420],[[148,419],420],[[93,419],420],[[387,419],420],[[388,419],420],[[116,419],420],[[115,419],420],[[389,419],420],[[390,419],420],[[391,419],420],[[392,419],420],[[393,419],420],[[394,419],420],[[129,419],420],[[395,419],420],[[438,419],420],[[396,419],420],[[109,419],420],[[397,419],420],[[398,419],420],[[26,419],420],[[439,419],420],[[399,419],420],[[400,419],420],[[127,419],420],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[291,293],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[149,31],[14,31],[14,31],[[14,14,86]],[84,28],[[155,13,9],47],[[68,8,8],12],[[36,8,8],99],[436,12],[22,60],[[25,95],95],[[153,5],31],[5,41],[131,41],[30,41],[[68,41]],[[68,123]],[411,22],[84,22],[[36,8,8],6],[[36,8,8],82],[22,123],[[30,65]],[[106,8,65]],[[25,5,5,41,3],31],[[25,5,5,41,40],31],[128,9],[5,28],[131,28],[68,28],[118,28],[[128,51,251]],[128],[130,3],[[134,8],134],[[24,414,8,7,3,3,25]],[[20,3,3,25],8],[[30,414,8,404],31],[[5,7],31],[412,3],[22,41],[22,46],[[297,3,40,440],31],[[412,3,40,441],31],[[129,40]],[40,3],[[24,336],3],[[40,3],31],[40,3],[[24,414,5],31],[[24,414,8,87,12]],[[128,51,12,13,251],78],[[435,51,12,13],31],[[5,8],7],[[5,7,8],8],[[24,414,8,7,7]],[[297,3,7,97],31],[[412,3,7,97],31],[[30,65],31],[[22,60],31],[145,22],[[46,3]],[22,8],[298,3],[[128,12,8,13],8],[[297,3,3,5,31],31],[[412,3,3,5,31],31],[5,28],[130,360],[22,84],[[30,405,13,13,12],13],[[30,405],13],[[30,405],8],[22,60],[22,40],[24,30],[30,8],[[30,321,8],8],[[30,318,8],8],[[5,9,8],8],[[24,414,8,3,41,25]],[[24,414,8,3,3]],[[128,2],78],[[435,2],31],[[155,13],31],0,0,0,0,0,0,0,0,0,[69,31],0,0,0,0,0,[138],[[[155,[442]]]],[159],[196],[90],[215],[219],[220],[101],[221],[222],[50],[223],[49],[102],[225],[226],[227],[228],[232],[43],[100],[234],[105],[236],[244],[245],[247],[248],[78],[79],[250],[252],[254],[95],[255],[152],[23],[256],[259],[260],[37],[39],[38],[264],[268],[279],[280],[282],[283],[284],[285],[286],[287],[16],[53],[4],[291],[132],[119],[293],[300],[302],[80],[308],[88],[74],[313],[141],[142],[137],[315],[322],[323],[324],[332],[334],[335],[339],[58],[133],[342],[348],[349],[354],[355],[359],[360],[91],[362],[363],[367],[61],[373],[374],[136],[376],[378],[380],[384],[385],[388],[116],[390],[392],[109],[26],[22,51],[84,51],[[5,8]],[[117,8,8]],0,0,0,[403,62],[[1,12,36],31],0,0,0,0,[[65,13,33]],[[125,8],12],[[65,13,33,13]],[[125,8,8,12],12],[[65,13,28,8]],[[65,13,404]],[[65,13,443,8]],[[65,13,3]],[[65,13,28]],[[65,13,47,8]],[[65,13,444]],[[104,3,3,104]],[[68,231],31],[[68,51,12,13,87,12],31],[[68,36],31],[[5,5,3,5],31],[[123,123,123],31],[[41,41],31],[[41,41,41],31],[[153,123],31],[[153,153],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,85]],[[46,46],31],[[81,40,80],69],[69,31],[19,31],[412,31],[294,31],[[134,19],31],[[84,151],31],[5,31],0,[5,31],[5,31],[68,31],[[5,5],31],[5,31],[69,31],[[5,7],31],[[14,85],31],[[5,41],31],[[5,104],31],[[5,41,31,4],31],[14,31],[[40,3],31],[25,31],[[1,235],31],[69,31],[5,31],[[69,89],31],[104,31],[53,31],[53,31],[50,31],[[123,123]],[[41,41]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[106,33,73],[[15,[30]]]],[[5,3,3],5],[[117,7],117],0,0,0,0,0,0,[121,[[15,[20]]]],[[149,50],149],[[382,[15,[34]],[379,[148]]],[[15,[96]]]],[[30,316],[[15,[30]]]],[[382,[15,[34]]],[[15,[19]]]],[[382,[15,[34]],15,13],[[15,[19]]]],[[382,[15,[34]],[379,[148]]],[[15,[19]]]],[[149,[15,[14]]],149],[[51,[15,[14]]],51],[[69,[15,[14]],311],[[15,[69]]]],[14,[[15,[14]]]],[[149,49],149],[[69,49,[15,[14]],311],[[15,[69]]]],[[19,[15,[19]]],[[15,[19]]]],[[35,55],35],[[106,[15,[34]],8],[[15,[30]]]],[[106,33,8],[[15,[30]]]],[[106,47,8],[[15,[30]]]],[[106,47,316],[[15,[30]]]],[[382,89,[15,[34]],[379,[148]],40,51,31],[[15,[69]]]],[84,[[15,[69]]]],[[84,123],[[15,[69]]]],[14,[[15,[14]]]],[69,[[15,[69]]]],[[69,313],[[15,[69]]]],[[69,80,80,230,40],[[15,[81]]]],[14,[[15,[14]]]],[[69,80,80,230,40],[[15,[81]]]],[[68,80,80,230,40],[[15,[81]]]],[[71,80,80,227,40,41],[[15,[81]]]],[[382,[15,[34]],15,13,40],[[15,[81]]]],[[382,[15,[34]],[379,[148]],40],[[15,[81]]]],[[35,100],35],[[69,123,311],[[15,[69]]]],[[22,51,60],[[15,[84]]]],[[84,51],[[15,[84]]]],[[84,8,8],[[15,[84]]]],[[81,[15,[19]]],[[15,[81]]]],[[69,89,134,123,123,123,92],[[15,[69]]]],[[81,40],[[15,[81]]]],[[134,40],[[15,[134]]]],[[24,3],24],[[46,99,99,99,99],258],[[40,27,27,8]],[[40,27,7,8]],[[40,7,7,8]],[[40,3],3],[[40,41,41,219],31],[[40,41,41]],[[40,97,97,8]],[[40,3,3,7]],[[106,33],11],[[106,33,73],30],[[106,33,73,33,8,444],30],[[11,73],30],0,0,0,0,0,0,0,0,0,0,0,[[24,12,13,23,41,25],3],0,0,[[5,3,3],5],[[117,7],117],[95,445],0,0,[21,31],[[],138],[[35,49,13],1],[[429,244,47,101],128],[[],25],[[[15,[272]],[15,[134]],25],446],[[],413],[[],124],[[],155],[[],65],[[],149],[[55,43,100,102,101,234,234],35],[447,235],[[],60],[[13,8],265],[[],267],[[],22],[[[15,[69]],41,41,8,99,98,31],408],[272,409],[[],5],[[],294],[8,125],[[],410],[[7,7],301],[151,411],[[],131],[54,111],[[73,31],30],[[],24],[[],68],[[51,28],435],[[],117],[[],412],[[],145],[[],114],[[],113],[[8,8,12,13],118],[[],153],[153,350],[[153,123],351],[[153,8,8,8],352],[[],436],[406,406],[359,130],[[8,8,60],84],[20,365],[[],121],[[61,8,8,28],403],[[],126],[[[15,[18]]],148],[[],393],[[],394],[[],129],[[12,13,87,87,87],439],[[35,105,13],1],[[82,14],25],[13,65],[[49,50,[15,[14]]],149],[[28,264],60],[[13,12,13,8],265],[[265,268],267],[[8,8,60],22],[[[15,[69]],41,41,99,98],408],[409,409],[5,5],[[5,31],294],[[12,8,8],125],[[5,31,3],410],[[[15,[30]],3],24],[68,68],[53,117],[[5,31,3],412],[153,153],[13,436],[[25,37,3],130],[[51,60],84],[25,25],[33,65],[149,149],[60,60],[[[15,[272]]],22],[[],408],[125,125],[[[15,[30]]],24],[68,68],[5,117],[123,153],[[12,13,31],436],[[25,3],130],[25,25],[[33,13],65],[149,149],[68,22],[408,408],[125,125],[[[15,[30]],3,3,3],24],[[[15,[34]]],436],[65,65],[[68,60],22],[65,65],[123,22],[448,65],[418,65],[[409,[15,[272]],[15,[134]],25]],[131,71],[[98,98,98,98,98,98],155],[[9,9],155],[[98,98],155],[[28,28,28],155],[267,12],[[294,7],293],[[296,7],293],[410,[[15,[297]]]],[350],[351],[[352,8,8],31],[[365,366],31],[412,31],[7,31],[27,31],[46],[25,31],[[84,362]],[131],[68],[118],[[5,3,3,5]],[[117,3,3],117],0,[[153,123,153,349],31],[[153,153,123,349],31],[[153,153,153,349],31],[[30,8],47],[[30,8],47],[[128,8],8],0,0,0,0,0,0,0,[406],0,[[[155,[449]],155],[[87,[402]]]],[[394,393,40]],0,[[22,36],31],[[69,36],31],[[68,36],31],[[84,36],31],[68,92],[2,1],[291,13],[293,13],[[117,7,8],117],[265],[265],0,[403,7],0,[[40,40],40],[[40,3,3,3],40],[[40,3],40],[[40,3,3,3,3],40],[[40,3,3],40],[[40,3,3,3,3],40],[[40,3,3],40],[[103,99,99,99,99]],[[40,3,3],40],[[46,3,3,3],46],[[40,40],40],[[46,40],46],[[40,3,3,3],40],[[40,3],40],[[40,3,3,3,3],40],[[46,3,3],46],[[40,3,3],40],[[46,3,3,3],46],[[40,3,3,3,3],40],[[40,3,3],40],[[40,3,3],40],[[46,3,3,3],46],[125,12],[[406,406]],[[65,33,127]],[[40,3],31],[267,12],[[65,33,127]],[[22,5,273]],[265,12],[265,12],[[5,3,3,3,3],5],[[117,7,7],117],[[128,235,1],31],[[435,235,1],31],[[22,41],31],[[22,5],31],[[5,3,3,3,132,4,3,3],5],[[5,3,3,3,3,3],5],[[117,7,7,3],117],[[5,3,3,3,3,3,3],5],[[117,7,7,7],117],[[5,3,3],5],[[117,7],117],[[5,3,3],5],[[5,3,3,3,3],5],[[117,7,7],117],[[406,12,13,13],31],[[5,12,13],13],[[153,12,13],13],[[104,12,13],13],[[64,13],31],[[36,51,12,13,8,8],31],[[22,51,12,13,8,8],31],[[69,311,51,12,13,8,8,313],31],[[68,51,12,13,8,8],31],[[84,36,8,8],31],[[22,36,8,8],31],[[69,311,36,8,8,313],31],[[68,36,8,8],31],[[84,51,12,13,8,8],31],[[22,68,8,8],31],[[69,51,12,13,8,8,313],31],[[84,68,8,8],31],[[69,36,8,8,313],31],[[64,450],31],[[64,404],31],[[64,451],31],[[64,3],31],[84,277],[84,89],[25,[[15,[96]]]],[25,[[15,[19]]]],[149,[[15,[14]]]],[51,[[15,[14]]]],[36,[[15,[14]]]],[69,[[15,[14]]]],[68,[[15,[14]]]],[69,[[15,[34]]]],[25,[[15,[134]]]],[25,[[15,[10]]]],[25,[[15,[21]]]],[25,[[15,[81]]]],[24,[[15,[30]]]],[48],0,[[69,[15,[14]]],[[15,[69]]]],[[65,13,13]],[[125,8]],[[125,8]],[25],[65],[40,40],[36],[[267,265,268]],[[409,272]],[5,5],[125],[[410,5,31,3]],[68],[117,117],[113],[[350,153]],[406],[393],[394],[[36,51,12,13]],[[36,231],31],[22],[[65,13]],[[125,8]],[[115,5],31],[22],[129],[[22,8]],[[5,5],5],[5,5],[350,31],[128,31],[[22,3]],[[22,3,3,3]],[[129,3]],[[129,3]],[[129,3]],[22,8],[129],[[22,41,25],8],[[22,278],8],[[22,41,452],8],[[7,3,7]],[[22,3,3]],[[36,36,230],31],[[69,36,230,313],31],[14,[[15,[34]]]],[[18,289],[[15,[34]]]],[5,[[15,[34]]]],[[30,54,332]],[[71,289],[[15,[34]]]],[[20,289,12,13],13],[[18,12,13,289],13],[[30,332],[[15,[34]]]],[[71,54,289]],[[20,289],[[15,[34]]]],[[155,13,9,47]],[[65,33]],[[65,33,13]],[[40,3],40],[[25,452,452,452,452]],[[40,3],40],[[68,50],31],[[25,99]],[[24,31]],[[25,95]],[[25,[15,[96]]]],[[41,7,8],31],[[41,7,8]],[[25,6]],[[25,82,14]],[[25,[15,[19]]]],[[36,[15,[14]]]],[[103,103,103]],[[40,40,40],40],[[46,46,46],46],[[436,[15,[34]]]],[[24,335]],[[24,31]],[[24,31]],[153,31],[130],[[413,73]],[[24,31]],[[413,414,99,5]],[130],[[24,256]],[103],[[25,[15,[134]]]],[68],[118],[[68,51,13],31],[[5,3,3]],[[7,3],31],[[7,3,3,3],31],[[24,31]],[[25,[15,[10]]]],[[22,46]],[[22,40]],[[436,12,13]],[[413,336,99]],[[104,41,3,3,3,3]],[[7,3,3],31],[[104,41]],[[294,5,31]],[[296,5]],[[412,5,31]],[[153,5,153],31],[[25,[15,[21]]]],[[68,[15,[118]],8,8]],[[68,12]],[[40,7,7,8],31],[[40,75],40],[[153,123],31],[[104,41,97]],[[40,41,41,220],31],[[104,41,3,3]],[[153,123,8],31],[[153,153],31],[[40,3,3,3],40],[[46,45,3],46],[[40,3],40],[[46,45,3,3],46],[[103,99]],[[103,99,99,99,99]],[[40,3,3,3,3],40],[[40,3,3],40],[[24,3]],[[25,[15,[81]]]],[[40,3,3,3,3],40],[[40,3,3],40],[[24,3]],[[40,3,3,3,3],40],[[40,3,3],40],[[24,3]],[[128,244]],[[25,31]],[[25,39]],[[25,38]],[[25,3]],[[130,3,31]],[[25,3]],[[25,37]],[[24,31]],[[40,3,3],40],[[155,13,31]],[[262,98]],[[130,28]],[[262,98]],[[262,98]],[[5,9]],[[5,9]],[[130,28]],[[262,98]],[[262,98]],[[130,28]],[[262,98]],[[298,98]],[[298,98]],0,[148,81],0,[149,8],[125],0,[383,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[22,3,3]],0,[[128,8],31],[436],0,0,[117,5],[382,448],[[128,51,12,13,251],78],[[128,51,251],78],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[65,65]],[[5,5]],[[125,125]],[[68,68]],[[153,153]],0,0,0,0,0,[[22,153]],[403,7],[[30,12,13,23,414,8],8],[[24,12,13,23,414,8],8],[[370,65]],[[14,52]],[[41,7]],[[75,3,3,7]],[[75,3,3,7]],[[246,86],31],[[14,86],31],0,[2,44],[[35,28],44],[53,53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,99]],[[14,85]],0,[[5,40,5,219]],[[104,40,104],31],[[393,46,393]],[[22,3,3]],[[153,8,8,153]],[[129,3,3,3]],[46,46],0,[[68,8,8,31],31],[[68,51,13],31],[[68,120],31],[[68,51,28],31],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[[],453],[148,9],0,0,[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[],454],[[30,444],414],[[24,444],414],[[30,444,8,414]],[[24,444,8,414]],[382,13],[48,31],[48],[394],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[84,8,361,31],31],[69,[[15,[69]]]],[65,33],[[54,443,8],31],[[54,404],31],[[54,28,8],31],[[54,13],31],[[22,51,12,13,8,8],31],[[68,36,8,8],31],[[84,36,8,8]],[[22,68,8,8],31],[[84,68,8,8]],[[54,3],31],[[54,3],31],[[54,64,13],31],[[406,54],31],[[406,406],31],[[14,12],13],[[5,12],13],[[153,12],13],[[104,12],13],[[406,54],31],0,0,0,0,0,0,0,0],"p":[[3,"SkYUVAPixmapInfo"],[3,"SkYUVAPixmaps"],[6,"SkScalar"],[4,"SkPathDirection"],[3,"SkPath"],[6,"SkColor"],[3,"SkPoint"],[6,"c_int"],[15,"u8"],[3,"SkMaskFilter"],[3,"SkFontStyleSet"],[4,"c_void"],[15,"usize"],[3,"SkColorSpace"],[3,"sk_sp"],[4,"SkFlattenable_Type"],[3,"SkDeserialProcs"],[3,"SkFlattenable"],[3,"SkColorFilter"],[3,"SkTextBlob"],[3,"SkPathEffect"],[3,"SkCanvas"],[4,"SkTextEncoding"],[3,"SkFont"],[3,"SkPaint"],[4,"SkTextUtils_Align"],[3,"SkPoint3"],[15,"u32"],[3,"SkTraceMemoryDump"],[3,"SkTypeface"],[15,"bool"],[6,"SkFlattenable_Factory"],[6,"c_char"],[3,"SkData"],[3,"SkYUVAInfo"],[3,"SkPixmap"],[4,"SkPaint_Style"],[4,"SkPaint_Join"],[4,"SkPaint_Cap"],[3,"SkMatrix"],[3,"SkRect"],[6,"SkGraphics_OpenTypeSVGDecoderFactory"],[4,"SkYUVAInfo_PlaneConfig"],[6,"SkYUVAInfo_YUVALocations"],[3,"SkV3"],[3,"SkM44"],[15,"u64"],[3,"SkString_Rec"],[4,"SkColorType"],[4,"SkAlphaType"],[3,"SkImageInfo"],[3,"skcms_ICCProfile"],[4,"SkPathFillType"],[3,"SkWStream"],[3,"SkISize"],[6,"SkDataTable_FreeProc"],[3,"SkDataTable"],[4,"SkBlurStyle"],[3,"SkRasterHandleAllocator_Rec"],[3,"SkSurfaceProps"],[4,"SkVertices_VertexMode"],[15,"u16"],[3,"SkVertices"],[3,"SkStream"],[3,"SkString"],[3,"SkRuntimeEffect_Options"],[3,"SkRuntimeEffect_Result"],[3,"SkBitmap"],[3,"SkImage"],[3,"SkPngChunkReader"],[3,"SkPicture"],[6,"FILE"],[3,"SkFontStyle"],[4,"SkImage_BitDepth"],[3,"SkRSXform"],[6,"SkImage_RasterReleaseProc"],[6,"SkImage_ReleaseContext"],[4,"SkCodec_Result"],[4,"SkCodec_SelectionPolicy"],[4,"SkTileMode"],[3,"SkShader"],[6,"SkColor4f"],[3,"SkGradientShader_Interpolation"],[3,"SkSurface"],[3,"skcms_TransferFunction"],[3,"skcms_Matrix3x3"],[4,"Option"],[4,"SkImage_CompressionType"],[3,"GrRecordingContext"],[4,"SkBudgeted"],[4,"GrSurfaceOrigin"],[3,"SkIPoint"],[3,"SkRuntimeEffect_TracedShader"],[6,"SkData_ReleaseProc"],[4,"SkBlendMode"],[3,"SkBlender"],[6,"SkVector"],[6,"c_uint"],[15,"f32"],[4,"SkYUVAInfo_Subsampling"],[4,"SkEncodedOrigin"],[4,"SkYUVColorSpace"],[3,"SkColorMatrix"],[3,"SkRRect"],[4,"SkYUVAPixmapInfo_DataType"],[3,"SkFontMgr"],[6,"SkGraphics_ImageGeneratorFromEncodedDataFactory"],[6,"SkGraphics_VariableColrV1EnabledFunc"],[4,"SkParsePath_PathEncoding"],[6,"SkTypefaceID"],[3,"SkDocument"],[6,"SkRasterHandleAllocator_Handle"],[3,"SkIDChangeListener_List"],[3,"SkIDChangeListener"],[3,"SkOpBuilder"],[4,"SkPathOp"],[3,"SkPathBuilder"],[3,"SkPixelRef"],[4,"SkPath_AddPathMode"],[3,"SkBitmap_Allocator"],[3,"SkTextBlobBuilder"],[3,"SkTextBlobBuilder_RunBuffer"],[3,"SkIRect"],[3,"SkOrderedFontMgr"],[3,"SkTDStorage"],[3,"SkPDF_AttributeList"],[3,"__va_list_tag"],[3,"SkCodec"],[3,"Sk3DView"],[3,"SkStrokeRec"],[3,"SkDrawable"],[4,"SkPath_ArcSize"],[4,"SkPathBuilder_ArcSize"],[3,"SkImageFilter"],[3,"SkPathEffect_DashInfo"],[4,"SkPathEffect_DashType"],[4,"SkImage_LegacyBitmapMode"],[3,"__BindgenUnionField"],[6,"SkImage_ReadPixelsCallback"],[6,"SkImage_ReadPixelsContext"],[4,"SkImage_RescaleGamma"],[4,"SkImage_RescaleMode"],[6,"SkSurface_ReadPixelsCallback"],[6,"SkSurface_ReadPixelsContext"],[3,"SkPictureRecorder"],[3,"SkBBoxHierarchy"],[3,"SkBBHFactory"],[3,"SkRuntimeEffect_ChildPtr"],[3,"SkColorInfo"],[3,"SkCapabilities"],[3,"SkSurfaceCharacterization"],[4,"SkClipOp"],[3,"SkRegion"],[8,"Clone"],[3,"__BindgenBitfieldUnit"],[3,"std_basic_string"],[3,"std_basic_string___sv_wrapper"],[3,"std_basic_string__Alloc_hider"],[4,"std_basic_string__bindgen_ty_1"],[3,"std___and_"],[3,"std_is_empty"],[3,"std_remove_const"],[3,"std_make_unsigned"],[19,"std_aligned_storage_type"],[3,"std_aligned_storage_type__bindgen_ty_1"],[3,"std___detector"],[3,"std___is_swappable"],[3,"std___is_nothrow_swappable"],[3,"std_iterator"],[3,"std___iterator_traits"],[3,"std_iterator_traits"],[3,"std___undefined"],[3,"std___get_first_arg"],[3,"std___replace_first_arg"],[3,"std_pointer_traits"],[3,"std_pointer_traits___rebind"],[3,"std_reverse_iterator"],[3,"std_fpos"],[3,"std_char_traits"],[3,"std_allocator_rebind"],[3,"std___allocator_traits_base"],[3,"std___allocator_traits_base___rebind"],[3,"std_allocator_traits"],[3,"std_allocator_traits__Ptr"],[3,"std_allocator_traits__Diff"],[3,"std_allocator_traits__Size"],[3,"std_allocator_traits___construct_helper"],[3,"std_basic_string_view"],[3,"std_tuple"],[3,"std_tuple__TC2"],[3,"std__Vector_base__Vector_impl"],[3,"std__Optional_payload___ctor_tag"],[3,"std__Optional_payload__Empty_byte"],[3,"std__Optional_base"],[3,"std_optional"],[4,"std_byte"],[3,"std_default_delete"],[3,"std___uniq_ptr_impl"],[3,"std___uniq_ptr_impl__Ptr"],[3,"std_unique_ptr"],[3,"std_atomic"],[3,"std_function"],[3,"__gnu_cxx___normal_iterator"],[3,"__gnu_cxx__Char_types"],[3,"__gnu_cxx_char_traits"],[3,"__gnu_cxx_new_allocator_rebind"],[3,"__gnu_cxx___alloc_traits"],[3,"__gnu_cxx___alloc_traits_rebind"],[3,"__mbstate_t"],[19,"__mbstate_t__bindgen_ty_1"],[3,"_IO_marker"],[3,"_IO_FILE"],[3,"SkAutoTMalloc"],[3,"SkRefCnt"],[4,"SkTArray_ReallocType"],[3,"TraitObject"],[3,"VecSink"],[3,"SkSize"],[4,"SkApplyPerspectiveClip"],[4,"SkMatrix_ScaleToFit"],[4,"SkCodecAnimation_DisposalMethod"],[4,"SkCodecAnimation_Blend"],[4,"SkEncodedImageFormat"],[3,"SkReadBuffer"],[4,"SkColorChannel"],[4,"SkColorChannelFlag"],[4,"SkFilterMode"],[4,"SkMipmapMode"],[3,"SkCubicResampler"],[3,"SkSamplingOptions"],[3,"SkMask"],[4,"SkYUVAInfo_YUVAChannels"],[3,"SkYUVAInfo_YUVALocation"],[4,"SkYUVAInfo_Siting"],[3,"SkYUVAPixmapInfo_SupportedDataTypes"],[4,"SkOnce_State"],[3,"skcms_Matrix3x4"],[19,"skcms_Curve"],[3,"skcms_Curve__bindgen_ty_1"],[3,"skcms_Curve__bindgen_ty_2"],[3,"skcms_A2B"],[3,"skcms_B2A"],[3,"skcms_CICP"],[4,"skcms_PixelFormat"],[4,"skcms_AlphaFormat"],[3,"SkColorSpacePrimaries"],[4,"SkEncodedInfo_Alpha"],[4,"SkEncodedInfo_Color"],[3,"SkNoncopyable"],[4,"SkCodec_ZeroInitialized"],[3,"SkCodec_Options"],[4,"SkCodec_SkScanlineOrder"],[3,"SkCodec_FrameInfo"],[4,"SkCodec_XformTime"],[4,"SkBlendModeCoeff"],[4,"SkFontHinting"],[3,"SkV2"],[3,"SkV4"],[4,"SkM44_Uninitialized_Constructor"],[4,"SkM44_NaN_Constructor"],[19,"SkPaint__bindgen_ty_1"],[3,"SkPaint__bindgen_ty_1__bindgen_ty_1"],[3,"SkRasterHandleAllocator"],[4,"SkPixelGeometry"],[3,"SkDeque"],[3,"SkDeque_Block"],[3,"SkDeque_Iter"],[4,"SkDeque_Iter_IterStart"],[3,"SkDeque_F2BIter"],[3,"sktext_GlyphRunBuilder"],[3,"sktext_GlyphRunList"],[3,"SkBaseDevice"],[3,"SkDrawShadowRec"],[3,"SkMesh"],[3,"SkSpecialImage"],[3,"SkSurface_Base"],[3,"skgpu_graphite_Recorder"],[3,"SkCanvas_SaveLayerRec"],[4,"SkCanvas_PointMode"],[4,"SkCanvas_SrcRectConstraint"],[3,"SkCanvas_Lattice"],[4,"SkCanvas_Lattice_RectType"],[4,"SkCanvas_SaveLayerStrategy"],[4,"SkCanvas_ClipEdgeStyle"],[4,"SkCanvas_ShaderOverrideOpacity"],[4,"SkCanvas_CheckForOverwrite"],[4,"SkCanvas_DeviceCompatibleWithFilter"],[3,"SkCanvas_AutoUpdateQRBounds"],[3,"SkSerialProcs"],[3,"SkFlattenable_PrivateInitializer"],[4,"SkPathVerb"],[3,"SkPathRef"],[4,"SkPath_Verb"],[3,"SkPath_Iter"],[3,"SkPath_RangeIter"],[3,"SkPath_RawIter"],[3,"SkContourMeasure"],[3,"SkContourMeasure_Segment"],[3,"SkContourMeasureIter_Impl"],[4,"SkCoverageMode"],[3,"SkCubicMap"],[4,"SkCubicMap_Type"],[3,"SkDataTable_Dir"],[19,"SkDataTable__bindgen_ty_1"],[3,"SkDeferredDisplayListPriv"],[3,"SkDeferredDisplayList"],[3,"SkDeferredDisplayList_LazyProxyData"],[4,"SkShader_GradientType"],[3,"SkShader_GradientInfo"],[3,"GrBackendTexture"],[3,"GrDirectContext"],[3,"SkMipmap"],[4,"SkImage_CachingHint"],[3,"SkDrawable_GpuDrawHandler"],[4,"SkDocument_State"],[3,"SkFontArguments"],[3,"SkFontArguments_VariationPosition"],[3,"SkFontArguments_VariationPosition_Coordinate"],[3,"SkFontArguments_Palette"],[3,"SkFontArguments_Palette_Override"],[3,"SkFontParameters_Variation_Axis"],[4,"SkFontStyle_Weight"],[4,"SkFontStyle_Width"],[4,"SkFontStyle_Slant"],[3,"SkWeakRefCnt"],[3,"SkDescriptor"],[3,"SkFontDescriptor"],[3,"SkScalerContext"],[3,"SkAdvancedTypefaceMetrics"],[3,"SkScalerContextEffects"],[3,"SkScalerContextRec"],[4,"SkTypeface_SerializeBehavior"],[3,"SkTypeface_LocalizedStrings"],[4,"SkTypeface_Style"],[4,"SkFont_Edging"],[3,"SkFontMetrics"],[3,"SkOpenTypeSVGDecoder"],[3,"SkGraphics"],[4,"SkImageFilter_MapDirection"],[3,"SkBitmap_HeapAllocator"],[3,"SkImageGenerator_Options"],[4,"SkPathBuilder_IsA"],[3,"SkPicture_AbortCallback"],[3,"SkBBoxHierarchy_Metadata"],[3,"SkRecord"],[3,"SkRecorder"],[3,"SkMutex"],[4,"SkPixelRef_Mutability"],[4,"SkRegion_Op"],[3,"SkRegion_Iterator"],[3,"SkRegion_Cliperator"],[3,"SkRegion_Spanerator"],[3,"SkRegion_RunHead"],[4,"SkRRect_Type"],[4,"SkRRect_Corner"],[3,"SkStreamAsset"],[3,"SkStreamMemory"],[3,"SkDynamicMemoryWStream_Block"],[4,"SkStrokeRec_InitStyle"],[4,"SkStrokeRec_Style"],[3,"GrBackendSemaphore"],[4,"SkSurface_ContentChangeMode"],[4,"SkSurface_BackendSurfaceAccess"],[3,"SkTextBlob_RunRecord"],[3,"SkTextBlob_Iter"],[3,"SkTextBlob_Iter_Run"],[4,"SkTextBlob_GlyphPositioning"],[3,"SkVertices_Desc"],[3,"SkVertices_Sizes"],[3,"SkTime_DateTime"],[3,"SkExecutor"],[3,"SkPDFArray"],[4,"SkPDF_Metadata_Subsetter"],[4,"SkPath1DPathEffect_Style"],[3,"SkGradientShader"],[4,"SkGradientShader_Interpolation_InPremul"],[3,"SkHighContrastConfig"],[4,"SkHighContrastConfig_InvertStyle"],[3,"SkSpan"],[4,"SkSL_Version"],[3,"SkSL_DebugTrace"],[3,"SkRuntimeEffect"],[3,"SkRuntimeEffect_Uniform"],[4,"SkRuntimeEffect_Uniform_Type"],[4,"SkRuntimeEffect_ChildType"],[3,"SkRuntimeEffect_Child"],[3,"SkImageFilters_CropRect"],[4,"SkImageFilters_Dither"],[3,"SkTableMaskFilter"],[4,"SkTrimPathEffect_Mode"],[3,"SkSVGCanvas"],[4,"SkSVGCanvas__bindgen_ty_1"],[3,"SkPatch3D"],[3,"SkCamera3D"],[3,"Sk3DView_Rec"],[3,"SkParsePath"],[3,"SkShadowUtils"],[3,"SkTextUtils"],[3,"_bindgen_ty_30"],[3,"_bindgen_ty_31"],[8,"Ord"],[4,"Ordering"],[3,"SkVertices_Builder"],[15,"i32"],[6,"SkFontTableTag"],[3,"SkDynamicMemoryWStream"],[8,"Default"],[3,"SkCanvas_ImageSetEntry"],[3,"SkCanvas_MCRec"],[3,"SkContourMeasureIter"],[3,"SkDeferredDisplayListRecorder"],[3,"SkPathMeasure"],[3,"SkCustomTypefaceBuilder"],[6,"SkGlyphID"],[8,"PartialEq"],[3,"SkTextBlob_Iter_ExperimentalRun"],[6,"SkCanvas_QuadAAFlags"],[6,"std_string_view"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"std_allocator"],[3,"std__Vector_base"],[3,"std_bitset_reference"],[3,"__gnu_cxx_new_allocator"],[3,"SkRefCntBase"],[3,"SkNVRefCnt"],[3,"SkOnce"],[3,"SkEncodedInfo"],[3,"SkCanvas_BackImage"],[3,"SkAutoCanvasRestore"],[3,"SkTDArray"],[3,"SkImage_AsyncReadResult"],[3,"SkTypeface_LocalizedString"],[3,"SkImageGenerator"],[3,"SkMemoryStream"],[3,"SkPDF_Metadata"],[3,"SkCustomTypefaceBuilder_GlyphRec"],[3,"RustStream"],[6,"SkContourMeasure_MatrixFlags"],[6,"SkPathMeasure_MatrixFlags"],[8,"Hash"],[15,"i64"],[6,"SkUnichar"],[15,"str"],[3,"SkCanvas_Layer"],[4,"GrImageContext"],[6,"std_string"],[8,"PartialOrd"],[15,"i16"],[15,"i8"],[6,"U8CPU"],[4,"Result"],[3,"TypeId"],[3,"SkEncodedInfo_ICCProfile"],[19,"std_basic_string__bindgen_ty_2"],[3,"std__Optional_payload__bindgen_ty_1"],[4,"GrContext_Base"],[4,"GrImageContextPriv"],[4,"GrContextThreadSafeProxy"],[4,"GrContextThreadSafeProxyPriv"],[4,"GrRecordingContextPriv"],[4,"GrContextPriv"],[4,"SkVerticesPriv"],[3,"SkRefCntBase__bindgen_vtable"],[3,"SkStrings"],[3,"SkCodec__bindgen_vtable"],[3,"SkCanvas__bindgen_vtable"],[3,"SkImage_AsyncReadResult__bindgen_vtable"],[3,"SkImageGenerator__bindgen_vtable"],[3,"SkPDF_StructureElementNode"]]},\
"skia_safe":{"doc":"","t":[12,13,13,13,18,13,13,13,13,4,4,13,6,6,13,13,13,13,13,18,18,18,13,18,13,13,13,13,13,13,13,6,4,4,6,4,3,13,13,3,13,13,18,13,18,3,13,13,4,13,6,4,13,3,13,6,3,13,4,3,13,6,6,6,6,3,3,4,8,13,8,6,6,13,4,13,3,3,13,18,18,13,13,18,13,6,6,3,13,18,18,6,6,13,13,13,13,3,6,13,13,13,13,13,17,4,4,13,13,13,13,4,3,8,6,3,4,3,6,3,6,3,13,13,13,18,18,18,18,18,6,13,13,18,13,3,3,13,3,13,13,13,13,3,3,13,13,3,3,13,6,6,6,6,13,13,13,13,13,13,13,13,13,13,13,13,3,13,18,13,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,13,13,13,13,13,13,13,3,18,18,18,18,18,18,17,6,3,18,4,13,13,13,13,13,18,18,18,8,13,13,18,13,13,13,13,18,13,6,13,13,13,3,13,6,13,6,4,4,4,6,6,4,6,4,6,4,3,4,6,6,8,4,6,6,13,3,3,13,13,8,13,13,13,13,13,13,3,18,18,18,3,18,13,13,13,18,13,13,13,13,13,13,13,3,3,18,13,18,13,13,3,3,6,13,13,13,13,13,13,13,8,6,13,13,13,6,3,13,8,8,13,3,6,3,13,13,13,13,13,13,13,13,13,13,13,6,13,6,6,3,3,18,6,6,6,3,4,4,13,13,6,18,13,13,13,6,13,13,13,13,13,13,13,3,3,3,6,6,6,13,13,18,13,13,3,13,13,18,18,6,6,6,4,18,18,13,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,10,11,0,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,0,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,0,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,0,0,11,12,0,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,0,11,11,11,11,0,11,12,12,11,11,11,11,0,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,10,10,14,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,0,11,0,11,0,0,11,0,0,0,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,0,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,12,12,0,11,6,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,5,5,11,11,11,11,0,11,11,11,11,11,11,5,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,11,11,11,11,14,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,11,11,11,0,11,11,0,0,12,12,12,5,5,5,5,4,3,3,18,13,4,18,3,13,3,18,4,13,13,13,13,3,3,8,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,3,4,13,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,13,13,13,6,13,18,4,13,13,13,13,13,13,13,18,13,13,13,3,13,13,4,13,13,4,4,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,6,0,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,17,17,17,17,17,17,17,17,17,17,17,17,6,6,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,11,11,11,11,11,11,11,5,5,13,13,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,3,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,18,3,3,18,18,18,18,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,12,12,12,12,0,3,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,3,18,13,18,18,18,18,13,18,18,18,4,18,18,18,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,0,11,11,11,11,11,11,11,11,11,5,5,11,11,5,5,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,12,12,12,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,4,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,12,0,11,11,11,12,11,5,11,11,11,11,11,11,11,13,13,4,13,13,13,13,4,18,4,4,3,13,18,13,13,6,18,13,13,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,6,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,4,18,13,13,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,5,5,5,5,5,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,5,5,5,5,11,5,5,5,5,5,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,4,4,13,13,13,17,18,3,4,13,18,13,13,13,18,4,13,13,13,13,13,13,13,13,13,18,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,17,17,17,17,17,17,17,5,13,13,4,13,4,13,6,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,4,13,18,18,13,13,13,13,4,13,13,13,4,13,13,3,18,13,13,18,13,6,18,13,3,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,13,13,4,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,18,18,18,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,4,4,3,4,13,13,6,3,3,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,11,5,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,5,5,6,11,11,11,11,11,11,3,8,13,13,8,3,18,6,4,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,18,13,13,13,13,3,13,18,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,6,4,4,13,13,3,6,13,13,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,12,18,18,18,3,13,13,13,13,13,13,13,18,13,13,13,13,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,3,13,13,4,13,13,13,6,3,12,11,11,11,11,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,12,11,13,13,13,13,3,4,4,13,13,13,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,5,5,13,13,13,13,4,13,13,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,0,18,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,4,13,11,11,11,11,11,11,11,11,11,5,11,11,11,11,13,13,6,6,13,3,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,13,6,3,13,4,6,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,12,12,0,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,12,12,12,12,13,4,13,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11,3,6,6,6,3,18,18,18,18,13,13,13,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,13,18,4,13,13,13,13,13,13,4,4,13,13,13,13,13,13,6,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,5,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,18,18,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,18,4,13,18,18,13,13,13,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,5,11,11,5,11],"n":["0","A","A16Float","A16UNorm","ALPHA","ARGB4444","ASTC","AVIF","Alpha8","AlphaType","AutoCanvasRestore","B","BBHFactory","BBoxHierarchy","BGR101010x","BGRA1010102","BGRA8888","BGRH","BGRV","BLACK","BLUE","BLUE","BMP","BT2020","BT2020_10bit_Full","BT2020_10bit_Limited","BT2020_12bit_Full","BT2020_12bit_Limited","BT2020_8bit_Full","BT2020_8bit_Limited","Bevel","Bitmap","BlendMode","BlendModeCoeff","Blender","BlurStyle","Borrows","BottomLeft","BottomRight","Budgeted","Butt","CCW","COUNT","CW","CYAN","Canvas","Clamp","Clear","ClipOp","Close","Codec","CodecResult","CoeffCount","Color","Color","Color3f","Color4f","ColorBurn","ColorChannel","ColorChannelFlag","ColorDodge","ColorFilter","ColorInfo","ColorMatrix","ColorSpace","ColorSpacePrimaries","ColorSpaceTransferFn","ColorType","ConditionallySend","Conic","Contains","ContourMeasure","ContourMeasureIter","CouldNotRewind","CoverageMode","Cubic","CubicMap","CubicResampler","DA","DARK_GRAY","DATA_TYPE_CNT","DC","DNG","DYNAMIC_MSAA","Darken","Data","DataTable","DateTime","Decal","Default","Default","DeferredDisplayList","DeferredDisplayListRecorder","Difference","Difference","Difference","Difference","Document","Drawable","Dst","DstATop","DstIn","DstOut","DstOver","EMPTY_IRECT","EncodedImageFormat","EncodedOrigin","ErrorInInput","EvenOdd","Exclusion","Fill","FilterMode","FilterOptions","Flattenable","Font","FontArguments","FontHinting","FontMetrics","FontMgr","FontStyle","FontStyleSet","FourByteTag","Full","G","GIF","GRAY","GRAY","GRAY_ALPHA","GREEN","GREEN","GlyphId","GlyphId","Gray8","HALF","HEIF","HSV","Handle","HardLight","HighContrastConfig","Hue","ICO","IDA","IDC","IPoint","IRect","ISA","ISC","ISize","IVector","Identity","Image","ImageFilter","ImageGenerator","ImageInfo","IncompleteInput","Inner","InternalError","Intersect","Intersect","Intersect","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","InverseEvenOdd","InverseWinding","Iter","JPEG","JPEG","JPEGXL","JPEG_Full","KTX","LIGHT_GRAY","Last","Last","Last","Last","Last","LastCoeffMode","LastEnum","LastEnum","LastEnum","LastEnum","LastMode","LastSeparableMode","LastTileMode","LeftBottom","LeftTop","Lighten","Line","Linear","Linear","Luminosity","M44","MAGENTA","MAX_CUSTOM_ATTRIBUTES","MAX_PLANES","MAX_PLANES","MAX_PLANES","MAX_POINTS","MILESTONE","MaskFilter","Matrix","Max_EnumValue","MipmapMode","Mirror","Miter","Modulate","Move","Multiply","N32","NEARLY_ZERO","NO","NativeFlattenable","Nearest","Nearest","No","None","None","Normal","Normal","ONE","One","OpBuilder","Opaque","Outer","Overlay","OwnedCanvas","PKM","PMColor","PNG","Paint","PaintCap","PaintJoin","PaintStyle","Path","PathBuilder","PathDirection","PathEffect","PathFillType","PathMeasure","PathOp","PathSegmentMask","PathVerb","Picture","PictureRecorder","Pixel","PixelGeometry","PixelRef","Pixmap","Plus","Point","Point3","Premul","Quad","QuickReject","R","R16G16B16A16UNorm","R16G16Float","R16G16UNorm","R8G8UNorm","R8UNorm","RCHandle","RED","RED","RG","RGB","RGB","RGB101010x","RGB565","RGB888x","RGBA","RGBA1010102","RGBA8888","RGBAF16","RGBAF16Norm","RGBAF32","RGBH","RGBV","RRect","RSXform","Rec601","Rec601_Limited","Rec709","Rec709_Full","Rec709_Limited","Rect","RefHandle","Region","Repeat","ReverseDifference","ReverseDifference","RightBottom","RightTop","Round","Round","RoundOut","RuntimeEffect","SA","SC","SRGBA8888","SamplingMode","SamplingOptions","Saturation","Scalar","Scalars","Screen","Sendable","Shader","Size","Slight","SoftLight","Solid","Square","Src","SrcATop","SrcIn","SrcOut","SrcOver","Stroke","StrokeAndFill","StrokeRec","Success","Surface","SurfaceCharacterization","SurfaceProps","SurfacePropsFlags","TRANSPARENT","TextBlob","TextBlobBuilder","TextBlobIter","TextBlobRun","TextEncoding","TileMode","TopLeft","TopRight","Typeface","USE_DEVICE_INDEPENDENT_FONTS","UTF16","UTF32","UTF8","Unichar","Unimplemented","Union","Union","Unknown","Unknown","Unknown","Unpremul","V2","V3","V4","Vector","Vector3","Vertices","WBMP","WEBP","WHITE","Winding","XOR","XYZD50Hash","Xor","Xor","YELLOW","YES","YUVAInfo","YUVAPixmapInfo","YUVAPixmaps","YUVColorSpace","Yes","ZERO","Zero","a","a","a","a","add","add","add","add","add","add","add","add","add","add","add_arc","add_arc","add_arc","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_circle","add_circle","add_circle","add_oval","add_oval","add_oval","add_path","add_path","add_path","add_path_matrix","add_poly","add_polygon","add_polygon","add_rect","add_rect","add_rect","add_round_rect","add_rrect","add_rrect","add_rrect","addr","addr","addr_at","addr_at","adjust","all","all","all","alloc_n32_pixels","alloc_n32_pixels","alloc_pixels","alloc_pixels","alloc_pixels_flags","alloc_pixels_flags","alloc_pixels_info","alloc_pixels_info","alloc_run","alloc_run","alloc_run_pos","alloc_run_pos","alloc_run_pos_h","alloc_run_pos_h","alloc_run_rsxform","alloc_run_rsxform","alloc_run_text","alloc_run_text","alloc_run_text_pos","alloc_run_text_pos","alloc_run_text_pos_h","alloc_run_text_pos_h","alloc_run_text_rsxform","alloc_run_text_rsxform","allocate","allow_blender","allow_color_filter","allow_shader","alpha","alpha_f","alpha_threshold","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","alpha_type","annotate","append","append_float","append_float_array","append_int","apply_bones","apply_to_canvas","apply_to_paint","apply_to_path","apply_to_path_inplace","approximate_bytes_used","approximate_bytes_used","approximate_bytes_used","approximate_bytes_used","approximate_filtered_bounds","approximate_filtered_bounds","approximate_op_count","approximate_op_count","approximate_op_count_nested","approximate_op_count_nested","approximate_size","arc_to","arc_to","arc_to","arc_to_radius","arc_to_radius","arc_to_rotated","arc_to_tangent","arc_to_tangent","arc_to_tangent","are_finite","area","arithmetic","arithmetic","arithmetic","as_a_dash","as_array","as_array","as_array","as_array","as_array_mut","as_blend_mode","as_bytes","as_bytes","as_coeff","as_image","as_image","as_image_filter","as_image_filter","as_image_filter","as_mut_array","as_mut_array","as_mut_array","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_scalars","as_str","as_winding","as_winding","ascent","at","at","at_size","at_size","at_str","at_str","at_t","at_t","avg_char_width","b","b","b","b","b","b","begin_recording","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","blend_mode","blend_mode_or","blender","blenders","blur","blur","blur","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","bottom","bottom","bottom","bottom","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bytes","bytes","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","bytes_per_pixel","c","c","c","can_compute_fast_bounds","can_send","can_send","canvas","canvas","canvas","canvas","cap","cap_height","center","center_x","center_y","characterize","children","circle","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_with_arguments","clone_with_pixel_geometry","close","close","close","cmp","cmp","codec","col","col_major","color","color4f","color_filter","color_filter","color_filter","color_filter_node","color_filters","color_info","color_info","color_matrix","color_matrix_filter","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_space","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","color_type","colors","colors","colors","cols","combine","combine","combine","combine","combine","complement","complement","compose","compose","compose","compose","composed","compute_bounds","compute_bounds","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_byte_size","compute_fast_bounds","compute_from_t","compute_is_opaque","compute_is_opaque","compute_is_opaque","compute_is_opaque","compute_min_byte_size","compute_min_byte_size","compute_offset","compute_offset","compute_region_complexity","compute_tight_bounds","compute_total_bytes","compute_total_bytes","compute_y_from_x","concat","conic_to","conic_to","conic_to","conservatively_contains_rect","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains","contains_no_empty_check","contains_point","contains_rect","contains_region","contour_measure","contrast","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","copy_range","copy_range","copy_table_data","corner_path","corner_path_effect","count","count","count","count","count","count_families","count_families","count_glyphs","count_inputs","count_points","count_str","count_tables","count_text","count_verbs","cross","cross","cross","cross","cross_product","cross_product","cubic","cubic_to","cubic_to","cubic_to","cull_rect","cull_rect","d","d","dash","dash_path_effect","data_type","data_type","day","day_of_week","decode","decode_to_raster","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref_mut","descent","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","detach","detach","detach","detach","detach","detach","detach_as_data","detach_as_stream","difference","difference","dilate","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","dimensions","discrete","discrete_path_effect","displacement_map_effect","distance","distance_to_origin","distant_lit_diffuse_lighting","distant_lit_specular_lighting","div","div","div","div","div_assign","div_assign","div_assign","document","dot","dot","dot","dot","dot_product","dot_product","dot_with_normal","draw","draw","draw_at","draw_display_list","draw_display_list_with_offset","drawable","draws_nothing","draws_nothing","drop","drop","drop","dump","dump","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","dump_hex","e","edging","empty","empty","empty","enable_data_type","encode","encode","encode","encode","encode","encode","encode_to_data","encode_to_data_with_quality","encoded_data","encoded_data","encoded_data","encoded_format","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equals","equals","equals","equals","erase","erase","erase","erase","erase_4f","erase_4f","erase_4f","erase_4f","erase_argb","erase_argb","erase_color","erase_color","erase_color_4f","erase_color_4f","erase_with_colorspace","erase_with_colorspace","erode","extend","extend","extract_alpha","extract_alpha","extract_subset","extract_subset","extract_subset","extract_subset","f","family_name","family_name","family_name","family_names","family_names","fill_type","fill_type","fill_type","filter","filter_bounds","filter_color","filter_color4f","filter_path","filter_path_inplace","filter_path_inplace_with_matrix","find_child","find_input","find_uniform","finish_recording_as_drawable","finish_recording_as_picture","fits_in_bytes","flags","flags","flush_and_submit","flush_submit_and_sync_cpu","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","font","font_arguments","font_metrics","font_parameters","font_style","font_style","fractal_perlin_noise","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_argb","from_argb","from_bitmap","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bounds","from_bytes","from_bytes","from_bytes","from_bytes_rgba","from_chars","from_color_info","from_color_info","from_data","from_data","from_data","from_data","from_data","from_data_type","from_encoded","from_encoded","from_encoded","from_encoded_with_alpha_type","from_encoded_with_alpha_type","from_encoded_with_alpha_type","from_external_memory","from_external_pixmaps","from_generator","from_irect","from_isize","from_isize","from_iter","from_iter","from_iwh","from_ltrb","from_name","from_paint","from_paint","from_path","from_path","from_picture","from_picture","from_picture","from_picture","from_picture_with_props","from_picture_with_props","from_picture_with_props","from_point_and_size","from_pos_text","from_pos_text","from_pos_text_h","from_pos_text_h","from_pt_size","from_radians","from_raster_data","from_rect","from_rgb","from_rsxform","from_rsxform","from_shader","from_shader","from_size","from_size","from_slice","from_slice","from_slices","from_slices","from_str","from_str","from_str","from_str","from_svg","from_table","from_text","from_text","from_typeface","from_typeface_with_params","from_wh","from_wh","from_xywh","from_xywh","g","g","g","g","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","generation_id","get_addr","get_addr","get_alpha_f","get_alpha_f","get_alpha_f","get_alpha_f","get_boundary_path","get_bounds","get_col_major","get_color","get_color","get_color","get_color","get_color_4f","get_color_4f","get_color_4f","get_color_4f","get_fill_path","get_fill_path_with_matrix","get_frame_count","get_image","get_input","get_intercepts","get_intercepts","get_intercepts","get_kerning_pair_adjustments","get_matrix","get_path","get_pixels","get_pixels","get_pixels","get_pixels_to_pixmap","get_pixels_with_options","get_point","get_points","get_pos","get_repetition_count","get_row_major","get_row_major","get_scaled_dimensions","get_scanlines","get_subset","get_subset","get_table_data","get_table_size","get_verbs","get_widths","get_widths_bounds","get_x_pos","get_yuva_planes","glyph_indices","gradient_shader","graphics","grayscale","h","has_alpha","has_bones","has_colors","has_equal_effect","has_indices","has_mipmaps","has_tex_coords","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height_64","high_contrast","high_contrast_config","high_contrast_filter","hinting","hour","image","image","image_filter","image_filter","image_filters","image_info","image_info","image_snapshot","image_snapshot_with_bounds","inc_reserve","inc_reserve","inc_reserve","incremental_decode","index","index","index","index","index_count","index_mut","indices","indices","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","info","info","info","info","info","info","info","init_pixmaps_from_single_allocation","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","inner_mut","input","input_size","inputs","inputs","insert","insert","inset","inset","install_pixels","install_pixels","interpolate","intersect","intersect","intersect2","intersect_no_empty_check_","intersection","intersection","intersects","intersects","intersects","intersects","intersects2","intersects_rect","intersects_region","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_image_filter","into_image_filter","into_iter","into_iter","into_iter","into_iter","invert","invert_style","is_a_image","is_all","is_all","is_alpha_only","is_alpha_unchanged","is_always_opaque","is_anti_alias","is_array","is_baseline_snap","is_bgr","is_bold","is_closed","is_closed","is_color","is_compatible","is_complex","is_convex","is_cubic_degenerate","is_dither","is_embedded_bitmaps","is_embolden","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty_64","is_even_odd","is_fill_style","is_finite","is_finite","is_finite","is_finite","is_finite","is_fixed_pitch","is_force_auto_hinting","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_gamma_close_to_srgb","is_h","is_hairline_style","is_immutable","is_immutable","is_immutable","is_immutable","is_interpolatable","is_inverse","is_inverse_fill_type","is_italic","is_last_contour_closed","is_lazy_generated","is_line","is_line_degenerate","is_linear","is_linear_metrics","is_null","is_null","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_opaque","is_oval","is_quad_degenerate","is_ready_to_draw","is_ready_to_draw","is_rect","is_rect","is_rgb","is_rrect","is_sorted","is_src_over","is_srgb","is_srgb","is_subpixel","is_supported","is_texture_backed","is_use_device_independent_fonts","is_v","is_valid","is_volatile","is_volatile","is_volatile","is_zero","is_zero","is_zero","is_zero","iset","iter","iter","join","join","join","join2","join_non_empty_arg","join_possibly_empty_rect","last_pt","leading","left","left","left","left","length","length","length","length","length","length","length_squared","length_squared","length_xy","length_xyz","line","line_2d","line_2d_path_effect","line_to","line_to","line_to","linear_gradient","linear_gradient_with_interpolation","look_at","luma","luma_color_filter","magnifier","make","make","make","make","make_blender","make_color_filter","make_for_blender","make_for_color_filer","make_for_shader","make_scale","make_shader","make_transform","map","mask_filter","match_face_style","match_face_style","match_family","match_family","match_family_style","match_family_style","match_family_style_character","match_family_style_character","match_style","match_style","matches_color_type","matches_color_type","matches_color_type","matrix","matrix","matrix","matrix","matrix_convolution","matrix_path_effect","matrix_translate","max_aniso","max_char_width","measure_str","measure_text","merge","merge","merge_path_effect","metrics","min_row_bytes","min_row_bytes","minute","mipmap","mipmap","miter","mode","mode","mode","month","move_to","move_to","move_to","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","n32","name","name","name","named_transfer_fn","nan","native_deserialize","native_flattenable","native_transmutable","nearly_equal","nearly_equal","nearly_zero","nearly_zero","need_to_apply","needs_ctm","neg","neg","neg","neg","neg","neg","negate","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_a8","new_a8","new_bytes","new_bytes","new_color_space","new_copy","new_copy","new_copy","new_cstr","new_cstr","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_family_name_iterator","new_fill","new_from","new_from_data","new_from_data","new_hairline","new_identity","new_lighting","new_n32","new_n32","new_n32_premul","new_n32_premul","new_non_texture_image","new_null","new_path","new_path","new_placeholder","new_placeholder","new_raster","new_raster_direct","new_raster_from_compressed","new_raster_image","new_raster_image_with_caching_hint","new_raster_n32_premul","new_s32","new_s32","new_srgb","new_srgb","new_srgb_linear","new_srgb_linear","new_str","new_str","new_style_set","new_style_set","new_styleset","new_styleset","new_subset","new_subset","new_subset","new_surface","new_surface_with_dimensions","new_typeface","new_typeface","new_uninitialized","new_uninitialized","new_unknown","new_unknown","new_with_filter","new_zero_initialized","new_zero_initialized","next","next","next_contour","next_scanline","normalize","normalize","normalize","normalize","normalize_perspective","normalize_vector","normalized","not","not","nothing_to_draw","notify_added_to_cache","notify_added_to_cache","notify_content_will_change","notify_drawing_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","notify_pixels_changed","num_channels_in_plane","num_planes","num_planes","num_planes","offset","offset","offset","offset","offset","offset","offset","offset","offset_points","offset_to","offset_to","op","op","op_rect","op_rect_region","op_region","op_region_rect","origin","origin","origin_matrix","outbound_scanline","outset","outset","oval","oval_with_start_index","overdraw","overdraw_color_filter","paint","partial_cmp","partial_cmp","path","path_1d","path_1d_path_effect","path_2d","path_2d_path_effect","path_effect","path_effect","path_measure","path_types","pdf","peek_pixels","peek_pixels","peek_pixels","peek_pixels","perlin_noise_shader","perspective","picture_recorder","pixel_geometry","pixel_ref","pixel_ref","pixel_ref_origin","pixel_ref_origin","pixels","pixels","pixels","pixels","pixels","pixels","pixmap","pixmap","pixmaps_info","plane","plane_config","plane_dimensions","plane_info","plane_infos","plane_subsampling_factors","planes","playback","playback","point_lit_diffuse_lighting","point_lit_specular_lighting","points","polygon","polyline_to","polyline_to","pos_tan","pos_tan","positions","positions","post_concat","post_concat","post_script_name","post_translate","post_translate","pre_concat","pre_concat","pre_concat_16","pre_multiply_argb","pre_multiply_color","pre_scale","pre_scale_xyz","pre_translate","private","props","quad_to","quad_to","quad_to","query_yuva_info","quick_contains","quick_reject","quick_reject_rect","quick_reject_region","r","r","r","r_arc_to_rotated","r_conic_to","r_conic_to","r_conic_to","r_cubic_to","r_cubic_to","r_cubic_to","r_line_to","r_line_to","r_line_to","r_move_to","r_quad_to","r_quad_to","r_quad_to","radial_gradient","radial_gradient_with_interpolation","radians_to_degrees","rc","read_from_memory","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","read_pixels_to_pixmap","read_pixels_to_pixmap","recommended_rgba_color_type","recording_canvas","rect","rect_stays_rect","rect_to_rect","region","reinterpret_color_space","release","remove","remove","res_scale","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","reset","resolve","resolve","restore","reverse_add_path","rewind","rgb_to_yuv","right","right","right","right","rotate","rotate_x","rotate_y","rotate_z","round","round_in","round_out","round_out","round_out","row","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_as_pixels","row_bytes_iter","row_major","rows","rrect","rrect","rrect_with_start_index","runtime_effect","s","sampling","sampling_options","save","scalar","scale","scale","scale","scale_pixels","scale_pixels","scale_pixels","scale_x","scaled","scaled","scanline_order","scos","second","segment","segment","segment_masks","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set","set","set","set","set","set","set","set_44","set_abs","set_alpha","set_alpha_f","set_alpha_type","set_alpha_type","set_anti_alias","set_argb","set_baseline_snap","set_blend_mode","set_blender","set_bounds","set_bounds2","set_bounds_check","set_bounds_no_check","set_col","set_col_major","set_color","set_color4f","set_color_filter","set_color_space","set_color_space","set_concat","set_concat","set_concat_16","set_dither","set_edging","set_embedded_bitmaps","set_embolden","set_empty","set_empty","set_empty","set_empty","set_empty","set_fill_style","set_fill_type","set_fill_type","set_fill_type","set_font_style","set_force_auto_hinting","set_glyph","set_hairline_style","set_hinting","set_identity","set_identity","set_identity","set_image_filter","set_immutable","set_immutable","set_immutable","set_immutable","set_info","set_info","set_irect","set_is_volatile","set_is_volatile","set_is_volatile","set_iwh","set_last_pt","set_length","set_length_xy","set_linear_metrics","set_ltrb","set_ltrb","set_mask_filter","set_metrics","set_normalize","set_path","set_path","set_path_effect","set_pixel_ref","set_pixel_ref","set_rc","set_rect","set_rects","set_region","set_res_scale","set_rotate","set_rotate_unit","set_rotate_unit_sin_cos","set_row","set_row_major","set_row_major","set_saturation","set_scale","set_scale","set_scale_x","set_shader","set_size","set_size","set_skew_x","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_params","set_stroke_style","set_stroke_width","set_style","set_subpixel","set_translate","set_typeface","set_wh","set_wh","set_xywh","set_xywh","shader","shader","shader_mask_filter","shaders","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shift_per_pixel","shrink_to_fit","simplify","simplify","siting_xy","size","size","size","size","size","size_in_bytes","skew_x","skip_scanlines","snapshot","snapshot","sort","sort","sorted","sorted","source","spacing","spot_lit_diffuse_lighting","spot_lit_specular_lighting","ssin","start_incremental_decode","start_scanline_decode","str_to_glyphs","str_to_glyphs","str_to_glyphs_vec","stroke","stroke_and_fill_path_effect","stroke_cap","stroke_join","stroke_miter","stroke_path_effect","stroke_rec","stroke_width","style","style","style","style","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","subsampling","sum","supported","surface","surface_props","svg","swap","swap","swap","swap","swap_rb","swap_rb_inplace","sweep_gradient","sweep_gradient_with_interpolation","symmetric_difference","symmetric_difference","table_color_filter","table_tags","tex_coords","tex_coords","text_to_glyphs","text_to_glyphs","text_to_glyphs_vec","tight_bounds","tight_bounds","tile","time_zone_minutes","to_a_color_filter","to_a_color_matrix","to_a_color_mode","to_bytes","to_ceil","to_color","to_color","to_floor","to_font_data","to_hsv","to_hsv","to_m33","to_non_inverse","to_non_texture_image","to_opaque","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_quad","to_quad","to_raster_image","to_raw_shader","to_rgb","to_round","to_shader","to_shader","to_shader","to_shader","to_shader","to_string","to_svg","to_svg_with_encoding","to_tri_strip","to_xyzd50_hash","to_xyzd50_hash","toggle","toggle","toggle_inverse_fill_type","toggle_inverse_fill_type","toggle_inverse_fill_type","top","top","top","top","top","transform","transform_with_perspective_clip","translate","translate","translate","translated","transpose","trim","trim_path_effect","try_alloc_n32_pixels","try_alloc_n32_pixels","try_alloc_pixels","try_alloc_pixels","try_alloc_pixels_flags","try_alloc_pixels_flags","try_alloc_pixels_info","try_alloc_pixels_info","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turbulence_perlin_noise","two_point_conical_gradient","two_point_conical_gradient_with_interpolation","tx","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_name","type_name","typeface","typeface","typeface","typeface_or_default","unichar_to_glyph","unichar_to_glyph","unichar_to_glyphs","unichars_to_glyphs","uniform_size","uniforms","union","union","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","unique_id","units_per_em","unsafe_send_sync","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","update_bounds_cache","use_cubic","utils","v","valid_row_bytes","valid_row_bytes","valid_subset","validate_alpha_type","variant_name","variation_design_parameters","variation_design_position","vertex_count","vertices","w","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width","width_64","with_a","with_adjustment","with_alpha_type","with_alpha_type","with_alpha_type","with_alpha_type","with_color_filter","with_color_space","with_color_space","with_color_space","with_color_space","with_color_space","with_color_space","with_color_spin","with_color_spin","with_color_type","with_color_type","with_color_type","with_color_type","with_default_mipmaps","with_dimensions","with_dimensions","with_dimensions","with_inset","with_inset","with_linear_gamma","with_linear_gamma","with_local_matrix","with_local_matrix","with_matrix","with_matrix","with_offset","with_offset","with_offset","with_offset_to","with_offset_to","with_outset","with_outset","with_size","with_srgb_gamma","with_srgb_gamma","with_subsampling","with_transform","with_transform_with_perspective_clip","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap_mut","wrap_ref","wrap_send","wrap_send","wrapper","writable_addr","writable_addr","writable_addr_at","writable_addr_at","write","write_pixels_from_bitmap","write_pixels_from_pixmap","write_to_memory","x","x","x","x","x","x","x","x","x","x_height","x_max","x_min","y","y","y","y","y","y","y","y","y","year","yuv_color_space","yuv_color_space","yuv_to_rgb","yuva_info","yuva_info","yuva_info","yuva_pixmap_info","yuva_pixmaps","z","z","z","link_to_destination","named_destination","rect_with_url","arithmetic","AutoCanvasRestore","AutoRestoredCanvas","Canvas","F16_COLOR_TYPE","Fast","GlyphPositions","INIT_WITH_PREVIOUS","Lattice","Lines","OwnedCanvas","PRESERVE_LCD_TEXT","PointMode","Points","Points","Polygon","RSXforms","SaveLayerFlags","SaveLayerRec","SetMatrix","SrcRectConstraint","Strict","TopLayerPixels","access_top_layer_pixels","all","annotate_link_to_destination","annotate_named_destination","annotate_rect_with_url","as_mut","as_mut","backdrop","base_layer_size","base_props","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","clear","clip_irect","clip_mask","clip_matrix","clip_path","clip_rect","clip_region","clip_rrect","clip_shader","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","colors","complement","concat","concat_44","contains","default","default","deref","deref","deref_mut","deref_mut","device_clip_bounds","difference","discard","draw_annotation","draw_arc","draw_circle","draw_color","draw_drawable","draw_drawable_at","draw_drrect","draw_glyphs_at","draw_glyphs_utf8","draw_image","draw_image_lattice","draw_image_nine","draw_image_rect","draw_image_rect_with_sampling_options","draw_image_with_sampling_options","draw_irect","draw_line","draw_oval","draw_paint","draw_patch","draw_path","draw_picture","draw_point","draw_points","draw_rect","draw_region","draw_round_rect","draw_rrect","draw_shadow","draw_str","draw_str_align","draw_text_blob","draw_vertices","drop","drop","empty","eq","eq","eq","extend","flags","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bitmap","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raster_direct","from_raster_direct_n32","guard","hash","hash","hash","image_info","info","inner","inner_mut","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","is_all","is_clip_empty","is_clip_rect","is_empty","lattice","local_clip_bounds","local_to_device","local_to_device_as_3x3","new","new_null","new_surface","not","origin","paint","partial_cmp","peek_pixels","pixels","props","quick_reject","quick_reject","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","rect_types","remove","reset_matrix","restore","restore","restore_to_count","rotate","row_bytes","save","save_count","save_layer","save_layer_alpha","scale","set","set_matrix","set_matrix","set_matrix","skew","sub","sub_assign","surface","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","top_props","total_matrix","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrap","wrap","write_pixels","write_pixels_from_bitmap","x_divs","y_divs","0","0","Default","FixedColor","Lattice","RectType","Transparent","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone_into","colors","default","eq","fmt","fmt","from","from","hash","into","into","rect_types","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x_divs","y_divs","BottomLeft","BottomRight","BottomUp","Codec","CouldNotRewind","DEFAULT","EncodedOrigin","ErrorInInput","IncompleteInput","InternalError","InvalidConversion","InvalidInput","InvalidParameters","InvalidScale","LAST","LeftBottom","LeftTop","No","Options","PreferAnimation","PreferStillImage","Result","RightBottom","RightTop","ScanlineOrder","SelectionPolicy","Success","TopDown","TopLeft","TopRight","Unimplemented","Yes","ZeroInitialized","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","dimensions","encoded_format","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","frame_index","from","from","from","from","from","from_data","get_frame_count","get_image","get_pixels","get_pixels_to_pixmap","get_pixels_with_options","get_repetition_count","get_scaled_dimensions","get_scanlines","get_yuva_planes","hash","hash","hash","hash","incremental_decode","info","inner","inner_mut","into","into","into","into","into","next_scanline","origin","outbound_scanline","prior_frame","query_yuva_info","result_to_string","scanline_order","skip_scanlines","start_incremental_decode","start_scanline_decode","subset","swaps_width_height","to_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrap","valid_subset","wrap","zero_initialized","ColorFilter","color_filters","composed","filter_color","filter_color4f","fmt","from_argb","from_table","high_contrast","is_alpha_unchanged","luma","new_lighting","overdraw","to_a_color_matrix","to_a_color_mode","blend","blend_with_color_space","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","lighting","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","table","table_argb","blend","blend_with_color_space","compose","hsla_matrix","hsla_matrix_of_color_matrix","lerp","lighting","linear_to_srgb_gamma","matrix","matrix_row_major","srgb_to_linear_gamma","table","table_argb","ColorMatrix","default","eq","fmt","get_row_major","new","post_concat","post_translate","pre_concat","rgb_to_yuv","set_concat","set_identity","set_row_major","set_saturation","set_scale","yuv_to_rgb","new_lighting","BLACK","BLUE","CYAN","DARK_GREY","GREEN","GREY","LIGHT_GREY","MAGENTA","RED","TRANSPARENT","WHITE","YELLOW","ContourMeasure","ContourMeasureIter","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_path","get_matrix","hash","insert","intersection","intersects","into","is_all","is_closed","is_empty","length","new","next","not","partial_cmp","pos_tan","remove","reset","segment","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","new","new","new","Document","abort","begin_page","borrow","borrow_mut","canvas","close","end_page","fmt","from","into","page","pages","state","try_from","try_into","type_id","OnPage","Open","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","Drawable","approximate_bytes_used","bounds","draw","draw_at","fmt","generation_id","notify_drawing_changed","bitmap","pixmap","Alias","AntiAlias","Edging","Font","SubpixelAntiAlias","borrow","borrow_mut","clone","clone_into","count_str","count_text","default","edging","eq","fmt","fmt","from","from_typeface","from_typeface_with_params","get_bounds","get_intercepts","get_path","get_pos","get_widths","get_widths_bounds","get_x_pos","hash","hinting","into","is_baseline_snap","is_embedded_bitmaps","is_embolden","is_force_auto_hinting","is_linear_metrics","is_subpixel","measure_str","measure_text","metrics","new","scale_x","set_baseline_snap","set_edging","set_embedded_bitmaps","set_embolden","set_force_auto_hinting","set_hinting","set_linear_metrics","set_scale_x","set_size","set_skew_x","set_subpixel","set_typeface","size","skew_x","spacing","str_to_glyphs","str_to_glyphs_vec","text_to_glyphs","text_to_glyphs_vec","to_owned","try_from","try_into","type_id","typeface","typeface_or_default","unichar_to_glyph","unichar_to_glyphs","with_size","FontArguments","Palette","VariationPosition","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collection_index","coordinates","default","drop","fmt","fmt","fmt","from","from","from","index","inner","inner_mut","into","into","into","new","overrides","palette","palette","set_collection_index","set_palette","set_variation_design_position","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","variation_design_position","variation_position","wrap","Override","borrow","borrow_mut","clone","clone_into","color","default","eq","fmt","from","index","inner","inner_mut","into","to_owned","try_from","try_into","type_id","unwrap","wrap","Coordinate","axis","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","inner","inner_mut","into","to_owned","try_from","try_into","type_id","unwrap","value","wrap","BOUNDS_INVALID","Flags","FontMetrics","STRIKEOUT_POSITION_IS_VALID","STRIKEOUT_THICKNESS_IS_VALID","UNDERLINE_POSITION_IS_VALID","UNDERLINE_THICKNESS_IS_VALID","all","ascent","avg_char_width","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","bottom","cap_height","clone","clone","clone_into","clone_into","cmp","complement","contains","default","default","descent","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_bounds","hash","inner","inner_mut","insert","intersection","intersects","into","into","is_all","is_empty","leading","max_char_width","not","partial_cmp","remove","set","strikeout_position","strikeout_thickness","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","top","try_from","try_from","try_into","try_into","type_id","type_id","underline_position","underline_thickness","union","unwrap","wrap","x_height","x_max","x_min","VariationAxis","def","max","min","tag","variation","Axis","borrow","borrow_mut","clone","clone_into","def","default","eq","fmt","from","inner","inner_mut","into","is_hidden","max","min","new","set_hidden","tag","to_owned","try_from","try_into","type_id","unwrap","wrap","BLACK","BOLD","CONDENSED","EXPANDED","EXTRA_BLACK","EXTRA_BOLD","EXTRA_CONDENSED","EXTRA_EXPANDED","EXTRA_LIGHT","FontStyle","INVISIBLE","Italic","LIGHT","MEDIUM","NORMAL","NORMAL","Oblique","SEMI_BOLD","SEMI_CONDENSED","SEMI_EXPANDED","Slant","THIN","ULTRA_CONDENSED","ULTRA_EXPANDED","Upright","Weight","Width","bold","bold_italic","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","deref","deref","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","into","into","into","into","italic","new","normal","partial_cmp","partial_cmp","slant","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","weight","width","wrap","wrap","wrap","Colors","ColorsInSpace","Flags","GradientShaderColors","INTERPOLATE_COLORS_IN_PREMUL","Interpolation","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","default","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","in_premul","inner","inner_mut","insert","interpolation","intersection","intersects","into","into","into","is_all","is_empty","is_empty","len","linear","linear_with_interpolation","not","partial_cmp","radial","radial_with_interpolation","remove","set","sub","sub_assign","sweep","sweep_with_interpolation","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","two_point_conical","two_point_conical_with_interpolation","type_id","type_id","type_id","union","unwrap","wrap","0","0","1","InPremul","allow_jit","font_cache_count_limit","font_cache_count_used","font_cache_limit","font_cache_used","init","purge_all_caches","purge_font_cache","purge_resource_cache","resource_cache_single_allocation_byte_limit","resource_cache_total_bytes_limit","resource_cache_total_bytes_used","set_flags","set_font_cache_count_limit","set_font_cache_limit","set_resource_cache_single_allocation_byte_limit","set_resource_cache_total_bytes_limit","InvertBrightness","InvertLightness","InvertStyle","Last","NoInvert","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","to_owned","try_from","try_into","type_id","HighContrastConfig","borrow","borrow_mut","clone","clone_into","contrast","default","eq","fmt","from","grayscale","high_contrast_config","inner","inner_mut","into","invert_style","is_valid","new","new","to_owned","try_from","try_into","type_id","unwrap","wrap","InvertBrightness","InvertLightness","InvertStyle","NoInvert","Allow","BC1_RGB8_UNORM","BC1_RGBA8_UNORM","BitDepth","COUNT","CachingHint","CompressionType","CubicResampler","Disallow","ETC1","ETC2_RGB8_UNORM","F16","Image","Last","None","U8","alpha_type","b","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","c","catmull_rom","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color_space","color_type","decode_to_raster","dimensions","encode_to_data","encode_to_data_with_quality","encoded_data","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bitmap","from_encoded","from_encoded_with_alpha_type","from_generator","from_picture","from_picture_with_props","from_raster_data","has_mipmaps","hash","hash","hash","height","image_info","inner","inner_mut","into","into","into","into","is_alpha_only","is_lazy_generated","is_opaque","is_texture_backed","mitchell","new_color_space","new_non_texture_image","new_raster_from_compressed","new_raster_image","new_raster_image_with_caching_hint","new_subset","new_with_filter","peek_pixels","read_pixels","reinterpret_color_space","scale_pixels","to_non_texture_image","to_owned","to_owned","to_owned","to_owned","to_raster_image","to_raw_shader","to_shader","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unique_id","unwrap","width","with_default_mipmaps","wrap","Forward","ImageFilter","MapDirection","Reverse","alpha_threshold","arithmetic","blur","borrow","borrow_mut","can_compute_fast_bounds","clone","clone_into","color_filter","color_filter_node","compose","compute_fast_bounds","count_inputs","dilate","displacement_map_effect","distant_lit_diffuse_lighting","distant_lit_specular_lighting","eq","erode","filter_bounds","fmt","fmt","from","from_paint","from_picture","get_input","hash","input","inputs","into","magnifier","matrix_convolution","merge","offset","point_lit_diffuse_lighting","point_lit_specular_lighting","spot_lit_diffuse_lighting","spot_lit_specular_lighting","tile","to_a_color_filter","to_owned","try_from","try_into","type_id","with_local_matrix","ArithmeticFPInputs","CropRect","Dither","NO_CROP_RECT","No","Yes","alpha_threshold","arithmetic","blend","blur","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_filter","compose","default","dilate","displacement_map","distant_lit_diffuse","distant_lit_specular","drop_shadow","drop_shadow_only","enforce_pm_color","eq","eq","eq","erode","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","image","inner","inner_mut","into","into","into","k","magnifier","matrix_convolution","matrix_transform","merge","new","offset","paint","picture","point_lit_diffuse","point_lit_specular","rect","shader","shader_with_dither","spot_lit_diffuse","spot_lit_specular","tile","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","wrap","new","new","AFFINE","AffineMember","ApplyPerspectiveClip","Center","End","Fill","IDENTITY","IDENTITY","Matrix","Member","No","PERSPECTIVE","Persp0","Persp1","Persp2","SCALE","ScaleToFit","ScaleX","ScaleX","ScaleY","ScaleY","SkewX","SkewX","SkewY","SkewY","Start","TRANSLATE","TransX","TransX","TransY","TransY","TypeMask","Yes","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cheap_equal_to","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","complement","concat","contains","decompose_scale","default","difference","dirty_matrix_type_cache","dump","empty","eq","eq","eq","eq","eq","eq","extend","fixed_step_in_x","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_affine","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_poly_to_poly","from_rect_to_rect","get_9","get_type","has_perspective","hash","hash","hash","i","index","index","index","index_mut","index_mut","index_mut","inner","inner_mut","insert","intersection","intersects","into","into","into","into","into","into","invalid_matrix","invert","is_all","is_empty","is_finite","is_fixed_step_in_x","is_identity","is_scale_translate","is_similarity","is_translate","map_homogeneous_points","map_homogeneous_points_2d","map_origin","map_point","map_points","map_points_inplace","map_radius","map_rect","map_rect_scale_translate","map_rect_to_quad","map_rect_with_perspective_clip","map_vector","map_vectors","map_vectors_inplace","map_xy","max_scale","min_max_scales","min_scale","mul","new_all","new_identity","new_scale","new_trans","normalize_perspective","not","partial_cmp","persp_x","persp_y","post_concat","post_idiv","post_rotate","post_scale","post_skew","post_translate","pre_concat","pre_rotate","pre_scale","pre_skew","pre_translate","preserves_axis_alignment","preserves_right_angles","rc","rect_stays_rect","rect_to_rect","remove","reset","rotate_deg","rotate_deg_pivot","rotate_rad","scale","scale_x","scale_y","set","set_9","set_affine","set_affine_identity","set_all","set_concat","set_identity","set_persp_x","set_persp_y","set_poly_to_poly","set_rect_to_rect","set_rotate","set_rsxform","set_scale","set_scale_translate","set_scale_x","set_scale_y","set_sin_cos","set_skew","set_skew_x","set_skew_y","set_translate","set_translate_x","set_translate_y","skew","skew_x","skew_y","sub","sub_assign","symmetric_difference","to_affine","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","translate","translate_x","translate_y","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrap","wrap","new","new_translate","new","DOT22","HLG","LINEAR","PQ","REC2020","SRGB","NUM_COLORS","new","Bevel","Butt","Cap","Fill","Join","Miter","Paint","Round","Round","Square","Stroke","StrokeAndFill","Style","alpha","alpha_f","as_blend_mode","as_image_filter","blend_mode","blend_mode_or","blender","color","color4f","color_filter","fmt","get_fill_path","get_fill_path_with_matrix","image_filter","is_anti_alias","is_dither","is_src_over","mask_filter","new","nothing_to_draw","path_effect","reset","set_alpha","set_alpha_f","set_anti_alias","set_argb","set_blend_mode","set_blender","set_color","set_color4f","set_color_filter","set_dither","set_image_filter","set_mask_filter","set_path_effect","set_shader","set_stroke","set_stroke_cap","set_stroke_join","set_stroke_miter","set_stroke_width","set_style","shader","stroke_cap","stroke_join","stroke_miter","stroke_width","style","AddPathMode","Append","ArcSize","CCW","CONIC","CUBIC","CW","Close","Conic","Cubic","Direction","Done","EvenOdd","Extend","FillType","InverseEvenOdd","InverseWinding","Iter","LINE","Large","Line","MAX_POINTS","Move","Path","QUAD","Quad","RawIter","SegmentMask","Small","Verb","Winding","add_arc","add_circle","add_oval","add_path","add_path_matrix","add_poly","add_rect","add_round_rect","add_rrect","all","approximate_bytes_used","arc_to","arc_to_rotated","arc_to_tangent","as_winding","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","circle","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","cmp","complement","compute_tight_bounds","conic_to","conic_weight","conic_weight","conservatively_contains_rect","contains","contains","convert_conic_to_quads","convexity_type","convexity_type_or_unknown","count_points","count_verbs","cubic_to","default","default","deserialize","difference","drop","drop","dump","dump_arrays","dump_arrays_as_data","dump_as_data","dump_hex","empty","eq","eq","eq","eq","extend","fill_type","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_str","from_svg","generation_id","get_point","get_points","get_verbs","hash","hash","hash","hash","inc_reserve","insert","interpolate","intersection","intersects","into","into","into","into","into","into","into_iter","into_iter","is_all","is_close_line","is_closed_contour","is_convex","is_cubic_degenerate","is_empty","is_empty","is_finite","is_interpolatable","is_inverse_fill_type","is_last_contour_closed","is_line","is_line_degenerate","is_oval","is_quad_degenerate","is_rect","is_rrect","is_valid","is_volatile","last_pt","line","line_to","make_scale","make_transform","move_to","new","new","new","new_from","next","next","not","offset","op","oval","oval_with_start_index","partial_cmp","peek","points","polygon","quad_to","r_arc_to_rotated","r_conic_to","r_cubic_to","r_line_to","r_move_to","r_quad_to","rect","remove","reset","reverse_add_path","rewind","rrect","rrect_with_start_index","segment_masks","serialize","set","set_fill_type","set_is_volatile","set_last_pt","set_path","set_path","shrink_to_fit","simplify","sub","sub_assign","swap","symmetric_difference","tight_bounds","to_owned","to_owned","to_owned","to_owned","to_svg","to_svg_with_encoding","toggle","toggle_inverse_fill_type","transform","transform_with_perspective_clip","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","update_bounds_cache","with_offset","with_transform","with_transform_with_perspective_clip","LastEnum","Morph","Rotate","Style","Translate","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","new","DashInfo","PathEffect","as_a_dash","borrow","borrow_mut","clone","clone_into","compose","corner_path","dash","discrete","eq","filter_path","filter_path_inplace","filter_path_inplace_with_matrix","fmt","fmt","from","intervals","into","line_2d","matrix","matrix_translate","merge","needs_ctm","path_1d","path_2d","phase","stroke","sum","to_owned","trim","try_from","try_into","type_id","GET_POSITION","GET_POS_AND_TAN","GET_TANGENT","MatrixFlags","PathMeasure","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","default","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_path","hash","insert","intersection","intersects","into","is_all","is_closed","is_empty","length","matrix","new","next_contour","not","partial_cmp","pos_tan","remove","segment","set","set_path","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","CCW","CW","Close","Conic","Cubic","EvenOdd","InverseEvenOdd","InverseWinding","Line","Move","PathDirection","PathFillType","PathSegmentMask","PathVerb","Quad","Winding","AttributeList","Metadata","StructureElementNode","alt","append_child","append_float","append_float_array","append_int","attributes","attributes_mut","author","borrow","borrow","borrow_mut","borrow_mut","child_vector","creation","creator","default","default","default","drop","encoding_quality","fmt","fmt","fmt","from","from","into","into","keywords","lang","modified","new","new_document","node_id","pdfa","producer","raster_dpi","set_alt","set_child_vector","set_lang","set_node_id","set_type_string","subject","title","try_from","try_from","try_into","try_into","type_id","type_id","type_string","fractal_noise","turbulence","PictureRecorder","begin_recording","finish_recording_as_drawable","finish_recording_as_picture","fmt","new","recording_canvas","Cliperator","Combine","Difference","Intersect","Intersects","Iterator","LastOp","Region","RegionOp","Replace","ReverseDifference","Spanerator","Union","XOR","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","combine","compute_region_complexity","contains","contains","contains","contains_point","contains_rect","contains_region","difference","difference","drop","drop","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_rect","get_boundary_path","hash","inner","inner","inner","inner_mut","inner_mut","inner_mut","intersect","intersect","intersects","intersects","intersects","intersects_rect","intersects_region","into","into","into","into","into_iter","into_iter","into_iter","is_complex","is_done","is_done","is_empty","is_rect","new","new","new","new","new_empty","next","next","next","next","next","op_rect","op_rect_region","op_region","op_region_rect","quick_contains","quick_reject","quick_reject","quick_reject_rect","quick_reject_region","read_from_memory","rect","rect","replace","replace","reset","reverse_difference","reverse_difference","rewind","rgn","set","set_empty","set_path","set_rect","set_rects","set_region","swap","to_owned","to_owned","to_owned","to_owned","translate","translated","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","unwrap","unwrap","unwrap","wrap","wrap","wrap","write_to_memory","xor","xor","Complex","Corner","Empty","LastType","LowerLeft","LowerRight","NinePatch","Oval","RRect","Rect","SIZE_IN_MEMORY","Simple","Type","UpperLeft","UpperRight","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone_into","clone_into","clone_into","contains","default","dump","dump_hex","dump_to_string","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_type","hash","hash","height","inner","inner_mut","inset","into","into","into","is_complex","is_empty","is_nine_patch","is_oval","is_rect","is_simple","is_valid","new","new_empty","new_nine_patch","new_oval","new_rect","new_rect_radii","new_rect_xy","offset","outset","radii","read_from_memory","rect","set_empty","set_nine_patch","set_oval","set_rect","set_rect_radii","set_rect_xy","simple_radii","to_owned","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","width","with_inset","with_offset","with_outset","wrap","write_to_memory","Blender","Blender","Child","ChildPtr","ChildType","ColorFilter","ColorFilter","Options","RuntimeEffect","Shader","Shader","Uniform","Variable","Varying","allow_blender","allow_color_filter","allow_shader","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone_into","clone_into","clone_into","count","default","eq","eq","find_child","find_input","find_uniform","flags","fmt","fmt","fmt","fmt","fmt","fmt","force_unoptimized","from","from","from","from","from","from","hash","index","inner","inner_mut","input_size","inputs","into","into","into","is_array","is_color","make_blender","make_color_filter","make_for_blender","make_for_color_filer","make_for_shader","make_shader","name","name","offset","size_in_bytes","source","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","uniform","uniform_size","uniforms","unwrap","wrap","0","0","0","ARRAY","COLOR","FRAGMENT","Flags","Float","Float2","Float2x2","Float3","Float3x3","Float4","Float4x4","HALF_PRECISION","Int","Int2","Int3","Int4","Type","VERTEX","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","CubicResampler","FilterMode","FilterOptions","Linear","Linear","MipmapMode","Nearest","Nearest","None","SamplingMode","SamplingOptions","b","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone","clone_into","clone_into","cubic","default","eq","eq","filter","fmt","fmt","from","from","from","from","from","from_aniso","hash","inner","inner_mut","into","into","is_aniso","max_aniso","mipmap","mipmap","new","sampling","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","use_cubic","wrap","Color","Color","Conical","Conical","GradientInfo","GradientType","GradientTypeInternal","Linear","Linear","None","Radial","Radial","Shader","Sweep","Sweep","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_count","color_offsets","colors","default","eq","eq","eq","fmt","fmt","fmt","fmt","fractal_perlin_noise","from","from","from","gradient_flags","hash","image","into","into","into","is_a_image","is_opaque","linear_gradient","linear_gradient_with_interpolation","radial_gradient","radial_gradient_with_interpolation","shaders","sweep_gradient","sweep_gradient_with_interpolation","tile_mode","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","turbulence_perlin_noise","two_point_conical_gradient","two_point_conical_gradient_with_interpolation","type_id","type_id","type_id","with_color_filter","with_local_matrix","0","0","0","0","1","1","blend","color","color_in_space","empty","new","blend","color","color_in_space","empty","new","new","Fill","Fill","Hairline","Hairline","InitStyle","Stroke","StrokeAndFill","StrokeRec","Style","apply_to_paint","apply_to_path","apply_to_path_inplace","borrow","borrow","borrow_mut","borrow_mut","cap","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","from_paint","has_equal_effect","hash","hash","inflation_radius","inflation_radius_from_paint_and_style","inflation_radius_from_params","into","into","is_fill_style","is_hairline_style","join","miter","need_to_apply","new","new_fill","new_hairline","res_scale","set_fill_style","set_hairline_style","set_res_scale","set_stroke_params","set_stroke_style","style","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","BackendSurfaceAccess","ContentChangeMode","Discard","NoAccess","Present","Retain","Surface","borrow","borrow","borrow_mut","borrow_mut","canvas","characterize","clone","clone","clone_into","clone_into","draw","draw_display_list","draw_display_list_with_offset","eq","eq","flush_and_submit","flush_submit_and_sync_cpu","fmt","fmt","fmt","from","from","generation_id","hash","hash","height","image_info","image_snapshot","image_snapshot_with_bounds","into","into","is_compatible","new_null","new_raster","new_raster_direct","new_raster_n32_premul","new_surface","new_surface_with_dimensions","notify_content_will_change","peek_pixels","props","read_pixels","read_pixels_to_bitmap","read_pixels_to_pixmap","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","write_pixels_from_bitmap","write_pixels_from_pixmap","Canvas","canvas","CONVERT_TEXT_TO_PATHS","Canvas","Flags","NO_PRETTY_XML","RELATIVE_PATH_ENCODING","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","default","deref","deref_mut","difference","drop","empty","end","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","new","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","from_argb","from_table","Inverted","Mode","Normal","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","new","to_owned","try_from","try_into","type_id","DoIncludeData","DontIncludeData","FontId","FontTableTag","IncludeDataIfLocal","LocalizedString","LocalizedStringsIter","SerializeBehavior","Typeface","TypefaceId","borrow","borrow","borrow_mut","borrow_mut","bounds","clone","clone","clone_into","clone_into","clone_with_arguments","copy_table_data","count_glyphs","count_tables","default","deserialize","eq","eq","equal","family_name","fmt","fmt","fmt","fmt","font_style","from","from","from_data","from_name","get_kerning_pair_adjustments","get_table_data","get_table_size","hash","into","into","is_bold","is_fixed_pitch","is_italic","language","new","new_family_name_iterator","next","post_script_name","serialize","str_to_glyphs","string","table_tags","text_to_glyphs","to_font_data","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unichar_to_glyph","unichars_to_glyphs","unique_id","units_per_em","variation_design_parameters","variation_design_position","Camera3D","CustomTypefaceBuilder","DrawableAndBounds","OrderedFontMgr","Patch3D","Path","TypefaceGlyph","View3D","append","axis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","default","deref","deref_mut","detach","dot_with","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","inner","inner","inner_mut","inner_mut","into","into","into","location","new","new","new_null_canvas","observer","origin","parse_path","patch_to_matrix","reset","reset","set_font_style","set_glyph","set_metrics","shadow_utils","text_utils","to_owned","to_owned","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u","unwrap","unwrap","update","v","wrap","wrap","zenith","0","0","1","Absolute","PathEncoding","Relative","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","from_svg","hash","into","to_owned","to_svg","to_svg_with_encoding","try_from","try_into","type_id","ALL","GEOMETRIC_ONLY","ShadowFlags","TRANSPARENT_OCCLUDER","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","compute_tonal_colors","contains","difference","draw_shadow","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","local_bounds","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","Align","Center","Left","Right","borrow","borrow_mut","clone","clone_into","draw_str","eq","fmt","from","get_path","hash","into","to_owned","try_from","try_into","type_id","Bone","BoneIndices","BoneWeights","Builder","BuilderFlags","HAS_COLORS","HAS_TEX_COORDS","Last","MAX_CUSTOM_ATTRIBUTES","TriangleFan","TriangleStrip","Triangles","VertexMode","Vertices","all","apply_bones","approximate_size","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","bone_indices","bone_indices","bone_weights","bone_weights","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clone","clone","clone","clone_into","clone_into","clone_into","cmp","colors","colors","complement","contains","decode","detach","difference","empty","encode","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","has_bones","has_colors","has_indices","has_tex_coords","hash","hash","index_count","indices","indices","insert","intersection","intersects","into","into","into","is_all","is_empty","is_volatile","is_volatile","mode","new","new_copy","not","partial_cmp","positions","positions","remove","set","sub","sub_assign","symmetric_difference","tex_coords","tex_coords","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","unique_id","vertex_count","NativeTransmutableWrapper","PointerWrapper","RefWrapper","ValueWrapper","inner","inner","inner","inner","inner_mut","inner_mut","inner_mut","inner_mut","unwrap","unwrap","unwrap","wrap","wrap","wrap","wrap_mut","wrap_ref","Centered","MAX_PLANES","PlaneConfig","S410","S411","S420","S422","S440","S444","Siting","Subsampling","UYV","UYVA","Unknown","Unknown","YUV","YUVA","YUVAInfo","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compute_total_bytes","default","dimensions","eq","eq","fmt","fmt","fmt","from","from","has_alpha","has_alpha","hash","hash","height","inner","inner_mut","into","into","new","num_channels_in_plane","num_channels_in_plane","num_planes","num_planes","origin","origin_matrix","plane_config","plane_dimensions","plane_dimensions","plane_subsampling_factors","plane_subsampling_factors","siting_xy","subsampling","subsampling_factors","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrap","width","with_dimensions","with_subsampling","wrap","yuv_color_space","DataType","Float16","Last","Last","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_color_type_for_data_type","eq","eq","fmt","fmt","from","from","hash","hash","into","into","num_channels_and_data_type","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DATA_TYPE_CNT","DataType","Float16","MAX_PLANES","MAX_PLANES","Unorm10_Unorm2","Unorm16","Unorm8","YUVAPixmapInfo","YUVAPixmaps","allocate","compute_total_bytes","data_type","data_type","fmt","fmt","from_data","from_data_type","from_external_memory","from_external_pixmaps","init_pixmaps_from_single_allocation","is_supported","new","num_planes","num_planes","pixmaps_info","plane","plane_info","plane_infos","planes","recommended_rgba_color_type","row_bytes","row_bytes_iter","yuv_color_space","yuva_info","yuva_info","yuva_pixmap_info","DataType","Float16","PlaneConfig","S410","S411","S420","S422","S440","S444","Subsampling","SupportedDataTypes","UYV","UYVA","Unknown","Unknown","Unorm10_Unorm2","Unorm16","Unorm8","YUV","YUVA","Y_UV","Y_UV_A","Y_U_V","Y_U_V_A","Y_VU","Y_VU_A","Y_V_U","Y_V_U_A","all","default","default_color_type_for_data_type","enable_data_type","fmt","num_channels_and_data_type","supported"],"q":["skia_safeskia_safe::annotate","","","skia_safe::blenders","skia_safe::canvasskia_safe::canvas::GlyphPositions","","skia_safe::canvas::lattice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::codec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::color_filter","","","","","","","","","","","","","","","skia_safe::color_filter::color_filters","","","","","","","","","","","","","skia_safe::color_filters","","","","","","","","","","","","","skia_safe::color_matrix","","","","","","","","","","","","","","","","skia_safe::color_matrix_filter","skia_safe::colors","","","","","","","","","","","","skia_safe::contour_measure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::corner_path_effect","skia_safe::dash_path_effect","skia_safe::discrete_path_effect","skia_safe::document","","","","","","","","","","","","","","","","","skia_safe::document::state","","","","","","","","","","","","","","","","","","skia_safe::drawable","","","","","","","","skia_safe::encode","","skia_safe::font","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments::palette","","","","","","","","","","","","","","","","","","","","skia_safe::font_arguments::variation_position","","","","","","","","","","","","","","","","","","","","skia_safe::font_metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_parameters","","","","","","skia_safe::font_parameters::variation","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::font_style","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gradient_shader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::gradient_shader::GradientShaderColors","","","skia_safe::gradient_shader::interpolation","skia_safe::graphics","","","","","","","","","","","","","","","","","skia_safe::high_contrast_config","","","","","","","","","","","","","","","","","","skia_safe::high_contrast_filter","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::high_contrast_filter::high_contrast_config","","","","skia_safe::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::image_filter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::image_filters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::line_2d_path_effect","skia_safe::luma_color_filter","skia_safe::matrixskia_safe::matrix_path_effect","","skia_safe::merge_path_effect","skia_safe::named_transfer_fn","","","","","","skia_safe::overdraw_color_filter","","skia_safe::paint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::pathskia_safe::path_1d_path_effect","","","","","","","","","","","","","","","","","","","skia_safe::path_2d_path_effect","skia_safe::path_effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::path_measure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::path_types","","","","","","","","","","","","","","","","skia_safe::pdf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::perlin_noise_shader","","skia_safe::picture_recorder","","","","","","","skia_safe::region","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::rrect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::runtime_effect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::runtime_effect::ChildPtr","","","skia_safe::runtime_effect::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::sampling_options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::shader::GradientType","","","","","","skia_safe::shader::shaders","","","","skia_safe::shader_mask_filter","skia_safe::shaders","","","","skia_safe::stroke_and_fill_path_effect","skia_safe::stroke_path_effect","skia_safe::stroke_rec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::surface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::svg","","skia_safe::svg::canvas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::table_color_filter","","skia_safe::trim_path_effect","","","","","","","","","","","","","","","","","skia_safe::typeface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils::TypefaceGlyph","","","skia_safe::utils::parse_path","","","","","","","","","","","","","","","","","","","","skia_safe::utils::shadow_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::utils::text_utils","","","","","","","","","","","","","","","","","","","skia_safe::vertices","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::wrapper","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmap_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmaps","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skia_safe::yuva_pixmaps::yuva_pixmap_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Bitmap</code> describes a two-dimensional raster pixel array. …","","","Blender represents a custom blend function in the Skia …","","","Reflected across x-axis","Rotated 180","","","","","","","<code>Canvas</code> provides an interface for drawing, and how the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","These values match the orientation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wraps a native type that can be represented in Rust memory.","","","","","","","","","","","","","","<code>Image</code> describes a two dimensional array of pixels to draw. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Rotated 90 CCW","Reflected across x-axis, Rotated 90 CCW","","","","","","","","","","","","The maximum number of points an iterator will return for …","","MaskFilter is the base class for object that perform …","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a <code>Canvas</code> that is owned and dropped when it goes …","","","","","","","","","","","","","","","","","","","Implement this trait to use a pixel type in …","","","","","","","","","","","","","","","","A wrapper type represented by a reference counted pointer …","","","","","","","","","","","","","","","","","","","","","","","","","A wrapper type that represents a native type with a …","","","","","Reflected across x-axis, Rotated 90 CW","Rotated 90 CW","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Default","Reflected across y-axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies the structure of planes for a YUV image with …","YUVAInfo combined with per-plane ColorTypes and row bytes. …","Helper to store Pixmap planes as described by a …","","","","","","","","","","","","","","","","","","","","","Appends arc to <code>Path</code>, as the start of new contour. Arc …","","","","","","","","","","Adds circle centered at (x, y) of size radius to <code>Path</code>, …","","","Adds oval to <code>Path</code>, appending <code>Verb::Move</code>, four <code>Verb::Conic</code>, …","","","","Appends src to <code>Path</code>, offset by <code>(d.x, d.y)</code>.","Appends src to <code>Path</code>, transformed by matrix. Transformed …","Adds contour created from line array, adding <code>pts.len() - 1</code> …","","","","","Adds a new contour to the path, defined by the rect, and …","Appends <code>RRect</code> to <code>Path</code>, creating a new closed contour. <code>RRect</code>…","","","Adds rrect to <code>Path</code>, creating a new closed contour. If dir …","","","","","","All legal combinations of PlaneConfig and DataType are …","Returns the set containing all flags.","Returns the set containing all flags.","Sets <code>ImageInfo</code> to width, height, and native color type; …","Sets <code>ImageInfo</code> to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","","","","","","","","","","","","","","","","","Allocate space for pixmaps’ pixels in the YUVAPixmaps.","","","","","","","","","","","","","","","Returns <code>AlphaType</code>.","","","","","","","","","","","","Returns the approximate byte size of the <code>Path</code> in memory.","","","Returns the approximate bounds that would result from …","Returns the approximate bounds that would result from …","","","","","","","Appends arc to <code>Path</code>. Arc added is part of ellipse bounded …","","","","Appends arc to <code>Path</code>. Arc is implemented by one or more …","","Appends arc to <code>Path</code>, after appending line if needed. Arc …","","","","","","","","","","","","","","","","","Returns a new image from the bitmap. If the bitmap is …","Returns a new image from the bitmap. If the bitmap is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","","","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","Create a blur mask filter.","Create a blur mask filter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The y coordinate of the rectangle’s bottom edge.","The y coordinate of the rectangle’s bottom edge.","Returns <code>IRect { 0, 0, width(), height() }</code>.","","","","","","","Returns <code>IRect { 0, 0, width(), height() }</code>.","Returns minimum and maximum axes values of <code>Point</code> array. …","","","Returns <code>IRect</code> <code>{ 0, 0, width(), height() }</code>.","","","","Access the underlying pixels as a byte array. This is a …","Access the underlying pixels as a byte array. This is a …","Returns number of bytes per pixel required by <code>ColorType</code>.","","","Returns number of bytes per pixel required by <code>ColorType</code>.","","","","","","","","Returns <code>true</code> if the handle can be sent to another thread.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends <code>Verb::Close</code> to <code>Path</code>. A closed contour connects the …","","","","","","","","","","","","","","","","","","Returns <code>ColorSpace</code>, the range of colors, associated with …","","","","","Returns <code>ColorSpace</code>, the range of colors, associated with …","","","Returns a smart pointer to <code>ColorSpace</code>, the range of …","","","","","","","","","Returns <code>ColorType</code> if known; otherwise, returns …","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","Returns minimum memory required for pixel storage. Does …","","","Returns minimum memory required for pixel storage. Does …","","","","","Returns <code>true </code>if all pixels are opaque. <code>ColorType</code> …","","","Returns <code>true </code>if all pixels are opaque. <code>ColorType</code> …","","","","","","Returns minimum and maximum axes values of the lines and …","Determine size to allocate for all planes. Optionally …","Given a per-plane row bytes, determine size to allocate …","","","","Adds conic from last point towards (x1, y1), to (x2, y2), …","","Returns <code>true</code> if rect is contained by <code>Path</code>. May return <code>false</code>…","","Returns <code>true</code> if the point <code>(p.x, p.y)</code> is contained by <code>Path</code>, …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","Approximates conic with quad array. Conic is constructed …","","","","","","","","","","","","","","","","","Returns the number of points in <code>Path</code>. <code>Point</code> count is …","","","","Returns the number of verbs: <code>Verb::Move</code>, <code>Verb::Line</code>, …","","","","","","","","","","Adds cubic from last point towards (x1, y1), then towards …","","","","","","","","The per-YUV<code>[A]</code> channel data type.","","","","","See RCHandle::new().","","","","","","","","","","","","","","","","See <code>Self::new()</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns <code>ISize { width(), height() }</code>.","","","","Dimensions of the full resolution image (after planes have …","Returns <code>ISize { width(), height() }</code>.","","","","Returns <code>ISize</code> <code>{ width(), height() }</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …","Returns <code>true</code> if <code>width()</code> or <code>height()</code> are zero, or if …","","","","See <code>Path::dump_as_data()</code>","","","","","Writes text representation of <code>Path</code> to <code>Data</code>. Set <code>dump_as_hex</code>…","See <code>Path::dump_as_data()</code>","","","","Returns an empty set of flags.","","Returns an empty set of flags.","Update to add support for pixmaps with <code>num_channels</code> …","","","","","","","See <code>Self::encode_to_data_with_quality</code>","Encodes <code>Image</code> pixels, returning result as <code>Data</code>.","","","Returns encoded <code>Image</code> pixels as <code>Data</code>, if <code>Image</code> was created …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces pixel values inside area with c. interpreted as …","","Replaces pixel values inside area with c. interpreted as …","","Replaces pixel values inside area with c. interpreted as …","","Replaces pixel values inside area with c. interpreted as …","","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with unpremultiplied color built …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","Replaces pixel values with <code>c</code>, interpreted as being in the …","","","","","","Sets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…","Sets dst to alpha described by pixels. Returns <code>false</code> if <code>dst</code>…","Shares <code>PixelRef</code> with <code>dst</code>. Pixels are not copied; <code>Bitmap</code> …","","Shares <code>PixelRef</code> with <code>dst</code>. Pixels are not copied; <code>Bitmap</code> …","","","","","","","","","","Returns <code>PathFillType</code>, the rule used to fill <code>Path</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Creates <code>Image</code> from bitmap, sharing or copying bitmap …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","Use storage in Data as backing store for pixmaps’ …","","","","Like above but uses …","","","See <code>Self::from_encoded_with_alpha_type()</code>","","","Return an image backed by the encoded data, but attempt to …","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …","Creates <code>Image</code> from data returned by <code>image_generator</code>. …","","","","","","","","","","","","","","","","See <code>Self::from_picture_with_props()</code>","","","Creates <code>Image</code> from picture. Returned <code>Image</code> width and …","","","","","","","","Creates <code>Image</code> from <code>ImageInfo</code>, sharing pixels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a unique value corresponding to the pixels in …","","(See Skia bug 1762.) Returns a non-zero, globally unique …","Returns a unique value corresponding to the pixels in …","","","","Returns pixel address at <code>(x, y)</code>.","Returns pixel address at <code>(x, y)</code>.","Look up the pixel at <code>(x,y)</code> and return its alpha component, …","","Look up the pixel at <code>(x,y)</code> and return its alpha component, …","","","","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","","","Returns pixel at <code>(x, y)</code> as unpremultiplied color. Returns …","","","","","","","","","","","","","","","","","Returns <code>Point</code> at index in <code>Point</code> array. Valid range for …","Returns number of points in <code>Path</code>. Up to max points are …","","","","","","","Returns the bounds of this bitmap, offset by its <code>PixelRef</code> …","Returns the bounds of this bitmap, offset by its <code>PixelRef</code> …","","","Returns the number of verbs in the path. Up to max verbs …","","","","","","","","","","","","","","","Returns <code>true</code> if the image has mipmap levels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns pixel row count.","","","","","","","Returns pixel row count.","","Returns pixel row count.","","","","","","","","","","","","","","","","","Returns a <code>ImageInfo</code> describing the width, height, color …","","","","","Grows <code>Path</code> verb array and <code>Point</code> array to contain …","","","","","","","","","","","","","","Returns width, height, <code>AlphaType</code>, ColorType, and <code>ColorSpace</code>…","","","","Returns width, height, <code>AlphaType</code>, ColorType, and <code>ColorSpace</code>…","","","Takes an allocation that is assumed to be at least […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","","","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code>, …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code>, …","Interpolates between <code>Path</code> with <code>Point</code> array of equal size. …","","","","","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if <code>Image</code> pixels represent transparency only. …","","","","","","","","","","","","","Returns <code>true</code> if the path is convex. If necessary, it will …","Tests if cubic is degenerate. Cubic with no length or that …","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","","","","","","Returns <code>true</code> if either <code>width()</code> or <code>height()</code> are zero.","Returns if <code>Path</code> is empty. Empty <code>Path</code> may have FillType but …","","","Returns <code>true</code> if no flags are currently stored.","","","","","Returns <code>true</code> if no flags are currently stored.","","","","Returns <code>true</code> for finite <code>Point</code> array values between …","","","","","","","","","","","","","Returns <code>true</code> if pixels can not change.","","Returns <code>true</code> if pixels can not change.","","Returns <code>true</code> if <code>Path</code> contain equal verbs and equal weights.","","Returns if FillType describes area outside <code>Path</code> geometry. …","","Returns if contour is closed. Contour is closed if <code>Path</code> …","Returns <code>true</code> if <code>Image</code> is backed by an image-generator or …","Returns <code>true</code> if <code>Path</code> contains only one line; <code>Verb</code> array …","Tests if line between <code>Point</code> pair is degenerate. Line with …","","","Returns <code>true</code> if <code>PixelRef</code> is <code>None</code>.","Returns <code>true</code> if <code>PixelRef</code> is <code>None</code>.","Returns <code>true</code> if <code>AlphaType</code> is set to hint that all pixels …","","","","","Returns <code>true</code> if <code>AlphaType</code> is set to hint that all pixels …","","","","","Returns <code>true</code> if pixels ignore their alpha value and are …","","Returns <code>true</code> if this path is recognized as an oval or …","Tests if quad is degenerate. Quad with no length or that …","Returns <code>true</code> if <code>Bitmap</code> can be drawn.","Returns <code>true</code> if <code>Bitmap</code> can be drawn.","Returns <code>Some(Rect, bool, PathDirection)</code> if <code>Path</code> is …","","","Returns <code>true</code> if path is representable as <code>RRect</code>. Returns …","","","","","","Is this valid and does it use color types allowed by the …","Returns <code>true</code> if the contents of <code>Image</code> was created on or …","","","Returns if <code>Path</code> data is consistent. Corrupt <code>Path</code> data is …","Returns <code>true</code> if the path is volatile; it will not be …","","","","","","","","","","","","","","","","Returns last point on <code>Path</code>. Returns <code>None</code> if <code>Point</code> array is …","","","","The x coordinate of the rectangle’s left edge.","The x coordinate of the rectangle’s left edge.","","","","","","","","","","","","","","","Adds line from last point to (x, y). If <code>Path</code> is empty, or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>true</code> if the type matches the color type’s format.","","","","","","","","","","","","","","","","","","","","","","","","Create a blender that implements the specified <code>BlendMode</code>.","","Create a blender that implements the specified <code>BlendMode</code>.","","","Adds beginning of contour at <code>Point</code> (x, y).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Macro to mark a Rust type as NativeTransmutable and test …","","","","","","","","","","","","","","Creates an empty <code>Bitmap</code> without pixels, with …","","","","","","","","","","","","","","","","","<code>dimensions</code> should specify the size of the full resolution …","","","","Initializes the YUVAPixmapInfo from a YUVAInfo with …","Creates an empty <code>Bitmap</code> without pixels, with …","Constructs an empty <code>Path</code>. By default, <code>Path</code> has no verbs, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs Data from a given byte slice without copying it.","Constructs Data from a given byte slice without copying it.","See [<code>Self::new_color_space_with_context</code>]","","","","Constructs Data from a &amp;CStr by copying its contents.","Constructs Data from a &amp;CStr by copying its contents.","","","","","","","","","","","","","Create a new path with the specified segments.","","","","","","","","","","","","","","","","","","Creates a CPU-backed <code>Image</code> from compressed data.","","","","","","","","","","Constructs Data from a copy of a &amp;str.","Constructs Data from a copy of a &amp;str.","","","","","","See [<code>Self::new_subset_with_context</code>]","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","Marks that pixels in <code>PixelRef</code> have changed. Subsequent …","","Marks that pixels in <code>PixelRef</code> have changed. Subsequent …","","","The number of Pixmap planes.","","Number of pixmap planes.","","","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>. <code>Path</code> is replaced by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies <code>Bitmap</code> pixel address, row bytes, and <code>ImageInfo</code> to …","Copies <code>Bitmap</code> pixel address, row bytes, and <code>ImageInfo</code> to …","Copies <code>Image</code> pixel address, row bytes, and <code>ImageInfo</code> to …","","","","","","Returns <code>PixelRef</code>, which contains: pixel base address; its …","Returns <code>PixelRef</code>, which contains: pixel base address; its …","Returns origin of pixels within <code>PixelRef</code>. <code>Bitmap</code> bounds is …","Returns origin of pixels within <code>PixelRef</code>. <code>Bitmap</code> bounds is …","Returns pixel address, the base address corresponding to …","","Access the underlying pixels. This is a rust-skia specific …","Access the underlying pixels. This is a rust-skia specific …","Returns pixel address, the base address corresponding to …","","Returns a constant reference to the <code>Pixmap</code> holding the …","Returns a constant reference to the <code>Pixmap</code> holding the …","","Get the ith Pixmap plane. <code>Pixmap</code> will be default …","","Returns the dimensions for each plane. Dimensions are as …","Image info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …","An iterator of all planes’ image infos.","","Access the Pixmap planes.","","","","","The number of points an iterator will return for the verb.","","","","","","","","","","","","","","","","","","","","","","","","Adds quad from last point towards (x1, y1), to (x2, y2). …","","","","","","","","","","Appends arc to <code>Path</code>, relative to last <code>Path</code> <code>Point</code>. Arc is …","","Adds conic from last point towards vector (dx1, dy1), to …","","","","Adds cubic from last point towards vector (dx1, dy1), then …","","Adds line from last point to vector (dx, dy). If <code>Path</code> is …","","Adds beginning of contour relative to last point. If <code>Path</code> …","","","Adds quad from last point towards vector (dx1, dy1), to …","","","","","","Copies a <code>crate::Rect</code> of pixels from <code>Bitmap</code> to <code>dst_pixels</code>. …","","Copies a <code>crate::Rect</code> of pixels from <code>Bitmap</code> to <code>dst_pixels</code>. …","","","See [<code>Self::read_pixels_with_context()</code>]","","","","","","","","","","","Creates a new <code>Image</code> identical to this one, but with a …","Notify that the borrowed dependency is not referred to …","Removes the specified flags in-place.","Removes the specified flags in-place.","","Resets to its initial state; all fields are set to zero, …","","","","","","Resets to its initial state; all fields are set to zero, …","","","","Sets <code>Path</code> to its initial state. Removes verb array, <code>Point</code> …","","","","Appends src to <code>Path</code>, from back to front. Reversed src …","Sets <code>Path</code> to its initial state, preserving internal …","","","","The x coordinate of the rectangle’s right edge.","The x coordinate of the rectangle’s right edge.","","","","","","","","","","","Returns row bytes, the interval from one pixel row to the …","","","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …","","Returns row bytes, the interval from one pixel row to the …","","Returns number of pixels that fit on row. Should be …","","","Returns number of pixels that fit on row. Should be …","Row bytes for all planes.","","","","","","","","","","","","","","","","","Copies <code>Image</code> to dst, scaling pixels to fit <code>dst.width()</code> and …","","","","","","","","","Returns a mask, where each set bit corresponds to a …","","","","Writes <code>Path</code> to buffer, returning the buffer written to, …","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","Inserts or removes the specified flags depending on the …","","","","","Sets <code>AlphaType</code>, if <code>alpha_type</code> is compatible with <code>ColorType</code>…","Sets <code>AlphaType</code>, if <code>alpha_type</code> is compatible with <code>ColorType</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets FillType, the rule used to fill <code>Path</code>. While there is …","","","","","","","","","","Sets internal flag to mark <code>Bitmap</code> as immutable. Once set, …","","Sets internal flag to mark <code>Bitmap</code> as immutable. Once set, …","","Sets width, height, <code>AlphaType</code>, ColorType, <code>ColorSpace</code>, and …","Sets width, height, <code>AlphaType</code>, ColorType, <code>ColorSpace</code>, and …","","","","Specifies whether <code>Path</code> is volatile; whether it will be …","","Sets the last point on the path. If <code>Point</code> array is empty, …","","","","","","","","","","","","Replaces <code>pixel_ref</code> and origin in <code>Bitmap</code>. <code>offset</code> specifies …","Replaces <code>pixel_ref</code> and origin in <code>Bitmap</code>. <code>offset</code> specifies …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns bit shift converting row bytes to row pixels.","","","","","","","Returns bit shift converting row bytes to row pixels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","","Disables all flags enabled in the set.","","","Checks whether there is a supported combination of color …","","","","Swaps the fields of the two bitmaps.","","Swaps the fields of the two bitmaps.","Exchanges the verb array, <code>Point</code> array, weights, and …","","","","","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","Returns raster image or lazy image. Copies <code>Image</code> backed by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns raster image. Copies <code>Image</code> backed by GPU texture …","<code>to_raw_shader</code> functions like <code>to_shader</code>, but for images …","","","","","","Make a shader with the specified tiling and mipmap …","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","Replaces FillType with its inverse. The inverse of …","","","","The y coordinate of the rectangle’s top edge.","The y coordinate of the rectangle’s top edge.","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","Sets <code>ImageInfo</code> to width, height, and native color type; …","Sets <code>ImageInfo</code> to width, height, and native color type; …","Allocates pixel memory with HeapAllocator, and replaces …","Allocates pixel memory with HeapAllocator, and replaces …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …","Sets <code>ImageInfo</code> to info following the rules in <code>set_info()</code> …eturns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","Returns value unique to image. <code>Image</code> contents cannot …","","","","Macro that implements Send and Sync.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates internal bounds so that subsequent calls to …","","","","","","","","Macro that verifies a variant name at compile time.","","","","","","Returns pixel count in each row. Should be equal or less …","","","","","","","Returns pixel count in each row. Should be equal or less …","","Returns pixel count in each row.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an image with the same “base” pixels as the …","","","Returns a YUVAInfo that is identical to this one but with …","","","","","","","","","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>.","","","","","","","","","","Returns a YUVAInfo that is identical to this one but with …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrap the handle in a type that can be sent to another …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a blender that implements the following: …","","Stack helper class calls <code>Canvas::restore_to_count()</code> when …","<code>Canvas</code> provides an interface for drawing, and how the …","","","Used to pass either a slice of <code>Point</code> or <code>RSXform</code> to …","initializes with previous contents","<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …","","Represents a <code>Canvas</code> that is owned and dropped when it goes …","","Selects if an array of points are drawn as discrete …","","","","","<code>SaveLayerFlags</code> provides options that may be used in any …","<code>SaveLayerRec</code> contains the state used to create the layer.","","<code>SrcRectConstraint</code> controls the behavior at the edge of …","","Provides access to Canvas’s pixels.","Returns the pixel base address, <code>ImageInfo</code>, <code>row_bytes</code>, and …","Returns the set containing all flags.","","","","","","If not <code>None</code>, this triggers the same initialization …","Gets the size of the base or root layer in global canvas …","Returns the <code>SurfaceProps</code> associated with the canvas (i.e., …","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Hints at layer size limit","source bounds to draw from","Fills clip with color <code>color</code> using <code>BlendMode::Src</code>. This has …","","","","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","Replaces clip with the intersection or difference of clip …","","","","","","","","","","","array of colors","Returns the complement of this set of flags.","Replaces <code>Matrix</code> with matrix premultiplied with existing …","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Sets <code>Self::bounds</code>, <code>Self::paint</code>, and <code>Self::backdrop</code> to <code>None</code>…","Creates an empty <code>Canvas</code> with no backing device or pixels, …","","","","","Returns <code>IRect</code> bounds of clip, unaffected by <code>Matrix</code>. If …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Makes <code>Canvas</code> contents undefined. Subsequent calls that …","Associates <code>Rect</code> on <code>Canvas</code> when an annotation; a key-value …","Draws arc using clip, <code>Matrix</code>, and <code>Paint</code> paint.","Draws circle at center with radius using clip, <code>Matrix</code>, and …","Fills clip with color <code>color</code>. <code>mode</code> determines how ARGB is …","Draws <code>Drawable</code> drawable using clip and <code>Matrix</code>, …","Draws <code>Drawable</code> drawable using clip and <code>Matrix</code>, offset by …","Draws <code>RRect</code> outer and inner using clip, <code>Matrix</code>, and <code>Paint</code> …","Draws <code>count</code> glyphs, at positions relative to <code>origin</code> styled …","Draws glyphs at positions relative to <code>origin</code> styled with …","","Draws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…","Draws <code>Image</code> <code>image</code> stretched proportionally to fit into <code>Rect</code>…","","","","Draws <code>IRect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","Draws line segment from <code>p1</code> to <code>p2</code> using clip, <code>Matrix</code>, and …","Draws oval oval using clip, <code>Matrix</code>, and <code>Paint</code>. In <code>paint</code>: …","Fills clip with <code>Paint</code> <code>paint</code>. <code>Paint</code> components, <code>Shader</code>, …","Draws a Coons patch: the interpolation of four cubics with …","Draws <code>Path</code> path using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. <code>Path</code> …","Draws <code>Picture</code> picture, using clip and <code>Matrix</code>; transforming …","Draws point <code>p</code> using clip, <code>Matrix</code> and <code>Paint</code> paint.","Draws <code>pts</code> using clip, <code>Matrix</code> and <code>Paint</code> <code>pain</code>. if the number …","Draws <code>Rect</code> rect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","Draws <code>Region</code> region using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. …","Draws <code>RRect</code> bounded by <code>Rect</code> rect, with corner radii …","Draws <code>RRect</code> rrect using clip, <code>Matrix</code>, and <code>Paint</code> <code>paint</code>. In …","","Draws <code>String</code>, with origin at <code>(origin.x, origin.y)</code>, using …","","Draws <code>TextBlob</code> blob at <code>(origin.x, origin.y)</code>, using clip, …","Draws <code>Vertices</code> vertices, a triangle mesh, using clip and …","Draws saved layers, if any. Frees up resources used by …","Restores <code>Canvas</code> to saved state. Drop is called when …","Returns an empty set of flags.","","","","","Preserves LCD text, creates with prior layer contents","Triggers the immediate execution of all pending draw …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a canvas that draws into bitmap. Use props to …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Allocates raster <code>Canvas</code> that will draw directly into …","Allocates raster <code>Canvas</code> specified by inline image …","Preserves <code>Canvas::save()</code> count. Optionally saves <code>Canvas</code> …","","","","Returns <code>ImageInfo</code> for <code>Canvas</code>. If <code>Canvas</code> is not associated …","Writable pixels’ <code>ImageInfo</code>","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if clip is empty; that is, nothing will draw.","Returns <code>true</code> if clip is <code>Rect</code> and not empty. Returns <code>false</code> …","Returns <code>true</code> if no flags are currently stored.","","Returns bounds of clip, transformed by inverse of <code>Matrix</code>. …","Returns the current transform from local coordinates to …","Throws away the 3rd row and column in the matrix, so be …","Creates <code>Canvas</code> of the specified dimensions without a …","","Creates <code>Surface</code> matching info and props, and associates it …","Returns the complement of this set of flags.","<code>Canvas</code> top layer origin, its top-left corner","Modifies overlay","","Returns <code>true</code> if <code>Canvas</code> has direct access to its pixels.","Address of pixels","Copies <code>SurfaceProps</code>, if <code>Canvas</code> is associated with raster …","Returns <code>true</code> if <code>path</code>, transformed by <code>Matrix</code>, can be …","Returns <code>true</code> if <code>Rect</code> <code>rect</code>, transformed by <code>Matrix</code>, can be …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into <code>dst_pixels</code>. <code>Matrix</code> …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into bitmap. <code>Matrix</code> and …","Copies <code>Rect</code> of pixels from <code>Canvas</code> into pixmap. <code>Matrix</code> and …","array of fill types","Removes the specified flags in-place.","Sets <code>Matrix</code> to the identity matrix. Any prior matrix state …","Removes changes to <code>Matrix</code> and clip since <code>Canvas</code> state was …","Restores <code>Canvas</code> to saved state immediately. Subsequent …","Restores state to <code>Matrix</code> and clip values when <code>Self::save()</code>…","Rotates <code>Matrix</code> by degrees about a point at <code>(p.x, p.y)</code>. …","Writable pixels’ row bytes","Saves <code>Matrix</code> and clip. Calling <code>Self::restore()</code> discards …","Returns the number of saved states, each containing: <code>Matrix</code>…","Saves <code>Matrix</code> and clip, and allocates <code>Surface</code> for …","Saves <code>Matrix</code> and clip, and allocates <code>Surface</code> for …","Scales <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis.","Inserts or removes the specified flags depending on the …","DEPRECATED – use <code>M44</code> version","DEPRECATED – use <code>M44</code> version","Replaces <code>Matrix</code> with <code>matrix</code>. Unlike <code>Self::concat()</code>, any …","Skews <code>Matrix</code> by <code>sx</code> on the x-axis and <code>sy</code> on the y-axis. A …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Sometimes a canvas is owned by a surface. If it is, …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Returns the <code>SurfaceProps</code> associated with the canvas that …","DEPRECATED Legacy version of <code>Self::local_to_device()</code>, …","Translates <code>Matrix</code> by <code>d</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","Copies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …","Copies <code>Rect</code> from pixels to <code>Canvas</code>. <code>Matrix</code> and clip are …","x-axis values dividing bitmap","y-axis values dividing bitmap","","","","","<code>Lattice</code> divides <code>crate::Bitmap</code> or <code>crate::Image</code> into a …","Optional setting per rectangular grid entry to make it …","","","","","","source bounds to draw from","","","array of colors","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","array of fill types","","","","","","","","x-axis values dividing bitmap","y-axis values dividing bitmap","Reflected across x-axis","Rotated 180","","","","","These values match the orientation …","","","","","","","","","Rotated 90 CCW","Reflected across x-axis, Rotated 90 CCW","","","","","","Reflected across x-axis, Rotated 90 CW","Rotated 90 CW","","","","","Default","Reflected across y-axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Return <code>true</code> if the encoded origin includes a 90 degree …","Given an width and height of the source data, returns a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blends between the constant color (src) and input color …","","See <code>hsla_matrix_of_color_matrix()</code>","","","Create a color filter that multiplies the RGB channels by …","","","","","Create a table color filter, copying the table into the …","Create a table color filter, with a different table for …","","Blends between the constant color (src) and input color …","","See <code>hsla_matrix_of_color_matrix()</code>","","","Create a color filter that multiplies the RGB channels by …","","","","","Create a table color filter, copying the table into the …","Create a table color filter, with a different table for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","Borrows the canvas for the current page on the document.","Close the document and return the encoded representation. …","Ends the page. This function consumes the document and …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The current page we are currently drawing on.","The number of pages in this document.","","","","","Document is currently on a page and can be drawn onto.","Document is currently open. May contain several pages.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper type of a font weight.","Wrapper type for the width of a font.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type that represents either a slice of <code>Color</code>, or a slice …","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","CachingHint selects whether Skia may internally cache …","Experimental: Skia                | GL_COMPRESSED_*     | …","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","<code>Image</code> describes a two dimensional array of pixels to draw. …","","","","Returns <code>AlphaType</code>.","","","","","","","","","","Returns <code>IRect</code> <code>{ 0, 0, width(), height() }</code>.","","","","","","","","","","","Returns a smart pointer to <code>ColorSpace</code>, the range of …","Returns <code>ColorType</code> if known; otherwise, returns …","","Returns <code>ISize</code> <code>{ width(), height() }</code>.","See <code>Self::encode_to_data_with_quality</code>","Encodes <code>Image</code> pixels, returning result as <code>Data</code>.","Returns encoded <code>Image</code> pixels as <code>Data</code>, if <code>Image</code> was created …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates <code>Image</code> from bitmap, sharing or copying bitmap …","See <code>Self::from_encoded_with_alpha_type()</code>","Return an image backed by the encoded data, but attempt to …","Creates <code>Image</code> from data returned by <code>image_generator</code>. …","See <code>Self::from_picture_with_props()</code>","Creates <code>Image</code> from picture. Returned <code>Image</code> width and …","Creates <code>Image</code> from <code>ImageInfo</code>, sharing pixels.","Returns <code>true</code> if the image has mipmap levels.","","","","Returns pixel row count.","Returns a <code>ImageInfo</code> describing the width, height, color …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>Image</code> pixels represent transparency only. …","Returns <code>true</code> if <code>Image</code> is backed by an image-generator or …","Returns <code>true</code> if pixels ignore their alpha value and are …","Returns <code>true</code> if the contents of <code>Image</code> was created on or …","","See [<code>Self::new_color_space_with_context</code>]","","Creates a CPU-backed <code>Image</code> from compressed data.","","","See [<code>Self::new_subset_with_context</code>]","","Copies <code>Image</code> pixel address, row bytes, and <code>ImageInfo</code> to …","See [<code>Self::read_pixels_with_context()</code>]","Creates a new <code>Image</code> identical to this one, but with a …","Copies <code>Image</code> to dst, scaling pixels to fit <code>dst.width()</code> and …","Returns raster image or lazy image. Copies <code>Image</code> backed by …","","","","","Returns raster image. Copies <code>Image</code> backed by GPU texture …","<code>to_raw_shader</code> functions like <code>to_shader</code>, but for images …","Make a shader with the specified tiling and mipmap …","","","","","","","","","","","","","Returns value unique to image. <code>Image</code> contents cannot …","","Returns pixel count in each row.","Returns an image with the same “base” pixels as the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","","","","","","","","","","","","","","","Removes the specified flags in-place.","","","","","","","","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AddPathMode chooses how <code>add_path()</code> appends. Adding one <code>Path</code>…","","Four oval parts with radii (rx, ry) start at last <code>Path</code> …","","","","","","","","","","","","","","","Iterates through verb array, and associated <code>Point</code> array …","","","","The maximum number of points an iterator will return for …","","","","","","","","Verb instructs <code>Path</code> how to interpret one or more <code>Point</code> and …","","Appends arc to <code>Path</code>, as the start of new contour. Arc …","Adds circle centered at (x, y) of size radius to <code>Path</code>, …","Adds oval to <code>Path</code>, appending <code>Verb::Move</code>, four <code>Verb::Conic</code>, …","Appends src to <code>Path</code>, offset by <code>(d.x, d.y)</code>.","Appends src to <code>Path</code>, transformed by matrix. Transformed …","Adds contour created from line array, adding <code>pts.len() - 1</code> …","Adds a new contour to the path, defined by the rect, and …","Appends <code>RRect</code> to <code>Path</code>, creating a new closed contour. <code>RRect</code>…","Adds rrect to <code>Path</code>, creating a new closed contour. If dir …","Returns the set containing all flags.","Returns the approximate byte size of the <code>Path</code> in memory.","Appends arc to <code>Path</code>. Arc added is part of ellipse bounded …","Appends arc to <code>Path</code>. Arc is implemented by one or more …","Appends arc to <code>Path</code>, after appending line if needed. Arc …","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns minimum and maximum axes values of <code>Point</code> array. …","","","","","","","","","","Appends <code>Verb::Close</code> to <code>Path</code>. A closed contour connects the …","","Returns the complement of this set of flags.","Returns minimum and maximum axes values of the lines and …","Adds conic from last point towards (x1, y1), to (x2, y2), …","Returns conic weight if <code>next()</code> returned <code>Verb::Conic</code>.","","Returns <code>true</code> if rect is contained by <code>Path</code>. May return <code>false</code>…","Returns <code>true</code> if the point <code>(p.x, p.y)</code> is contained by <code>Path</code>, …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Approximates conic with quad array. Conic is constructed …","","","Returns the number of points in <code>Path</code>. <code>Point</code> count is …","Returns the number of verbs: <code>Verb::Move</code>, <code>Verb::Line</code>, …","Adds cubic from last point towards (x1, y1), then towards …","Initializes <code>Iter</code> with an empty <code>Path</code>. <code>next()</code> on <code>Iter</code> returns","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","See <code>Path::dump_as_data()</code>","","","Writes text representation of <code>Path</code> to <code>Data</code>. Set <code>dump_as_hex</code>…","See <code>Path::dump_as_data()</code>","Returns an empty set of flags.","","","","","","Returns <code>PathFillType</code>, the rule used to fill <code>Path</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","(See Skia bug 1762.) Returns a non-zero, globally unique …","Returns <code>Point</code> at index in <code>Point</code> array. Valid range for …","Returns number of points in <code>Path</code>. Up to max points are …","Returns the number of verbs in the path. Up to max verbs …","","","","","Grows <code>Path</code> verb array and <code>Point</code> array to contain …","Inserts the specified flags in-place.","Interpolates between <code>Path</code> with <code>Point</code> array of equal size. …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if last <code>Verb::Line</code> returned by <code>next()</code> was …","Returns <code>true</code> if subsequent calls to <code>next()</code> return …","Returns <code>true</code> if the path is convex. If necessary, it will …","Tests if cubic is degenerate. Cubic with no length or that …","Returns if <code>Path</code> is empty. Empty <code>Path</code> may have FillType but …","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> for finite <code>Point</code> array values between …","Returns <code>true</code> if <code>Path</code> contain equal verbs and equal weights.","Returns if FillType describes area outside <code>Path</code> geometry. …","Returns if contour is closed. Contour is closed if <code>Path</code> …","Returns <code>true</code> if <code>Path</code> contains only one line; <code>Verb</code> array …","Tests if line between <code>Point</code> pair is degenerate. Line with …","Returns <code>true</code> if this path is recognized as an oval or …","Tests if quad is degenerate. Quad with no length or that …","Returns <code>Some(Rect, bool, PathDirection)</code> if <code>Path</code> is …","Returns <code>true</code> if path is representable as <code>RRect</code>. Returns …","Returns if <code>Path</code> data is consistent. Corrupt <code>Path</code> data is …","Returns <code>true</code> if the path is volatile; it will not be …","Returns last point on <code>Path</code>. Returns <code>None</code> if <code>Point</code> array is …","","Adds line from last point to (x, y). If <code>Path</code> is empty, or …","","","Adds beginning of contour at <code>Point</code> (x, y).","Sets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …","","Constructs an empty <code>Path</code>. By default, <code>Path</code> has no verbs, …","Create a new path with the specified segments.","Returns next <code>Verb</code> in verb array, and advances <code>Iter</code>. When …","","Returns the complement of this set of flags.","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>. <code>Path</code> is replaced by …","","","","","","The number of points an iterator will return for the verb.","","Adds quad from last point towards (x1, y1), to (x2, y2). …","Appends arc to <code>Path</code>, relative to last <code>Path</code> <code>Point</code>. Arc is …","Adds conic from last point towards vector (dx1, dy1), to …","Adds cubic from last point towards vector (dx1, dy1), then …","Adds line from last point to vector (dx, dy). If <code>Path</code> is …","Adds beginning of contour relative to last point. If <code>Path</code> …","Adds quad from last point towards vector (dx1, dy1), to …","","Removes the specified flags in-place.","Sets <code>Path</code> to its initial state. Removes verb array, <code>Point</code> …","Appends src to <code>Path</code>, from back to front. Reversed src …","Sets <code>Path</code> to its initial state, preserving internal …","","","Returns a mask, where each set bit corresponds to a …","Writes <code>Path</code> to buffer, returning the buffer written to, …","Inserts or removes the specified flags depending on the …","Sets FillType, the rule used to fill <code>Path</code>. While there is …","Specifies whether <code>Path</code> is volatile; whether it will be …","Sets the last point on the path. If <code>Point</code> array is empty, …","Sets <code>Iter</code> to return elements of verb array, <code>Point</code> array, …","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Exchanges the verb array, <code>Point</code> array, weights, and …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","Toggles the specified flags in-place.","Replaces FillType with its inverse. The inverse of …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Updates internal bounds so that subsequent calls to …","Offsets <code>Point</code> array by <code>(d.x, d.y)</code>.","Transforms verb array, <code>Point</code> array, and weight by matrix. …","Transforms verb array, <code>Point</code> array, and weight by matrix. …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","","","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Specify <code>b</code> and <code>c</code> (each between 0…1) to create a shader …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Ends the Canvas drawing and returns the resulting SVG. …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Creates a new SVG canvas.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","","","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","A trait that supports the conversion from a C/C++ value …","This trait supports the conversion of a wrapper into it’…","A trait that supports the conversion from a C/C++ …","A trait that supports the conversion from a C/C++ value …","Access the wrapped pointer.","","","","Access the wrapped pointer.","","","","Unwraps the wrapper type into the native pointer.","","","Wraps a native pointer into a wrapper type. Returns <code>None</code> …","","","","","","","Specifies how YUV (and optionally A) are divided among …","","","","","","","Describes how subsampled chroma values are sited relative …","UV subsampling is also specified in the enum value names …","","","","","","","Specifies the structure of planes for a YUV image with …","","","","","","","","","","","","","","","","","Given a per-plane row bytes, determine size to allocate …","","Dimensions of the full resolution image (after planes have …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Does the PlaneConfig have alpha values?","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>dimensions</code> should specify the size of the full resolution …","Number of Y, U, V, A channels in the ith plane for a given …","","Number of planes for a given PlaneConfig.","","","","","Given image dimensions, a planer configuration, …","Returns the dimensions for each plane. Dimensions are as …","<code>SubsamplingFactors(Subsampling)</code> if <code>plane_index</code> refers to a …","","","","Ratio of Y/A values to U/V values in x and y.","","","","","","","","","","","Returns a YUVAInfo that is identical to this one but with …","Returns a YUVAInfo that is identical to this one but with …","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the default ColorType to use with <code>num_channels</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the ColorType is supported for YUVA pixmaps this will …","","","","","","","","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","YUVAInfo combined with per-plane ColorTypes and row bytes. …","Helper to store Pixmap planes as described by a …","Allocate space for pixmaps’ pixels in the YUVAPixmaps.","Determine size to allocate for all planes. Optionally …","The per-YUV<code>[A]</code> channel data type.","","","","Use storage in Data as backing store for pixmaps’ …","Like above but uses …","Use passed in memory as backing store for pixmaps’ …","Wraps existing <code>Pixmap</code>s. The YUVAPixmaps will have no …","Takes an allocation that is assumed to be at least […","Is this valid and does it use color types allowed by the …","Initializes the YUVAPixmapInfo from a YUVAInfo with …","The number of Pixmap planes.","Number of pixmap planes.","","Get the ith Pixmap plane. <code>Pixmap</code> will be default …","Image info for the ith plane, or <code>None</code> if <code>i</code> &gt;= …","An iterator of all planes’ image infos.","Access the Pixmap planes.","","Row bytes for the ith plane. Returns <code>None</code> if <code>i</code> &gt;= …","Row bytes for all planes.","","","","","Data type for Y, U, V, and possibly A channels independent …","","","","","","","","","UV subsampling is also specified in the enum value names …","","","","","","","","","","","","","","","","","","","All legal combinations of PlaneConfig and DataType are …","Defaults to nothing supported.","Gets the default ColorType to use with <code>num_channels</code> …","Update to add support for pixmaps with <code>num_channels</code> …","","If the ColorType is supported for YUVA pixmaps this will …","Checks whether there is a supported combination of color …"],"i":[127,111,103,103,38,103,109,109,103,0,0,111,0,0,103,103,103,132,132,1,1,38,109,110,110,110,110,110,110,110,119,0,0,0,0,0,0,214,214,0,107,25,103,25,1,0,96,83,0,121,0,0,115,0,83,0,0,83,0,0,83,0,0,0,0,0,0,0,0,121,0,0,0,114,0,121,0,0,115,1,8,115,109,39,83,0,0,0,96,107,119,0,0,83,116,122,6,0,0,83,83,83,83,83,0,0,0,114,120,83,118,0,0,0,0,0,0,0,0,0,0,0,117,111,109,1,38,38,1,38,0,129,103,309,109,0,0,83,0,83,109,115,115,0,0,115,115,0,0,110,0,0,0,0,114,95,114,116,122,6,114,114,114,114,120,120,0,109,110,109,110,109,1,112,113,107,119,122,83,54,110,111,95,83,83,96,214,214,83,121,112,113,83,0,1,49,8,8,8,121,0,0,0,116,0,96,119,83,121,83,103,309,135,0,112,113,135,113,117,117,95,309,115,0,54,95,83,0,109,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,54,121,0,111,103,103,103,103,103,0,1,38,38,0,38,103,103,103,38,103,103,103,103,103,132,132,0,0,110,110,110,110,110,0,0,0,96,122,6,214,214,107,119,0,0,115,115,103,0,0,83,0,0,83,0,0,0,117,83,95,107,83,83,83,83,83,118,118,0,114,0,0,0,0,1,0,0,0,0,0,0,214,214,0,39,129,129,129,0,114,122,6,54,103,132,54,0,0,0,0,0,0,109,109,1,120,6,0,83,122,1,135,0,0,0,0,135,309,115,1,3,82,126,4,8,9,10,11,12,12,14,14,17,18,8,8,9,10,11,12,12,14,14,17,18,8,8,18,8,8,18,8,8,8,8,18,8,18,8,8,8,18,8,8,32,8,32,8,35,8,38,39,40,8,40,8,40,8,40,8,43,8,43,8,43,8,43,8,43,8,43,8,43,8,43,8,8,49,49,49,8,8,49,40,55,42,32,8,8,8,8,49,0,49,8,8,8,49,66,8,8,8,70,8,49,49,73,49,70,49,70,49,49,18,8,8,18,8,8,18,8,8,310,13,78,49,49,49,82,9,10,11,82,8,84,49,83,40,8,70,8,49,9,10,11,8,8,49,82,35,19,19,8,0,8,232,89,49,89,49,89,49,89,49,232,1,3,123,82,126,273,8,1,1,38,39,38,39,1,1,38,39,38,39,38,39,38,39,38,39,8,8,8,0,73,49,49,8,49,8,49,178,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,66,49,154,242,120,25,121,122,96,1,123,124,38,82,125,126,127,103,128,181,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,178,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,66,49,154,242,120,25,121,122,96,1,123,124,38,82,125,126,127,103,128,181,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,35,19,232,35,19,40,42,32,98,8,8,8,8,8,49,49,49,49,49,49,32,8,40,55,42,8,8,8,103,3,126,273,49,241,49,0,104,8,49,8,232,19,19,19,49,49,8,18,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,49,120,25,121,122,96,1,123,124,38,82,125,126,127,103,128,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,49,120,25,121,122,96,1,123,124,38,82,125,126,127,103,128,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,49,133,18,8,8,38,39,0,130,130,8,8,0,8,49,49,0,42,8,0,0,40,55,42,32,8,8,8,8,49,40,55,42,32,8,8,8,8,49,0,8,49,130,73,8,8,8,49,38,39,73,49,49,49,49,18,8,40,42,32,8,8,8,49,128,40,32,8,8,42,8,42,8,8,8,8,8,128,130,18,8,8,8,311,8,38,35,35,35,35,35,19,19,19,39,35,8,8,8,0,199,8,8,8,84,49,49,49,0,89,147,8,49,49,60,49,49,49,8,8,49,8,8,9,10,14,17,14,17,163,18,8,8,70,49,3,126,49,0,8,8,134,134,49,49,40,147,60,55,32,108,110,83,116,107,119,8,8,8,8,8,8,25,96,1,95,129,9,10,11,130,12,14,17,35,19,13,16,132,39,133,3,84,154,3,154,232,312,140,8,49,49,49,104,18,8,8,8,8,8,8,38,39,49,40,42,161,32,8,8,8,8,49,49,49,49,0,49,14,14,49,49,21,9,14,16,9,14,16,0,9,10,14,17,14,17,66,49,49,49,49,49,0,40,8,8,66,49,8,130,19,8,8,8,8,19,126,8,38,35,39,8,0,40,32,8,8,49,49,49,165,66,49,49,84,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,66,49,120,25,121,122,96,1,123,124,38,82,125,126,127,103,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,49,12,14,13,16,40,32,8,8,40,32,8,8,40,8,40,8,40,8,32,8,49,38,39,40,8,40,32,8,8,126,60,49,49,60,49,18,8,8,163,49,49,49,49,49,49,49,49,49,8,8,82,8,133,49,49,40,78,140,84,89,156,104,147,60,165,55,42,73,18,70,161,32,108,98,43,178,54,109,110,111,112,113,114,83,115,116,117,4,118,107,119,8,8,120,25,121,122,96,1,123,124,38,38,38,38,38,82,125,126,127,103,128,181,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,39,39,39,39,133,134,3,135,6,0,0,0,0,0,49,49,78,60,178,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,66,49,49,154,242,120,25,121,122,96,1,1,1,123,123,124,124,38,82,82,82,82,125,126,127,103,128,181,95,129,9,10,11,130,130,130,12,12,14,14,14,14,17,17,35,35,19,19,19,19,131,13,13,16,16,16,16,132,39,133,134,3,3,3,135,6,49,1,49,38,39,38,39,38,39,19,70,8,49,82,3,42,8,70,8,49,49,49,8,165,66,49,165,66,49,8,8,49,19,19,16,38,39,19,35,49,8,49,8,8,165,66,49,49,165,66,49,19,98,49,98,49,35,131,49,8,1,98,49,73,49,35,19,89,49,89,49,98,8,8,49,8,49,98,49,8,8,35,19,35,19,1,123,82,126,40,161,8,8,49,49,49,40,8,40,32,8,8,8,8,130,40,32,8,8,40,32,8,8,8,8,49,49,49,98,8,49,49,49,8,165,66,49,49,49,8,8,8,49,8,130,49,49,40,8,49,49,8,8,8,8,49,178,0,0,199,124,8,49,49,8,49,49,49,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,120,25,121,122,96,38,103,95,129,39,134,6,40,42,161,32,8,8,8,8,49,49,49,35,19,13,16,35,49,0,0,8,134,0,49,0,8,0,49,49,49,49,18,8,8,49,89,8,82,11,49,82,8,49,8,8,8,40,165,32,8,8,66,49,8,8,8,66,49,121,1,82,125,103,128,129,9,10,11,130,12,14,17,35,19,131,13,16,132,133,134,3,135,8,8,66,49,121,1,82,125,103,128,129,9,10,11,130,12,14,17,35,19,131,13,16,132,133,134,3,135,49,49,49,49,38,39,35,19,40,8,8,35,19,19,35,38,39,38,35,19,39,19,8,8,178,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,66,49,154,242,120,25,121,122,96,1,123,124,38,82,125,126,127,103,128,181,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,70,49,8,66,154,181,130,199,49,38,39,49,49,103,8,8,8,132,49,8,49,8,49,8,8,8,8,8,8,40,84,89,42,8,8,8,8,49,49,38,35,19,13,16,39,35,120,8,8,130,14,17,19,49,8,55,42,8,8,132,8,40,161,8,49,8,120,8,49,8,49,8,8,128,8,40,8,40,55,42,32,54,8,8,8,8,49,49,82,8,8,40,8,8,8,132,8,19,8,140,49,8,8,49,133,132,8,8,8,49,12,14,13,16,14,89,49,8,35,19,19,19,19,8,232,35,19,35,19,8,49,9,10,14,17,9,10,14,17,8,49,0,18,8,8,49,49,130,49,0,49,18,43,8,8,49,49,49,49,49,8,49,8,130,8,60,49,60,49,60,49,60,49,147,49,313,1,82,0,8,66,49,49,0,49,163,232,8,8,49,49,0,8,42,8,134,294,163,8,78,49,49,134,18,8,8,21,21,21,21,82,82,82,9,9,10,10,11,11,130,130,130,14,16,9,9,10,10,11,11,14,16,103,83,8,8,0,130,314,314,0,309,21,309,21,8,49,9,10,11,12,14,17,14,40,104,60,55,42,18,32,98,43,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,66,49,49,49,49,154,1,82,128,9,10,11,130,12,14,17,35,19,131,13,16,133,3,42,8,84,49,49,84,49,49,84,49,84,89,147,49,49,49,35,19,13,16,49,8,8,60,49,8,130,49,42,8,42,8,49,49,18,8,70,49,49,49,49,49,49,49,42,8,140,49,140,49,84,49,60,49,60,49,84,49,49,49,49,147,49,84,49,42,8,49,84,49,154,181,8,49,9,10,14,17,130,14,17,38,39,8,161,49,49,49,40,161,8,49,8,8,8,8,18,8,8,8,49,14,35,19,14,35,19,0,8,8,8,8,8,8,49,8,49,35,19,8,8,49,0,0,38,39,0,49,0,49,0,0,8,0,0,0,40,8,49,49,0,130,0,133,40,8,40,8,40,161,32,8,8,49,40,8,8,8,8,8,8,8,8,8,70,49,49,49,121,8,18,8,8,49,8,49,8,130,49,8,130,8,130,130,0,0,130,130,130,0,49,18,8,8,49,8,315,8,8,1,123,82,8,18,8,8,18,8,8,18,8,8,8,18,8,8,49,49,0,130,8,40,32,8,8,49,49,49,32,8,49,8,8,8,131,130,0,49,154,38,39,8,40,42,18,32,8,8,8,8,8,8,8,4,8,66,8,8,8,35,19,35,19,130,66,66,66,19,19,316,19,19,130,40,161,32,8,8,8,49,40,32,8,8,8,130,130,0,8,8,0,124,294,0,66,0,130,14,17,32,8,49,8,14,17,49,131,134,8,49,8,312,140,70,8,49,49,49,49,8,38,12,14,17,131,13,16,39,130,14,8,8,40,8,8,8,8,8,8,19,19,19,19,130,130,8,8,8,32,8,8,130,130,8,8,8,8,8,35,19,13,16,8,18,8,8,8,8,8,8,8,8,130,131,8,40,161,8,49,40,8,19,18,8,8,19,8,14,14,8,35,19,8,8,14,8,8,8,40,8,130,8,8,8,8,130,130,130,130,8,130,8,8,130,8,8,8,35,8,8,8,8,8,8,8,8,8,8,130,8,35,19,35,19,0,8,0,0,40,55,42,32,8,8,8,8,8,0,8,8,84,8,49,35,19,8,8,49,18,8,35,19,35,19,49,8,49,49,131,49,49,8,49,8,49,0,8,8,8,0,0,8,147,8,8,49,38,9,10,11,12,12,14,14,17,39,38,9,10,11,12,12,14,14,17,39,8,49,8,0,8,0,40,8,8,8,0,0,49,49,38,39,0,49,8,49,8,49,8,0,8,49,134,49,49,49,82,16,124,82,16,49,1,123,130,120,49,82,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,49,120,25,121,122,96,1,123,124,38,82,125,126,127,103,128,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,19,131,49,49,1,16,40,70,8,49,49,8,8,8,131,140,49,38,39,18,8,8,35,19,232,35,19,8,8,8,66,130,8,130,49,0,40,8,40,8,40,8,40,8,178,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,66,49,154,242,120,25,121,122,96,1,123,124,38,82,125,126,127,103,128,181,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,178,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,66,49,154,242,120,25,121,122,96,1,123,124,38,82,125,126,127,103,128,181,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,49,49,49,131,8,8,131,178,54,109,110,111,112,113,114,83,115,116,117,118,107,119,8,66,49,154,242,120,25,121,122,96,1,123,124,38,82,125,126,127,103,128,181,95,129,9,10,11,130,12,14,17,35,19,131,13,16,132,39,133,134,3,135,6,312,49,0,178,8,8,8,49,8,49,49,49,38,39,165,70,98,66,49,49,49,49,49,49,0,8,66,49,242,121,1,82,125,103,128,129,9,10,11,130,12,14,17,35,19,131,13,16,132,133,134,3,135,8,163,0,124,42,8,49,103,0,49,49,49,0,11,40,42,161,32,8,8,8,8,8,49,49,49,35,19,13,16,35,1,35,55,42,8,8,49,55,42,108,8,8,8,140,49,55,42,8,8,49,42,8,8,35,19,140,49,49,49,73,49,8,35,19,35,19,35,19,8,140,49,8,8,8,8,66,49,121,1,82,125,103,128,129,9,10,11,130,12,14,17,35,19,131,13,16,132,133,134,3,135,8,8,241,49,0,32,8,32,8,8,49,49,8,35,19,9,10,11,12,12,14,17,232,232,232,35,19,9,10,11,12,12,14,17,134,8,8,8,0,8,8,0,0,10,11,17,0,0,0,0,0,0,0,246,250,0,246,0,249,0,246,0,249,251,249,251,0,0,0,0,250,0,67,246,67,67,67,67,247,248,67,67,246,246,246,246,246,246,246,248,67,247,317,249,250,246,245,251,252,248,67,247,317,249,250,246,245,251,252,248,253,67,67,248,248,67,67,67,67,67,249,250,246,251,249,250,246,251,246,253,246,67,67,246,248,247,247,252,247,252,67,246,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,247,252,246,249,250,246,246,248,67,248,67,247,249,250,246,246,246,246,246,245,251,252,248,67,247,317,249,250,246,245,251,251,251,252,67,246,246,246,246,67,67,317,249,250,246,67,245,248,248,246,246,246,248,67,247,317,249,250,246,245,251,252,246,67,67,246,0,67,67,67,67,67,67,246,245,248,246,67,245,67,67,67,67,67,67,253,246,67,67,252,67,67,245,67,67,67,67,67,246,318,67,67,67,246,246,67,246,249,250,246,251,246,67,67,67,248,67,247,317,249,250,246,245,251,252,248,67,247,317,249,250,246,245,251,252,248,67,247,317,249,250,246,245,251,252,246,248,248,67,67,253,253,319,320,256,256,0,0,256,256,253,256,253,253,256,256,253,256,256,256,253,256,253,256,256,253,253,256,256,253,256,253,256,253,253,253,214,214,228,0,114,214,0,114,114,114,114,114,114,114,214,214,214,258,0,257,257,0,214,214,0,0,114,228,214,214,114,258,0,257,258,228,192,214,257,258,228,192,214,186,257,258,228,192,214,257,258,228,192,214,214,186,186,257,258,228,192,214,186,257,258,228,192,214,192,257,258,228,192,214,186,186,186,186,186,186,186,186,186,186,257,258,228,214,186,186,214,214,257,258,228,192,214,186,186,186,192,186,0,186,186,186,186,192,214,214,257,258,228,192,214,257,258,228,192,214,257,258,228,192,214,257,258,228,192,214,214,186,214,192,0,0,139,139,139,139,139,139,139,139,139,139,139,139,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,195,195,0,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,259,260,195,195,195,195,195,195,195,195,195,195,260,259,195,195,195,195,195,195,259,195,259,260,260,195,195,259,195,260,259,195,195,195,195,195,195,195,195,195,195,0,0,0,0,261,261,261,261,261,261,261,261,261,261,261,261,0,261,261,261,0,0,263,262,263,262,263,262,263,262,263,262,263,262,263,262,263,262,0,174,174,174,174,174,174,174,0,0,164,164,0,0,164,164,164,164,164,44,44,44,44,164,44,164,164,44,44,44,44,44,44,44,44,44,164,44,164,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,164,164,164,164,44,44,44,44,44,0,0,0,136,265,266,136,265,266,265,266,265,266,136,265,136,136,136,265,266,136,265,266,266,136,136,136,265,266,136,266,0,136,136,136,136,265,266,136,265,266,136,265,266,136,265,266,136,136,0,136,0,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,0,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,268,0,0,268,268,268,268,268,232,232,268,268,268,268,268,268,268,268,232,268,232,232,232,268,232,268,232,268,268,268,268,232,232,268,268,268,232,268,268,268,268,268,268,232,268,232,268,268,268,268,232,268,232,232,268,268,268,268,232,268,268,232,232,268,268,268,268,232,232,268,268,268,268,232,268,232,268,232,268,232,268,232,232,232,268,232,232,232,232,232,0,243,243,243,243,0,0,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,270,270,271,271,270,270,271,271,270,0,270,269,270,270,270,271,269,270,271,271,0,270,271,271,269,0,0,182,182,269,270,271,182,269,270,271,182,269,270,271,182,269,270,271,182,270,271,182,270,271,269,270,271,182,269,270,271,182,269,270,270,271,271,182,269,270,271,182,270,271,182,269,270,271,182,182,182,182,270,271,182,269,270,271,182,269,270,271,182,269,270,271,182,269,270,271,182,270,271,182,182,182,270,271,182,202,202,0,0,203,0,203,203,203,203,203,203,203,203,204,203,202,204,203,202,204,203,204,203,203,203,203,203,203,203,204,203,203,204,203,203,203,203,203,202,204,204,203,202,202,202,202,203,203,203,203,204,203,204,204,204,203,0,203,203,204,203,202,203,203,202,202,0,0,203,203,0,0,203,203,203,203,0,0,203,204,203,203,204,203,202,204,203,202,0,0,204,203,202,203,204,204,321,322,322,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,272,272,0,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,0,199,199,199,199,199,199,199,199,199,199,0,199,199,199,199,199,0,199,199,199,199,199,199,199,272,272,0,272,221,220,220,0,220,0,0,0,221,220,220,190,0,220,220,190,86,273,220,190,221,273,220,190,221,273,86,273,273,220,190,221,273,220,190,221,273,86,86,86,86,86,86,86,220,190,221,273,86,220,190,221,273,220,190,221,273,86,86,86,86,86,86,86,86,220,190,221,86,86,273,273,220,190,221,273,86,86,86,86,273,86,86,86,86,86,86,86,86,86,86,86,86,220,190,221,273,86,86,86,220,190,221,273,220,190,221,273,220,190,221,273,86,273,86,86,273,170,0,0,170,87,87,87,170,170,87,170,170,87,87,87,87,87,87,87,87,87,170,87,87,87,170,170,87,87,87,170,87,87,170,87,87,87,87,87,87,87,87,87,87,170,170,170,170,87,0,0,0,274,275,275,0,0,0,0,275,274,79,275,274,79,275,274,79,275,274,79,0,0,274,0,0,0,0,0,0,79,275,274,79,0,275,274,79,275,274,274,274,274,274,274,274,79,79,275,0,274,274,275,274,79,79,0,0,0,0,79,0,0,0,0,0,274,0,0,0,0,0,275,274,79,275,274,79,275,274,79,275,274,79,274,274,0,0,276,0,0,277,277,277,0,276,0,0,207,276,278,278,278,276,0,278,279,278,279,278,279,278,279,277,276,278,279,278,279,0,207,276,276,276,276,276,276,276,276,207,277,276,29,278,279,207,277,276,29,278,279,29,207,277,276,29,278,279,207,277,276,29,278,279,276,276,29,276,29,29,276,29,29,276,207,277,276,29,278,279,276,29,207,277,276,276,276,276,276,29,278,279,207,277,276,29,278,279,29,276,276,276,276,29,29,29,29,29,207,277,276,29,29,29,29,29,29,29,29,29,276,276,276,207,277,276,29,278,279,29,29,276,276,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,276,276,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,276,29,29,29,29,29,29,29,276,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,276,276,276,29,207,277,276,29,278,279,276,29,29,29,207,277,276,29,278,279,207,277,276,29,278,279,207,277,276,29,278,279,276,29,29,0,0,0,0,0,0,0,0,0,0,0,119,107,0,118,0,119,0,107,119,107,118,118,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,28,0,25,229,229,25,280,280,280,0,280,120,28,0,120,120,0,229,76,280,280,280,0,229,280,0,0,76,0,120,5,5,5,5,5,5,5,5,5,229,5,5,5,5,5,229,229,229,229,229,229,229,281,282,76,28,280,229,281,282,76,28,280,229,5,5,76,28,280,229,76,28,280,229,5,229,229,5,5,281,282,5,5,229,5,5,5,5,5,5,281,282,5,229,281,282,5,5,5,5,5,229,76,28,280,229,229,5,281,5,76,28,280,229,229,229,229,229,281,282,76,28,280,280,229,229,229,229,229,5,5,5,5,5,5,76,28,280,229,5,229,5,229,229,281,282,76,28,280,229,281,282,229,281,281,5,5,5,229,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,281,282,5,5,281,282,229,5,5,5,5,229,282,280,5,5,5,5,5,5,5,5,5,229,5,5,5,5,5,5,5,229,5,5,5,281,282,5,5,229,229,5,229,5,76,28,280,229,5,5,229,5,5,5,281,282,76,28,280,229,281,282,76,28,280,229,281,282,76,28,280,229,229,5,5,5,5,223,223,223,0,223,223,223,223,223,223,223,223,223,223,0,223,223,223,223,0,0,0,142,81,81,81,81,142,142,142,142,81,142,142,142,142,81,81,81,81,142,142,142,142,142,142,142,81,142,142,81,142,81,81,81,209,209,209,0,0,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,283,209,209,209,209,209,283,209,209,209,209,209,209,209,209,209,209,283,209,209,209,209,209,209,283,209,283,283,283,283,209,209,283,209,283,209,283,209,209,209,209,209,209,209,209,209,25,25,121,121,121,120,120,120,121,121,0,0,0,0,121,120,0,0,0,284,284,285,285,285,284,284,286,284,286,284,286,284,286,286,285,284,286,284,286,285,284,286,284,286,284,286,286,284,286,284,0,284,286,286,286,284,284,284,284,284,286,286,284,286,284,286,284,286,284,0,0,0,287,287,287,287,287,287,0,0,141,141,0,0,141,0,0,141,141,0,141,141,141,288,289,290,141,288,289,290,53,141,288,289,290,141,288,289,290,323,53,53,53,53,53,53,53,323,323,289,290,141,53,141,288,289,290,141,288,289,290,53,53,141,288,289,290,288,289,290,323,323,324,53,53,53,53,141,288,289,290,288,289,290,53,288,289,53,53,53,288,289,290,288,288,288,289,289,290,53,53,53,53,53,53,53,53,53,53,288,289,323,323,288,323,323,288,288,53,53,53,53,53,53,53,141,288,289,290,53,53,141,288,289,290,141,288,289,290,141,288,289,290,323,323,288,289,290,288,289,290,53,323,323,291,0,291,291,292,292,291,291,0,291,31,291,0,292,292,31,291,292,31,291,292,31,31,291,292,31,291,292,31,31,31,31,31,31,291,292,31,291,292,31,291,292,31,31,291,292,31,31,31,31,291,292,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,291,292,31,31,291,292,31,291,292,31,291,292,31,31,31,31,31,31,31,31,237,293,0,0,0,237,293,0,0,237,293,0,0,0,206,206,206,237,205,293,237,205,293,206,237,205,293,237,205,293,173,205,237,205,206,206,206,173,173,172,206,237,205,293,205,237,205,293,293,293,293,237,172,205,205,206,206,237,205,293,173,173,206,206,206,206,206,206,173,172,173,173,206,237,205,293,237,205,293,237,205,293,173,172,293,237,205,293,0,206,206,205,205,325,326,327,175,175,175,0,238,238,238,238,238,238,238,175,238,238,238,238,0,175,175,175,175,175,175,175,175,175,238,175,238,175,238,175,238,175,175,175,175,175,175,238,175,175,238,175,175,175,175,175,238,175,175,175,175,175,238,175,175,175,175,238,175,175,175,175,175,175,175,175,175,175,238,175,175,238,175,238,175,238,175,175,0,0,0,112,113,0,112,113,113,0,0,273,294,163,294,163,273,294,163,294,163,163,163,294,163,163,294,163,294,163,163,163,163,163,294,163,163,294,163,163,163,294,163,163,294,294,163,294,163,294,163,294,163,163,163,163,295,296,295,296,0,0,0,295,296,295,295,296,0,295,296,295,296,297,295,296,297,295,296,297,295,296,297,297,297,297,191,295,296,297,191,295,296,297,191,295,296,297,297,295,191,295,296,297,191,191,191,191,191,191,0,191,191,297,295,296,297,295,296,297,295,296,297,191,191,191,295,296,297,191,191,328,329,330,331,328,329,0,0,0,0,0,0,0,0,0,0,0,217,233,217,233,0,233,233,0,0,171,171,171,217,233,217,233,171,217,233,217,233,217,233,171,217,233,217,233,171,171,217,233,171,171,171,217,233,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,217,233,217,233,217,233,217,233,171,0,0,222,298,298,222,0,222,298,222,298,219,219,222,298,222,298,219,219,219,222,298,219,219,219,222,298,222,298,219,222,298,219,219,219,219,222,298,219,219,219,219,219,219,219,219,219,219,219,219,219,222,298,222,298,222,298,222,298,219,219,219,0,0,299,0,0,299,299,299,299,299,299,299,299,299,299,300,299,300,299,299,299,299,299,299,299,300,300,299,300,299,300,299,299,300,299,299,299,299,299,300,299,299,299,299,299,299,299,299,299,300,299,299,299,300,299,299,299,299,299,299,299,299,299,300,299,300,299,300,299,299,0,0,236,0,236,236,236,236,236,236,236,236,236,236,0,236,236,236,236,230,230,0,0,230,0,0,0,0,0,230,301,230,301,137,230,301,230,301,137,137,137,137,137,137,230,301,137,137,137,302,230,301,137,230,301,137,137,137,137,137,230,230,301,137,137,137,301,137,137,302,137,137,137,301,137,137,137,230,301,230,301,230,301,230,301,137,137,137,137,137,137,0,0,231,0,0,231,0,0,184,304,303,304,231,303,304,231,303,304,303,304,305,184,303,304,184,184,306,303,303,304,305,306,184,303,304,231,303,304,231,231,231,303,304,303,304,303,304,231,304,306,184,0,304,303,0,304,303,304,306,306,306,0,0,303,304,303,303,304,231,303,304,231,303,304,231,303,303,304,304,303,303,304,304,332,333,333,235,0,235,235,235,235,235,235,235,235,235,0,235,235,235,0,0,235,235,235,254,254,0,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,0,254,254,0,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,0,254,254,254,254,254,254,254,254,254,254,254,254,254,0,255,255,255,255,255,255,255,0,255,255,255,0,255,255,255,255,255,255,0,0,0,0,0,215,215,210,158,210,210,210,0,0,215,158,158,215,215,215,215,215,215,215,158,216,158,216,210,307,215,210,307,215,158,210,307,215,210,307,215,215,158,216,215,215,158,216,215,215,158,210,307,215,215,158,216,210,307,215,215,215,215,215,210,307,215,215,215,215,215,158,158,158,158,210,215,158,158,216,215,215,215,210,307,215,215,215,158,216,158,216,158,215,215,158,216,215,215,215,215,215,158,216,210,307,215,215,210,307,215,210,307,215,210,307,215,215,158,158,0,0,0,0,334,335,336,337,334,335,336,337,334,335,336,334,335,336,337,337,308,187,0,213,213,213,213,213,213,0,0,212,212,212,213,212,212,0,212,212,212,212,212,212,212,212,308,213,308,213,308,213,308,213,187,187,187,308,213,187,308,213,308,213,0,187,308,213,187,213,213,308,213,187,0,187,0,187,187,187,187,0,187,0,187,187,187,0,308,213,308,213,308,213,308,213,213,187,187,187,213,187,0,152,212,152,0,213,213,213,213,213,213,0,0,212,212,212,213,152,152,152,212,212,212,212,212,212,212,212,212,212,212,152,212,152,212,152,212,152,0,212,152,212,152,212,152,212,152,212,152,0,212,152,212,152,212,152,212,152,46,0,152,46,198,152,152,152,0,0,198,46,46,198,46,198,198,46,198,198,46,46,46,46,198,198,198,46,46,198,198,46,46,46,46,198,0,0,152,0,213,213,213,213,213,213,0,0,212,212,212,213,152,152,152,212,212,212,212,212,212,212,212,212,212,201,201,0,201,201,0,201],"fp":[[3,"Color"],[15,"u8"],[3,"FourByteTag"],[6,"OpBuilder"],[6,"Path"],[4,"PathOp"],[3,"SkOpBuilder"],[3,"Handle"],[3,"V2"],[3,"V3"],[3,"V4"],[3,"IVector"],[3,"ISize"],[3,"Point"],[6,"Vector"],[3,"Size"],[3,"Point3"],[6,"PathBuilder"],[3,"Rect"],[8,"AsRef"],[6,"scalar"],[3,"SkPathBuilder"],[3,"SkPath"],[8,"Into"],[4,"PathDirection"],[4,"Option"],[15,"usize"],[4,"AddPathMode"],[3,"Matrix"],[15,"bool"],[3,"RRect"],[6,"Pixmap"],[4,"c_void"],[3,"SkPixmap"],[3,"IRect"],[15,"i32"],[3,"SkYUVAPixmapInfo_SupportedDataTypes"],[3,"ColorChannelFlag"],[3,"SurfacePropsFlags"],[6,"Bitmap"],[3,"SkBitmap"],[6,"ImageInfo"],[6,"TextBlobBuilder"],[6,"Font"],[3,"SkTextBlobBuilder"],[6,"YUVAPixmapInfo"],[3,"SkYUVAPixmaps"],[3,"SkRuntimeEffect"],[3,"RCHandle"],[3,"SkPaint"],[15,"f32"],[3,"SkImageFilter"],[6,"Region"],[4,"AlphaType"],[6,"ColorInfo"],[3,"SkImageInfo"],[3,"SkColorInfo"],[3,"SkImage"],[3,"SkOrderedFontMgr"],[6,"FontMgr"],[3,"SkPDF_AttributeList"],[15,"str"],[3,"SkVertices"],[15,"never"],[3,"Sk3DView"],[3,"RefHandle"],[3,"Canvas"],[3,"SkStrokeRec"],[6,"Paint"],[6,"Picture"],[3,"SkPicture"],[3,"SkDrawable"],[6,"MaskFilter"],[3,"SkMaskFilter"],[4,"SkPathBuilder_ArcSize"],[4,"ArcSize"],[15,"i64"],[6,"Blender"],[3,"ArithmeticFPInputs"],[3,"SkPathEffect"],[3,"DashInfo"],[3,"Color4f"],[4,"BlendMode"],[6,"Data"],[3,"SkData"],[6,"Image"],[6,"ImageFilter"],[3,"SkString"],[6,"DataTable"],[3,"SkDataTable"],[3,"CStr"],[3,"SkPictureRecorder"],[6,"BBHFactory"],[15,"u32"],[4,"BlurStyle"],[4,"TileMode"],[3,"SkVertices_Builder"],[6,"TextBlob"],[3,"SkRegion"],[3,"SkTextBlob"],[3,"SkCodec"],[3,"SkTypeface"],[4,"ColorType"],[6,"DeferredDisplayListRecorder"],[3,"SkDeferredDisplayListRecorder"],[3,"SkSurface"],[4,"PaintCap"],[6,"SurfaceCharacterization"],[4,"EncodedImageFormat"],[4,"YUVColorSpace"],[4,"ColorChannel"],[4,"FilterMode"],[4,"MipmapMode"],[4,"CodecResult"],[4,"BlendModeCoeff"],[4,"ClipOp"],[4,"FontHinting"],[4,"PaintStyle"],[4,"PaintJoin"],[4,"PathFillType"],[4,"PathVerb"],[4,"CoverageMode"],[3,"RGB"],[3,"HSV"],[3,"ColorSpacePrimaries"],[3,"ColorSpaceTransferFn"],[3,"XYZD50Hash"],[3,"CubicMap"],[4,"TextEncoding"],[3,"M44"],[3,"RSXform"],[4,"PixelGeometry"],[3,"SurfaceProps"],[3,"DateTime"],[3,"Budgeted"],[3,"FontArguments"],[6,"Typeface"],[4,"Ordering"],[6,"ColorFilter"],[6,"ColorSpace"],[4,"RegionOp"],[6,"PathEffect"],[3,"SkColorFilter"],[3,"SkYUVAPixmapInfo"],[3,"SkYUVAInfo"],[6,"FontTableTag"],[6,"FontStyleSet"],[3,"SkRuntimeEffect_Uniform"],[3,"SkFontStyleSet"],[3,"SkFontMgr"],[3,"SkFont"],[4,"DataType"],[3,"SkPDF_Metadata"],[3,"Borrows"],[3,"SkColorSpace"],[6,"DeferredDisplayList"],[3,"SkCustomTypefaceBuilder"],[6,"Vertices"],[3,"SkDynamicMemoryWStream"],[3,"SkStreamAsset"],[6,"PixelRef"],[3,"SkPixelRef"],[3,"SamplingOptions"],[4,"Edging"],[6,"ImageGenerator"],[3,"SkImageGenerator"],[8,"IntoIterator"],[3,"String"],[8,"Iterator"],[4,"MapDirection"],[6,"StrokeRec"],[6,"Child"],[6,"Uniform"],[6,"Drawable"],[3,"Flags"],[3,"Formatter"],[6,"Result"],[3,"TextBlobRun"],[3,"Error"],[4,"Result"],[3,"Iter"],[3,"FontStyle"],[3,"SkShader"],[6,"OrderedFontMgr"],[15,"char"],[6,"Codec"],[6,"YUVAInfo"],[3,"SkPathMeasure"],[3,"SkContourMeasureIter"],[4,"BitDepth"],[6,"Shader"],[3,"Options"],[3,"Vec"],[3,"SkContourMeasure"],[3,"MatrixFlags"],[6,"GlyphId"],[3,"SkColorMatrix"],[6,"YUVAPixmaps"],[3,"HighContrastConfig"],[3,"SkRuntimeEffect_Child"],[6,"SupportedDataTypes"],[4,"GradientShaderColors"],[3,"Flags"],[3,"Interpolation"],[3,"Options"],[6,"RuntimeEffect"],[4,"ApplyPerspectiveClip"],[6,"Unichar"],[3,"MatrixFlags"],[4,"VertexMode"],[3,"SkFlattenable"],[4,"PlaneConfig"],[4,"Subsampling"],[4,"EncodedOrigin"],[3,"BuilderFlags"],[6,"Builder"],[4,"InitStyle"],[3,"SkTextBlob_Iter"],[6,"Surface"],[4,"CompressionType"],[4,"CachingHint"],[4,"ContentChangeMode"],[4,"Style"],[6,"c_void"],[6,"ColorMatrix"],[6,"U8CPU"],[6,"PMColor"],[4,"ScanlineOrder"],[3,"SegmentMask"],[4,"SerializeBehavior"],[4,"TypefaceGlyph"],[3,"FontMetrics"],[4,"Style"],[3,"SkSurfaceCharacterization"],[4,"PathEncoding"],[4,"Mode"],[4,"ChildType"],[4,"Type"],[3,"TypeId"],[6,"TypefaceId"],[8,"ConditionallySend"],[3,"Sendable"],[3,"Axis"],[3,"Coordinate"],[3,"TopLayerPixels"],[3,"SaveLayerFlags"],[3,"OwnedCanvas"],[3,"SaveLayerRec"],[4,"PointMode"],[4,"SrcRectConstraint"],[4,"GlyphPositions"],[3,"AutoRestoredCanvas"],[3,"Lattice"],[3,"ShadowFlags"],[4,"Align"],[4,"RectType"],[4,"SelectionPolicy"],[4,"ZeroInitialized"],[6,"ContourMeasure"],[6,"ContourMeasureIter"],[3,"Document"],[3,"Open"],[3,"OnPage"],[8,"Debug"],[3,"VariationPosition"],[3,"Palette"],[3,"Override"],[3,"Flags"],[4,"Slant"],[3,"Weight"],[3,"Width"],[4,"InvertStyle"],[3,"CubicResampler"],[3,"CropRect"],[4,"Dither"],[3,"TypeMask"],[4,"ScaleToFit"],[4,"Member"],[4,"AffineMember"],[4,"Verb"],[3,"Iter"],[3,"RawIter"],[6,"PathMeasure"],[3,"StructureElementNode"],[6,"AttributeList"],[3,"Metadata"],[6,"PictureRecorder"],[3,"Iterator"],[3,"Cliperator"],[3,"Spanerator"],[4,"Type"],[4,"Corner"],[4,"ChildPtr"],[3,"FilterOptions"],[4,"GradientTypeInternal"],[4,"GradientType"],[3,"GradientInfo"],[4,"BackendSurfaceAccess"],[3,"Flags"],[3,"Canvas"],[3,"LocalizedString"],[6,"LocalizedStringsIter"],[3,"Patch3D"],[3,"Camera3D"],[6,"View3D"],[6,"CustomTypefaceBuilder"],[3,"Bone"],[4,"Siting"],[8,"Scalar"],[8,"Scalars"],[8,"Contains"],[8,"Flattenable"],[8,"Pixel"],[8,"NativeFlattenable"],[8,"QuickReject"],[8,"RoundOut"],[4,"AutoCanvasRestore"],[8,"SetMatrix"],[13,"Points"],[13,"RSXforms"],[13,"Colors"],[13,"ColorsInSpace"],[8,"Combine"],[8,"Intersects"],[13,"Shader"],[13,"ColorFilter"],[13,"Blender"],[13,"Linear"],[13,"Radial"],[13,"Conical"],[13,"Sweep"],[13,"Path"],[13,"DrawableAndBounds"],[8,"PointerWrapper"],[8,"ValueWrapper"],[8,"NativeTransmutableWrapper"],[8,"RefWrapper"]]},\
"smallvec":{"doc":"Small vectors in various sizes. These store a certain …","t":[13,8,13,4,3,3,16,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["AllocErr","Array","CapacityOverflow","CollectionAllocErr","Drain","IntoIter","Item","SmallVec","ToSmallVec","append","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drop","drop","drop","eq","extend","extend_from_slice","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_buf","from_buf_and_len","from_buf_and_len_unchecked","from_elem","from_iter","from_raw_parts","from_slice","from_vec","grow","hash","index","index_mut","inline_size","insert","insert_from_slice","insert_many","into","into","into","into","into_boxed_slice","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","is_empty","len","len","new","next","next","next_back","next_back","partial_cmp","pop","push","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","set_len","shrink_to_fit","size","size_hint","size_hint","smallvec","spilled","swap_remove","to_owned","to_owned","to_smallvec","to_string","truncate","try_from","try_from","try_from","try_from","try_grow","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","with_capacity","layout"],"q":["smallvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","smallvec::CollectionAllocErr"],"d":["The allocator return an error","Types that can be used as the backing store for a SmallVec","Overflow <code>usize::MAX</code> or other error during size computation","Error type for APIs with fallible heap allocation","An iterator that removes the items from a <code>SmallVec</code> and …","An iterator that consumes a <code>SmallVec</code> and yields its items …","The type of the array’s elements.","A <code>Vec</code>-like container that can store a small number of …","Convenience trait for constructing a <code>SmallVec</code>","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","Returns a raw mutable pointer to the vector’s buffer.","Extracts a mutable slice of the entire vector.","Returns the remaining items of this iterator as a mutable …","Returns a raw pointer to the vector’s buffer.","","Extracts a slice containing the entire vector.","Returns the remaining items of this iterator as a slice.","","","","","","","","","","","The number of items the vector can hold without …","Remove all elements from the vector.","","","","","","","Removes consecutive duplicate elements.","Removes consecutive duplicate elements using the given …","Removes consecutive elements that map to the same key.","","","","Creates a draining iterator that removes the specified …","","","","","","Copy elements from a slice and append them to the vector.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.","","Creates a <code>SmallVec</code> directly from the raw components of …","Copy the elements from a slice into a new <code>SmallVec</code>.","Construct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.","Re-allocate to set the capacity to …","","","","The maximum number of elements this vector can hold inline","Insert an element at position <code>index</code>, shifting all elements …","Copy elements from a slice into the vector at position …","Insert multiple elements at position <code>index</code>, shifting all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>SmallVec</code> into a <code>Box&lt;[T]&gt;</code> without reallocating …","Convert the SmallVec into an <code>A</code> if possible. Otherwise …","","","","","","Convert a SmallVec to a Vec, without reallocating if the …","Returns <code>true</code> if the vector is empty","","The number of elements stored in the vector","Construct an empty vector","","","","","","Remove an item from the end of the vector and return it, …","Append an item to the vector.","Remove and return the element at position <code>index</code>, shifting …","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","Resizes the vector so that its length is equal to <code>len</code>.","Resizes the <code>SmallVec</code> in-place so that <code>len</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Sets the length of a vector.","Shrink the capacity of the vector as much as possible.","Returns the number of items the array can hold.","","","Creates a <code>SmallVec</code> containing the arguments.","Returns <code>true</code> if the data has spilled into a separate …","Remove the element at position <code>index</code>, replacing it with …","","","Construct a new <code>SmallVec</code> from a slice.","","Shorten the vector, keeping the first <code>len</code> elements and …","","","","","Re-allocate to set the capacity to …","","","","","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","","","","","Construct an empty vector with enough capacity …","The layout that was passed to the allocator"],"i":[12,0,12,0,0,0,1,0,0,2,2,2,2,3,2,2,2,3,7,2,2,3,12,7,2,2,3,12,2,2,2,3,2,2,3,2,2,2,2,2,2,2,2,7,2,3,2,2,2,7,2,3,12,12,7,2,2,2,2,2,3,12,12,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,2,3,12,2,2,7,2,2,2,3,2,2,7,2,2,7,3,7,3,2,2,2,2,2,2,2,2,2,2,2,2,1,7,3,0,2,2,2,3,24,12,2,7,2,3,12,2,7,2,3,12,2,2,7,2,3,12,2,25],"f":[0,0,0,0,0,0,0,0,0,[[[2,[1]],2]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[[3,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[[3,[1]]]],[[]],[[[2,[1]]]],[[]],[[]],[[]],[[]],[[[2,[1]]]],[[]],[[]],[[]],[[[2,[1]]],4],[[[2,[1]]]],[[[2,[1]]],[[2,[1]]]],[[[3,[[0,[1,5]]]]],[[3,[[0,[1,5]]]]]],[[[2,[1]],[2,[1]]]],[[]],[[]],[[[2,[1]],2],6],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]],[[7,[1]]]],[[[7,[1]]]],[[[2,[1]]]],[[[3,[1]]]],[[[2,[1]],2],8],[[[2,[1]],9]],[[[2,[1]]]],[[[7,[1]],10],11],[[[2,[1]],10],11],[[[3,[1]],10],11],[[12,10],11],[[12,10],11],[[]],[1,[[2,[1]]]],[[],[[2,[1]]]],[13,[[2,[1]]]],[[]],[14],[[]],[15,12],[[]],[1,[[2,[1]]]],[[1,4],[[2,[1]]]],[[[16,[1]],4],[[2,[1]]]],[4,[[2,[1]]]],[9,[[2,[1]]]],[[4,4],[[2,[1]]]],[[],[[2,[1]]]],[13,[[2,[1]]]],[[[2,[1]],4]],[[[2,[1]]]],[[[2,[1]],17]],[[[2,[1]],17]],[[[2,[1]]],4],[[[2,[1]],4]],[[[2,[1]],4]],[[[2,[1]],4,9]],[[]],[[]],[[]],[[]],[[[2,[1]]],18],[[[2,[1]]],[[19,[1,[2,[1]]]]]],[[]],[[[2,[1]]]],[2],[2],[[]],[[[2,[1]]],13],[[[2,[1]]],8],[[[7,[1]]],4],[[[2,[1]]],4],[[],[[2,[1]]]],[[[7,[1]]],20],[[[3,[1]]],20],[[[7,[1]]],20],[[[3,[1]]],20],[[[2,[1]],2],[[20,[6]]]],[[[2,[1]]],20],[[[2,[1]]]],[[[2,[1]],4]],[[[2,[1]],4]],[[[2,[1]],4]],[[[2,[1]],4]],[[[2,[1]],4]],[[[2,[1]],21]],[[[2,[1]],21]],[[[2,[1]],4]],[[[2,[1]]]],[[],4],[[[7,[1]]]],[[[3,[1]]]],0,[[[2,[1]]],8],[[[2,[1]],4]],[[]],[[]],[[],2],[[],22],[[[2,[1]],4]],[[],19],[[],19],[[],19],[[],19],[[[2,[1]],4],[[19,[12]]]],[[],19],[[],19],[[],19],[[],19],[[[2,[1]],4],[[19,[12]]]],[[[2,[1]],4],[[19,[12]]]],[[],23],[[],23],[[],23],[[],23],[4,[[2,[1]]]],0],"p":[[8,"Array"],[3,"SmallVec"],[3,"IntoIter"],[15,"usize"],[8,"Clone"],[4,"Ordering"],[3,"Drain"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[4,"CollectionAllocErr"],[3,"Vec"],[15,"never"],[6,"LayoutErr"],[19,"MaybeUninit"],[8,"SliceIndex"],[3,"Box"],[4,"Result"],[4,"Option"],[8,"FnMut"],[3,"String"],[3,"TypeId"],[8,"ToSmallVec"],[13,"AllocErr"]]},\
"syn":{"doc":"github crates-io docs-rs","tn":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","visit","visit_mut","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_tokenursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","eq","error","error","error","extend","fmt","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","hash","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","provide","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","eq","extend","extend","first","first_mut","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","0","0","1","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Visit","visit_abi","visit_abi","visit_abi","visit_angle_bracketed_generic_arguments","visit_angle_bracketed_generic_arguments","visit_angle_bracketed_generic_arguments","visit_arm","visit_arm","visit_arm","visit_attr_style","visit_attr_style","visit_attr_style","visit_attribute","visit_attribute","visit_attribute","visit_bare_fn_arg","visit_bare_fn_arg","visit_bare_fn_arg","visit_bin_op","visit_bin_op","visit_bin_op","visit_binding","visit_binding","visit_binding","visit_block","visit_block","visit_block","visit_bound_lifetimes","visit_bound_lifetimes","visit_bound_lifetimes","visit_const_param","visit_const_param","visit_const_param","visit_constraint","visit_constraint","visit_constraint","visit_data","visit_data","visit_data","visit_data_enum","visit_data_enum","visit_data_enum","visit_data_struct","visit_data_struct","visit_data_struct","visit_data_union","visit_data_union","visit_data_union","visit_derive_input","visit_derive_input","visit_derive_input","visit_expr","visit_expr","visit_expr","visit_expr_array","visit_expr_array","visit_expr_array","visit_expr_assign","visit_expr_assign","visit_expr_assign","visit_expr_assign_op","visit_expr_assign_op","visit_expr_assign_op","visit_expr_async","visit_expr_async","visit_expr_async","visit_expr_await","visit_expr_await","visit_expr_await","visit_expr_binary","visit_expr_binary","visit_expr_binary","visit_expr_block","visit_expr_block","visit_expr_block","visit_expr_box","visit_expr_box","visit_expr_box","visit_expr_break","visit_expr_break","visit_expr_break","visit_expr_call","visit_expr_call","visit_expr_call","visit_expr_cast","visit_expr_cast","visit_expr_cast","visit_expr_closure","visit_expr_closure","visit_expr_closure","visit_expr_continue","visit_expr_continue","visit_expr_continue","visit_expr_field","visit_expr_field","visit_expr_field","visit_expr_for_loop","visit_expr_for_loop","visit_expr_for_loop","visit_expr_group","visit_expr_group","visit_expr_group","visit_expr_if","visit_expr_if","visit_expr_if","visit_expr_index","visit_expr_index","visit_expr_index","visit_expr_let","visit_expr_let","visit_expr_let","visit_expr_lit","visit_expr_lit","visit_expr_lit","visit_expr_loop","visit_expr_loop","visit_expr_loop","visit_expr_macro","visit_expr_macro","visit_expr_macro","visit_expr_match","visit_expr_match","visit_expr_match","visit_expr_method_call","visit_expr_method_call","visit_expr_method_call","visit_expr_paren","visit_expr_paren","visit_expr_paren","visit_expr_path","visit_expr_path","visit_expr_path","visit_expr_range","visit_expr_range","visit_expr_range","visit_expr_reference","visit_expr_reference","visit_expr_reference","visit_expr_repeat","visit_expr_repeat","visit_expr_repeat","visit_expr_return","visit_expr_return","visit_expr_return","visit_expr_struct","visit_expr_struct","visit_expr_struct","visit_expr_try","visit_expr_try","visit_expr_try","visit_expr_try_block","visit_expr_try_block","visit_expr_try_block","visit_expr_tuple","visit_expr_tuple","visit_expr_tuple","visit_expr_type","visit_expr_type","visit_expr_type","visit_expr_unary","visit_expr_unary","visit_expr_unary","visit_expr_unsafe","visit_expr_unsafe","visit_expr_unsafe","visit_expr_while","visit_expr_while","visit_expr_while","visit_expr_yield","visit_expr_yield","visit_expr_yield","visit_field","visit_field","visit_field","visit_field_pat","visit_field_pat","visit_field_pat","visit_field_value","visit_field_value","visit_field_value","visit_fields","visit_fields","visit_fields","visit_fields_named","visit_fields_named","visit_fields_named","visit_fields_unnamed","visit_fields_unnamed","visit_fields_unnamed","visit_file","visit_file","visit_file","visit_fn_arg","visit_fn_arg","visit_fn_arg","visit_foreign_item","visit_foreign_item","visit_foreign_item","visit_foreign_item_fn","visit_foreign_item_fn","visit_foreign_item_fn","visit_foreign_item_macro","visit_foreign_item_macro","visit_foreign_item_macro","visit_foreign_item_static","visit_foreign_item_static","visit_foreign_item_static","visit_foreign_item_type","visit_foreign_item_type","visit_foreign_item_type","visit_generic_argument","visit_generic_argument","visit_generic_argument","visit_generic_method_argument","visit_generic_method_argument","visit_generic_method_argument","visit_generic_param","visit_generic_param","visit_generic_param","visit_generics","visit_generics","visit_generics","visit_ident","visit_ident","visit_ident","visit_impl_item","visit_impl_item","visit_impl_item","visit_impl_item_const","visit_impl_item_const","visit_impl_item_const","visit_impl_item_macro","visit_impl_item_macro","visit_impl_item_macro","visit_impl_item_method","visit_impl_item_method","visit_impl_item_method","visit_impl_item_type","visit_impl_item_type","visit_impl_item_type","visit_index","visit_index","visit_index","visit_item","visit_item","visit_item","visit_item_const","visit_item_const","visit_item_const","visit_item_enum","visit_item_enum","visit_item_enum","visit_item_extern_crate","visit_item_extern_crate","visit_item_extern_crate","visit_item_fn","visit_item_fn","visit_item_fn","visit_item_foreign_mod","visit_item_foreign_mod","visit_item_foreign_mod","visit_item_impl","visit_item_impl","visit_item_impl","visit_item_macro","visit_item_macro","visit_item_macro","visit_item_macro2","visit_item_macro2","visit_item_macro2","visit_item_mod","visit_item_mod","visit_item_mod","visit_item_static","visit_item_static","visit_item_static","visit_item_struct","visit_item_struct","visit_item_struct","visit_item_trait","visit_item_trait","visit_item_trait","visit_item_trait_alias","visit_item_trait_alias","visit_item_trait_alias","visit_item_type","visit_item_type","visit_item_type","visit_item_union","visit_item_union","visit_item_union","visit_item_use","visit_item_use","visit_item_use","visit_label","visit_label","visit_label","visit_lifetime","visit_lifetime","visit_lifetime","visit_lifetime_def","visit_lifetime_def","visit_lifetime_def","visit_lit","visit_lit","visit_lit","visit_lit_bool","visit_lit_bool","visit_lit_bool","visit_lit_byte","visit_lit_byte","visit_lit_byte","visit_lit_byte_str","visit_lit_byte_str","visit_lit_byte_str","visit_lit_char","visit_lit_char","visit_lit_char","visit_lit_float","visit_lit_float","visit_lit_float","visit_lit_int","visit_lit_int","visit_lit_int","visit_lit_str","visit_lit_str","visit_lit_str","visit_local","visit_local","visit_local","visit_macro","visit_macro","visit_macro","visit_macro_delimiter","visit_macro_delimiter","visit_macro_delimiter","visit_member","visit_member","visit_member","visit_meta","visit_meta","visit_meta","visit_meta_list","visit_meta_list","visit_meta_list","visit_meta_name_value","visit_meta_name_value","visit_meta_name_value","visit_method_turbofish","visit_method_turbofish","visit_method_turbofish","visit_nested_meta","visit_nested_meta","visit_nested_meta","visit_parenthesized_generic_arguments","visit_parenthesized_generic_arguments","visit_parenthesized_generic_arguments","visit_pat","visit_pat","visit_pat","visit_pat_box","visit_pat_box","visit_pat_box","visit_pat_ident","visit_pat_ident","visit_pat_ident","visit_pat_lit","visit_pat_lit","visit_pat_lit","visit_pat_macro","visit_pat_macro","visit_pat_macro","visit_pat_or","visit_pat_or","visit_pat_or","visit_pat_path","visit_pat_path","visit_pat_path","visit_pat_range","visit_pat_range","visit_pat_range","visit_pat_reference","visit_pat_reference","visit_pat_reference","visit_pat_rest","visit_pat_rest","visit_pat_rest","visit_pat_slice","visit_pat_slice","visit_pat_slice","visit_pat_struct","visit_pat_struct","visit_pat_struct","visit_pat_tuple","visit_pat_tuple","visit_pat_tuple","visit_pat_tuple_struct","visit_pat_tuple_struct","visit_pat_tuple_struct","visit_pat_type","visit_pat_type","visit_pat_type","visit_pat_wild","visit_pat_wild","visit_pat_wild","visit_path","visit_path","visit_path","visit_path_arguments","visit_path_arguments","visit_path_arguments","visit_path_segment","visit_path_segment","visit_path_segment","visit_predicate_eq","visit_predicate_eq","visit_predicate_eq","visit_predicate_lifetime","visit_predicate_lifetime","visit_predicate_lifetime","visit_predicate_type","visit_predicate_type","visit_predicate_type","visit_qself","visit_qself","visit_qself","visit_range_limits","visit_range_limits","visit_range_limits","visit_receiver","visit_receiver","visit_receiver","visit_return_type","visit_return_type","visit_return_type","visit_signature","visit_signature","visit_signature","visit_span","visit_span","visit_span","visit_stmt","visit_stmt","visit_stmt","visit_trait_bound","visit_trait_bound","visit_trait_bound","visit_trait_bound_modifier","visit_trait_bound_modifier","visit_trait_bound_modifier","visit_trait_item","visit_trait_item","visit_trait_item","visit_trait_item_const","visit_trait_item_const","visit_trait_item_const","visit_trait_item_macro","visit_trait_item_macro","visit_trait_item_macro","visit_trait_item_method","visit_trait_item_method","visit_trait_item_method","visit_trait_item_type","visit_trait_item_type","visit_trait_item_type","visit_type","visit_type","visit_type","visit_type_array","visit_type_array","visit_type_array","visit_type_bare_fn","visit_type_bare_fn","visit_type_bare_fn","visit_type_group","visit_type_group","visit_type_group","visit_type_impl_trait","visit_type_impl_trait","visit_type_impl_trait","visit_type_infer","visit_type_infer","visit_type_infer","visit_type_macro","visit_type_macro","visit_type_macro","visit_type_never","visit_type_never","visit_type_never","visit_type_param","visit_type_param","visit_type_param","visit_type_param_bound","visit_type_param_bound","visit_type_param_bound","visit_type_paren","visit_type_paren","visit_type_paren","visit_type_path","visit_type_path","visit_type_path","visit_type_ptr","visit_type_ptr","visit_type_ptr","visit_type_reference","visit_type_reference","visit_type_reference","visit_type_slice","visit_type_slice","visit_type_slice","visit_type_trait_object","visit_type_trait_object","visit_type_trait_object","visit_type_tuple","visit_type_tuple","visit_type_tuple","visit_un_op","visit_un_op","visit_un_op","visit_use_glob","visit_use_glob","visit_use_glob","visit_use_group","visit_use_group","visit_use_group","visit_use_name","visit_use_name","visit_use_name","visit_use_path","visit_use_path","visit_use_path","visit_use_rename","visit_use_rename","visit_use_rename","visit_use_tree","visit_use_tree","visit_use_tree","visit_variadic","visit_variadic","visit_variadic","visit_variant","visit_variant","visit_variant","visit_vis_crate","visit_vis_crate","visit_vis_crate","visit_vis_public","visit_vis_public","visit_vis_public","visit_vis_restricted","visit_vis_restricted","visit_vis_restricted","visit_visibility","visit_visibility","visit_visibility","visit_where_clause","visit_where_clause","visit_where_clause","visit_where_predicate","visit_where_predicate","visit_where_predicate","VisitMut","visit_abi_mut","visit_abi_mut","visit_abi_mut","visit_angle_bracketed_generic_arguments_mut","visit_angle_bracketed_generic_arguments_mut","visit_angle_bracketed_generic_arguments_mut","visit_arm_mut","visit_arm_mut","visit_arm_mut","visit_attr_style_mut","visit_attr_style_mut","visit_attr_style_mut","visit_attribute_mut","visit_attribute_mut","visit_attribute_mut","visit_bare_fn_arg_mut","visit_bare_fn_arg_mut","visit_bare_fn_arg_mut","visit_bin_op_mut","visit_bin_op_mut","visit_bin_op_mut","visit_binding_mut","visit_binding_mut","visit_binding_mut","visit_block_mut","visit_block_mut","visit_block_mut","visit_bound_lifetimes_mut","visit_bound_lifetimes_mut","visit_bound_lifetimes_mut","visit_const_param_mut","visit_const_param_mut","visit_const_param_mut","visit_constraint_mut","visit_constraint_mut","visit_constraint_mut","visit_data_enum_mut","visit_data_enum_mut","visit_data_enum_mut","visit_data_mut","visit_data_mut","visit_data_mut","visit_data_struct_mut","visit_data_struct_mut","visit_data_struct_mut","visit_data_union_mut","visit_data_union_mut","visit_data_union_mut","visit_derive_input_mut","visit_derive_input_mut","visit_derive_input_mut","visit_expr_array_mut","visit_expr_array_mut","visit_expr_array_mut","visit_expr_assign_mut","visit_expr_assign_mut","visit_expr_assign_mut","visit_expr_assign_op_mut","visit_expr_assign_op_mut","visit_expr_assign_op_mut","visit_expr_async_mut","visit_expr_async_mut","visit_expr_async_mut","visit_expr_await_mut","visit_expr_await_mut","visit_expr_await_mut","visit_expr_binary_mut","visit_expr_binary_mut","visit_expr_binary_mut","visit_expr_block_mut","visit_expr_block_mut","visit_expr_block_mut","visit_expr_box_mut","visit_expr_box_mut","visit_expr_box_mut","visit_expr_break_mut","visit_expr_break_mut","visit_expr_break_mut","visit_expr_call_mut","visit_expr_call_mut","visit_expr_call_mut","visit_expr_cast_mut","visit_expr_cast_mut","visit_expr_cast_mut","visit_expr_closure_mut","visit_expr_closure_mut","visit_expr_closure_mut","visit_expr_continue_mut","visit_expr_continue_mut","visit_expr_continue_mut","visit_expr_field_mut","visit_expr_field_mut","visit_expr_field_mut","visit_expr_for_loop_mut","visit_expr_for_loop_mut","visit_expr_for_loop_mut","visit_expr_group_mut","visit_expr_group_mut","visit_expr_group_mut","visit_expr_if_mut","visit_expr_if_mut","visit_expr_if_mut","visit_expr_index_mut","visit_expr_index_mut","visit_expr_index_mut","visit_expr_let_mut","visit_expr_let_mut","visit_expr_let_mut","visit_expr_lit_mut","visit_expr_lit_mut","visit_expr_lit_mut","visit_expr_loop_mut","visit_expr_loop_mut","visit_expr_loop_mut","visit_expr_macro_mut","visit_expr_macro_mut","visit_expr_macro_mut","visit_expr_match_mut","visit_expr_match_mut","visit_expr_match_mut","visit_expr_method_call_mut","visit_expr_method_call_mut","visit_expr_method_call_mut","visit_expr_mut","visit_expr_mut","visit_expr_mut","visit_expr_paren_mut","visit_expr_paren_mut","visit_expr_paren_mut","visit_expr_path_mut","visit_expr_path_mut","visit_expr_path_mut","visit_expr_range_mut","visit_expr_range_mut","visit_expr_range_mut","visit_expr_reference_mut","visit_expr_reference_mut","visit_expr_reference_mut","visit_expr_repeat_mut","visit_expr_repeat_mut","visit_expr_repeat_mut","visit_expr_return_mut","visit_expr_return_mut","visit_expr_return_mut","visit_expr_struct_mut","visit_expr_struct_mut","visit_expr_struct_mut","visit_expr_try_block_mut","visit_expr_try_block_mut","visit_expr_try_block_mut","visit_expr_try_mut","visit_expr_try_mut","visit_expr_try_mut","visit_expr_tuple_mut","visit_expr_tuple_mut","visit_expr_tuple_mut","visit_expr_type_mut","visit_expr_type_mut","visit_expr_type_mut","visit_expr_unary_mut","visit_expr_unary_mut","visit_expr_unary_mut","visit_expr_unsafe_mut","visit_expr_unsafe_mut","visit_expr_unsafe_mut","visit_expr_while_mut","visit_expr_while_mut","visit_expr_while_mut","visit_expr_yield_mut","visit_expr_yield_mut","visit_expr_yield_mut","visit_field_mut","visit_field_mut","visit_field_mut","visit_field_pat_mut","visit_field_pat_mut","visit_field_pat_mut","visit_field_value_mut","visit_field_value_mut","visit_field_value_mut","visit_fields_mut","visit_fields_mut","visit_fields_mut","visit_fields_named_mut","visit_fields_named_mut","visit_fields_named_mut","visit_fields_unnamed_mut","visit_fields_unnamed_mut","visit_fields_unnamed_mut","visit_file_mut","visit_file_mut","visit_file_mut","visit_fn_arg_mut","visit_fn_arg_mut","visit_fn_arg_mut","visit_foreign_item_fn_mut","visit_foreign_item_fn_mut","visit_foreign_item_fn_mut","visit_foreign_item_macro_mut","visit_foreign_item_macro_mut","visit_foreign_item_macro_mut","visit_foreign_item_mut","visit_foreign_item_mut","visit_foreign_item_mut","visit_foreign_item_static_mut","visit_foreign_item_static_mut","visit_foreign_item_static_mut","visit_foreign_item_type_mut","visit_foreign_item_type_mut","visit_foreign_item_type_mut","visit_generic_argument_mut","visit_generic_argument_mut","visit_generic_argument_mut","visit_generic_method_argument_mut","visit_generic_method_argument_mut","visit_generic_method_argument_mut","visit_generic_param_mut","visit_generic_param_mut","visit_generic_param_mut","visit_generics_mut","visit_generics_mut","visit_generics_mut","visit_ident_mut","visit_ident_mut","visit_ident_mut","visit_impl_item_const_mut","visit_impl_item_const_mut","visit_impl_item_const_mut","visit_impl_item_macro_mut","visit_impl_item_macro_mut","visit_impl_item_macro_mut","visit_impl_item_method_mut","visit_impl_item_method_mut","visit_impl_item_method_mut","visit_impl_item_mut","visit_impl_item_mut","visit_impl_item_mut","visit_impl_item_type_mut","visit_impl_item_type_mut","visit_impl_item_type_mut","visit_index_mut","visit_index_mut","visit_index_mut","visit_item_const_mut","visit_item_const_mut","visit_item_const_mut","visit_item_enum_mut","visit_item_enum_mut","visit_item_enum_mut","visit_item_extern_crate_mut","visit_item_extern_crate_mut","visit_item_extern_crate_mut","visit_item_fn_mut","visit_item_fn_mut","visit_item_fn_mut","visit_item_foreign_mod_mut","visit_item_foreign_mod_mut","visit_item_foreign_mod_mut","visit_item_impl_mut","visit_item_impl_mut","visit_item_impl_mut","visit_item_macro2_mut","visit_item_macro2_mut","visit_item_macro2_mut","visit_item_macro_mut","visit_item_macro_mut","visit_item_macro_mut","visit_item_mod_mut","visit_item_mod_mut","visit_item_mod_mut","visit_item_mut","visit_item_mut","visit_item_mut","visit_item_static_mut","visit_item_static_mut","visit_item_static_mut","visit_item_struct_mut","visit_item_struct_mut","visit_item_struct_mut","visit_item_trait_alias_mut","visit_item_trait_alias_mut","visit_item_trait_alias_mut","visit_item_trait_mut","visit_item_trait_mut","visit_item_trait_mut","visit_item_type_mut","visit_item_type_mut","visit_item_type_mut","visit_item_union_mut","visit_item_union_mut","visit_item_union_mut","visit_item_use_mut","visit_item_use_mut","visit_item_use_mut","visit_label_mut","visit_label_mut","visit_label_mut","visit_lifetime_def_mut","visit_lifetime_def_mut","visit_lifetime_def_mut","visit_lifetime_mut","visit_lifetime_mut","visit_lifetime_mut","visit_lit_bool_mut","visit_lit_bool_mut","visit_lit_bool_mut","visit_lit_byte_mut","visit_lit_byte_mut","visit_lit_byte_mut","visit_lit_byte_str_mut","visit_lit_byte_str_mut","visit_lit_byte_str_mut","visit_lit_char_mut","visit_lit_char_mut","visit_lit_char_mut","visit_lit_float_mut","visit_lit_float_mut","visit_lit_float_mut","visit_lit_int_mut","visit_lit_int_mut","visit_lit_int_mut","visit_lit_mut","visit_lit_mut","visit_lit_mut","visit_lit_str_mut","visit_lit_str_mut","visit_lit_str_mut","visit_local_mut","visit_local_mut","visit_local_mut","visit_macro_delimiter_mut","visit_macro_delimiter_mut","visit_macro_delimiter_mut","visit_macro_mut","visit_macro_mut","visit_macro_mut","visit_member_mut","visit_member_mut","visit_member_mut","visit_meta_list_mut","visit_meta_list_mut","visit_meta_list_mut","visit_meta_mut","visit_meta_mut","visit_meta_mut","visit_meta_name_value_mut","visit_meta_name_value_mut","visit_meta_name_value_mut","visit_method_turbofish_mut","visit_method_turbofish_mut","visit_method_turbofish_mut","visit_nested_meta_mut","visit_nested_meta_mut","visit_nested_meta_mut","visit_parenthesized_generic_arguments_mut","visit_parenthesized_generic_arguments_mut","visit_parenthesized_generic_arguments_mut","visit_pat_box_mut","visit_pat_box_mut","visit_pat_box_mut","visit_pat_ident_mut","visit_pat_ident_mut","visit_pat_ident_mut","visit_pat_lit_mut","visit_pat_lit_mut","visit_pat_lit_mut","visit_pat_macro_mut","visit_pat_macro_mut","visit_pat_macro_mut","visit_pat_mut","visit_pat_mut","visit_pat_mut","visit_pat_or_mut","visit_pat_or_mut","visit_pat_or_mut","visit_pat_path_mut","visit_pat_path_mut","visit_pat_path_mut","visit_pat_range_mut","visit_pat_range_mut","visit_pat_range_mut","visit_pat_reference_mut","visit_pat_reference_mut","visit_pat_reference_mut","visit_pat_rest_mut","visit_pat_rest_mut","visit_pat_rest_mut","visit_pat_slice_mut","visit_pat_slice_mut","visit_pat_slice_mut","visit_pat_struct_mut","visit_pat_struct_mut","visit_pat_struct_mut","visit_pat_tuple_mut","visit_pat_tuple_mut","visit_pat_tuple_mut","visit_pat_tuple_struct_mut","visit_pat_tuple_struct_mut","visit_pat_tuple_struct_mut","visit_pat_type_mut","visit_pat_type_mut","visit_pat_type_mut","visit_pat_wild_mut","visit_pat_wild_mut","visit_pat_wild_mut","visit_path_arguments_mut","visit_path_arguments_mut","visit_path_arguments_mut","visit_path_mut","visit_path_mut","visit_path_mut","visit_path_segment_mut","visit_path_segment_mut","visit_path_segment_mut","visit_predicate_eq_mut","visit_predicate_eq_mut","visit_predicate_eq_mut","visit_predicate_lifetime_mut","visit_predicate_lifetime_mut","visit_predicate_lifetime_mut","visit_predicate_type_mut","visit_predicate_type_mut","visit_predicate_type_mut","visit_qself_mut","visit_qself_mut","visit_qself_mut","visit_range_limits_mut","visit_range_limits_mut","visit_range_limits_mut","visit_receiver_mut","visit_receiver_mut","visit_receiver_mut","visit_return_type_mut","visit_return_type_mut","visit_return_type_mut","visit_signature_mut","visit_signature_mut","visit_signature_mut","visit_span_mut","visit_span_mut","visit_span_mut","visit_stmt_mut","visit_stmt_mut","visit_stmt_mut","visit_trait_bound_modifier_mut","visit_trait_bound_modifier_mut","visit_trait_bound_modifier_mut","visit_trait_bound_mut","visit_trait_bound_mut","visit_trait_bound_mut","visit_trait_item_const_mut","visit_trait_item_const_mut","visit_trait_item_const_mut","visit_trait_item_macro_mut","visit_trait_item_macro_mut","visit_trait_item_macro_mut","visit_trait_item_method_mut","visit_trait_item_method_mut","visit_trait_item_method_mut","visit_trait_item_mut","visit_trait_item_mut","visit_trait_item_mut","visit_trait_item_type_mut","visit_trait_item_type_mut","visit_trait_item_type_mut","visit_type_array_mut","visit_type_array_mut","visit_type_array_mut","visit_type_bare_fn_mut","visit_type_bare_fn_mut","visit_type_bare_fn_mut","visit_type_group_mut","visit_type_group_mut","visit_type_group_mut","visit_type_impl_trait_mut","visit_type_impl_trait_mut","visit_type_impl_trait_mut","visit_type_infer_mut","visit_type_infer_mut","visit_type_infer_mut","visit_type_macro_mut","visit_type_macro_mut","visit_type_macro_mut","visit_type_mut","visit_type_mut","visit_type_mut","visit_type_never_mut","visit_type_never_mut","visit_type_never_mut","visit_type_param_bound_mut","visit_type_param_bound_mut","visit_type_param_bound_mut","visit_type_param_mut","visit_type_param_mut","visit_type_param_mut","visit_type_paren_mut","visit_type_paren_mut","visit_type_paren_mut","visit_type_path_mut","visit_type_path_mut","visit_type_path_mut","visit_type_ptr_mut","visit_type_ptr_mut","visit_type_ptr_mut","visit_type_reference_mut","visit_type_reference_mut","visit_type_reference_mut","visit_type_slice_mut","visit_type_slice_mut","visit_type_slice_mut","visit_type_trait_object_mut","visit_type_trait_object_mut","visit_type_trait_object_mut","visit_type_tuple_mut","visit_type_tuple_mut","visit_type_tuple_mut","visit_un_op_mut","visit_un_op_mut","visit_un_op_mut","visit_use_glob_mut","visit_use_glob_mut","visit_use_glob_mut","visit_use_group_mut","visit_use_group_mut","visit_use_group_mut","visit_use_name_mut","visit_use_name_mut","visit_use_name_mut","visit_use_path_mut","visit_use_path_mut","visit_use_path_mut","visit_use_rename_mut","visit_use_rename_mut","visit_use_rename_mut","visit_use_tree_mut","visit_use_tree_mut","visit_use_tree_mut","visit_variadic_mut","visit_variadic_mut","visit_variadic_mut","visit_variant_mut","visit_variant_mut","visit_variant_mut","visit_vis_crate_mut","visit_vis_crate_mut","visit_vis_crate_mut","visit_vis_public_mut","visit_vis_public_mut","visit_vis_public_mut","visit_vis_restricted_mut","visit_vis_restricted_mut","visit_vis_restricted_mut","visit_visibility_mut","visit_visibility_mut","visit_visibility_mut","visit_where_clause_mut","visit_where_clause_mut","visit_where_clause_mut","visit_where_predicate_mut","visit_where_predicate_mut","visit_where_predicate_mut"],"q":["syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::AttrStyle","syn::BinOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Data","","","syn::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Fields","","syn::FnArg","","syn::ForeignItem","","","","","syn::GenericArgument","","","","","syn::GenericMethodArgument","","syn::GenericParam","","","syn::ImplItem","","","","","syn::Item","","","","","","","","","","","","","","","","","syn::Lit","","","","","","","","syn::MacroDelimiter","","","syn::Member","","syn::Meta","","","syn::NestedMeta","","syn::Pat","","","","","","","","","","","","","","","","syn::PathArguments","","syn::RangeLimits","","syn::ReturnType","","syn::Stmt","","","","","syn::StrStyle","syn::TraitBoundModifier","syn::TraitItem","","","","","syn::Type","","","","","","","","","","","","","","","syn::TypeParamBound","","syn::UnOp","","","syn::UseTree","","","","","syn::Visibility","","","syn::WherePredicate","","","syn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated::Pair","","","syn::spanned","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::visitsyn::visit_mutd":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0...10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>::&lt;&gt;</code> explicit type parameters passed to a method call: …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with a","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A reference pattern: <code>&amp;mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</codealue of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the varianteturns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Generics required to complete the definition.","If this path consists of a single ident, returns the identame of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementsype of the fieldeturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","Syntax tree traversal to walk a shared borrow of a syntax …","Syntax tree traversal to mutate an exclusive borrow of a …","","","","In some positions, types may not contain the <code>+</code> character, …cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","","","","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeyntax tree traversal to walk a shared borrow of a syntax …yntax tree traversal to mutate an exclusive borrow of a …i":[0,142,142,142,185,0,0,25,147,25,25,25,0,0,0,25,147,0,0,25,0,186,142,142,142,142,142,142,0,25,129,0,25,166,136,136,25,129,129,25,25,129,72,25,68,74,87,115,120,186,0,0,186,25,338,21,0,0,0,0,165,143,0,142,142,87,138,83,142,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,25,0,0,0,0,0,0,129,87,110,0,25,0,0,0,0,0,87,142,0,0,0,0,104,25,104,147,142,72,0,166,25,87,0,0,0,0,0,0,147,0,25,147,21,11,129,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,25,0,74,79,83,186,0,12,0,15,25,166,0,0,0,0,0,0,0,0,145,25,142,0,25,87,110,115,120,147,166,87,0,25,81,0,0,15,0,0,115,120,25,0,87,142,142,104,12,17,65,142,143,0,147,81,185,143,142,166,11,25,136,147,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,25,104,147,166,0,0,0,0,0,147,21,0,25,166,0,338,0,126,25,147,166,142,142,104,25,166,21,0,25,0,145,142,142,142,142,0,147,166,87,110,0,129,0,25,87,138,166,142,142,0,79,87,87,0,0,0,0,0,0,0,147,25,25,25,147,166,166,0,0,25,68,74,83,87,110,115,120,165,166,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,25,87,138,17,17,65,25,87,0,0,0,0,0,0,0,0,25,87,110,115,120,129,147,166,0,0,0,0,0,0,25,166,25,92,125,149,53,158,174,9,35,49,67,187,184,48,36,107,191,1,29,37,125,16,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,75,76,77,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,112,113,114,116,117,118,119,121,122,123,124,127,128,137,146,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,99,30,135,154,30,39,3,5,3,5,29,32,58,62,91,122,37,40,46,63,71,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,338,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,338,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,84,75,76,84,85,100,118,151,160,189,33,167,18,48,56,89,92,93,99,109,140,144,177,0,10,26,43,54,148,159,176,0,34,0,168,29,37,171,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,67,105,187,20,60,69,70,75,76,77,84,85,88,97,99,112,116,118,121,180,182,189,71,42,63,73,73,77,88,116,121,157,125,96,38,23,90,0,0,137,73,78,185,75,77,116,117,118,93,121,122,123,135,16,56,175,177,30,39,49,164,160,148,150,155,157,158,159,26,59,161,176,178,42,89,140,7,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,14,27,44,75,77,86,88,97,100,101,121,123,188,33,34,36,40,41,43,44,48,50,53,54,55,57,60,61,64,69,88,97,121,169,0,90,162,71,16,56,98,102,139,141,177,7,7,7,8,1,2,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,3,5,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,125,149,40,78,7,7,7,7,7,7,7,8,1,2,9,10,11,12,12,12,12,13,14,15,15,15,16,17,17,17,18,19,20,21,21,21,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,65,65,66,66,67,68,69,70,71,72,73,74,74,74,74,75,75,76,77,78,79,79,79,80,81,82,83,83,83,83,84,85,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,104,104,104,104,104,105,106,107,108,109,110,110,110,110,110,111,112,113,114,115,115,115,115,115,116,117,118,119,120,120,120,120,120,121,122,123,124,125,126,126,126,127,128,129,129,129,129,129,129,129,129,130,131,132,133,3,3,5,5,134,338,135,136,137,137,137,137,138,138,138,138,139,140,141,142,143,144,145,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,183,184,184,185,186,187,188,189,190,191,52,35,89,93,98,99,100,101,102,118,123,125,137,183,41,150,67,73,78,187,191,71,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,173,9,16,20,75,77,88,89,90,94,95,96,97,98,99,100,101,102,105,106,107,112,113,116,118,121,123,125,137,168,184,188,189,42,93,151,24,40,43,66,146,37,125,149,190,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,338,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,17,17,17,17,185,183,185,92,93,99,109,128,17,17,32,34,38,40,46,63,103,183,171,27,28,31,17,54,148,44,146,86,127,76,85,158,73,78,80,84,149,73,52,173,14,45,173,46,67,73,78,187,191,47,94,114,119,124,153,170,95,73,48,39,69,182,49,96,80,37,53,97,112,127,157,158,168,174,70,162,163,18,13,7,9,76,129,130,131,132,133,3,5,134,7,28,31,61,37,37,37,125,149,190,73,13,19,24,35,49,50,59,80,125,149,155,161,178,190,0,0,0,7,9,12,13,14,15,16,18,19,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,132,133,3,5,134,135,137,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,183,184,186,187,188,189,190,0,7,10,10,135,135,0,10,0,10,183,20,10,0,0,0,20,130,144,25,7,9,40,44,71,146,167,174,179,180,182,12,10,13,14,24,51,56,80,135,156,172,177,179,191,10,82,22,24,0,51,156,172,57,53,125,49,127,90,107,56,55,86,27,28,31,95,183,127,93,96,54,88,90,94,97,98,100,101,103,111,112,113,114,116,117,118,119,121,123,124,139,146,148,7,9,129,130,131,132,133,3,5,134,128,91,111,117,122,7,7,7,8,1,2,9,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,129,130,130,131,131,132,132,133,133,3,3,5,5,134,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,66,134,0,73,108,157,97,112,144,98,139,10,168,129,130,131,132,133,3,5,99,42,52,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,3,5,7,8,1,2,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,0,130,131,132,133,3,5,134,10,135,93,99,100,103,105,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,338,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,338,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,58,49,20,36,60,77,88,97,101,112,116,121,123,163,180,188,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,338,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,73,73,101,113,118,123,152,181,102,141,19,7,62,93,99,125,149,103,130,131,132,133,134,134,125,149,89,140,20,88,89,90,91,95,96,97,98,99,100,101,102,103,111,112,113,121,122,123,137,0,0,73,82,63,147,151,160,165,64,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,490,491,492,493,494,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,0,0,220,220,221,220,221,221,221,221,221,221,220,221,221,221,220,221,221,221,220,220,221,221,221,221,221,221,220,221,220,221,220,221,0,533,533,533,0,0,0,216,0,0,0,0,0,0,0,223,227,223,224,226,225,227,223,224,226,225,223,224,225,224,225,225,223,224,0,223,226,227,223,224,225,223,223,226,225,225,223,227,223,224,226,225,225,226,227,223,224,226,225,225,225,225,223,223,225,225,213,223,216,226,216,216,223,227,223,223,223,225,223,225,223,225,224,225,223,225,227,223,224,226,225,227,223,224,226,225,227,223,224,226,225,0,534,238,0,0,0,0,0,0,0,0,238,232,235,240,236,237,207,208,238,232,235,240,236,237,207,208,238,232,232,235,236,237,207,238,232,235,236,237,207,238,232,232,232,232,232,232,232,232,232,235,240,236,237,207,208,238,232,232,232,232,232,232,232,235,240,236,237,207,208,238,232,232,232,235,240,236,237,207,208,232,238,238,232,232,232,232,232,232,235,240,236,237,207,208,232,238,235,240,236,237,207,208,235,240,236,237,207,208,232,232,232,232,232,232,232,238,238,232,232,232,235,240,236,237,207,208,232,238,232,235,236,237,207,238,232,238,232,232,235,240,236,237,207,208,238,232,235,240,236,237,207,208,238,232,235,240,236,237,207,208,238,238,238,535,536,535,0,537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,288,290,293,294,295,297,299,300,302,303,307,310,312,315,318,319,322,325,330,331,333,203,288,290,293,294,295,297,299,300,302,303,307,310,312,315,318,319,322,325,330,331,333,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,334,335,336,337,203,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,203,241,242,243,244,245,246,247,248,249,250,202,251,252,253,254,255,198,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,200,199,274,275,201,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,0,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,538,538,0,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539,0,539,539],"fp":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[6,"Result"],[3,"Ident"],[3,"ImplGenerics"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[4,"Visibility"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[4,"Member"],[3,"Index"],[3,"MethodTurbofish"],[4,"GenericMethodArgument"],[3,"FieldValue"],[3,"Label"],[3,"Arm"],[4,"RangeLimits"],[3,"Generics"],[4,"GenericParam"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[4,"UseTree"],[3,"UsePath"],[3,"UseName"],[3,"UseRename"],[3,"UseGlob"],[3,"UseGroup"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemMacro"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Signature"],[4,"FnArg"],[3,"Receiver"],[3,"File"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"BinOp"],[4,"UnOp"],[3,"Block"],[4,"Stmt"],[3,"Local"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"Variadic"],[4,"ReturnType"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"Extern"],[3,"SelfValue"],[3,"SelfType"],[3,"Super"],[3,"Crate"],[3,"Underscore"],[15,"usize"],[3,"Literal"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Nothing"],[3,"Lookahead1"],[8,"Display"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Punctuated"],[8,"Peek"],[3,"Demand"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[8,"Debug"],[3,"PairsMut"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[4,"StrStyle"],[13,"Inner"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"And"],[13,"Or"],[13,"BitXor"],[13,"BitAnd"],[13,"BitOr"],[13,"Shl"],[13,"Shr"],[13,"Eq"],[13,"Lt"],[13,"Le"],[13,"Ne"],[13,"Ge"],[13,"Gt"],[13,"AddEq"],[13,"SubEq"],[13,"MulEq"],[13,"DivEq"],[13,"RemEq"],[13,"BitXorEq"],[13,"BitAndEq"],[13,"BitOrEq"],[13,"ShlEq"],[13,"ShrEq"],[13,"Struct"],[13,"Enum"],[13,"Union"],[13,"Array"],[13,"Assign"],[13,"AssignOp"],[13,"Async"],[13,"Await"],[13,"Binary"],[13,"Block"],[13,"Box"],[13,"Break"],[13,"Call"],[13,"Cast"],[13,"Closure"],[13,"Continue"],[13,"Field"],[13,"ForLoop"],[13,"Group"],[13,"If"],[13,"Index"],[13,"Let"],[13,"Lit"],[13,"Loop"],[13,"Macro"],[13,"Match"],[13,"MethodCall"],[13,"Paren"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Repeat"],[13,"Return"],[13,"Struct"],[13,"Try"],[13,"TryBlock"],[13,"Tuple"],[13,"Type"],[13,"Unary"],[13,"Unsafe"],[13,"Verbatim"],[13,"While"],[13,"Yield"],[13,"Named"],[13,"Unnamed"],[13,"Receiver"],[13,"Typed"],[13,"Fn"],[13,"Static"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Lifetime"],[13,"Type"],[13,"Const"],[13,"Binding"],[13,"Constraint"],[13,"Type"],[13,"Const"],[13,"Type"],[13,"Lifetime"],[13,"Const"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Const"],[13,"Enum"],[13,"ExternCrate"],[13,"Fn"],[13,"ForeignMod"],[13,"Impl"],[13,"Macro"],[13,"Macro2"],[13,"Mod"],[13,"Static"],[13,"Struct"],[13,"Trait"],[13,"TraitAlias"],[13,"Type"],[13,"Union"],[13,"Use"],[13,"Verbatim"],[13,"Str"],[13,"ByteStr"],[13,"Byte"],[13,"Char"],[13,"Int"],[13,"Float"],[13,"Bool"],[13,"Verbatim"],[13,"Paren"],[13,"Brace"],[13,"Bracket"],[13,"Named"],[13,"Unnamed"],[13,"Path"],[13,"List"],[13,"NameValue"],[13,"Meta"],[13,"Lit"],[13,"Box"],[13,"Ident"],[13,"Lit"],[13,"Macro"],[13,"Or"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Rest"],[13,"Slice"],[13,"Struct"],[13,"Tuple"],[13,"TupleStruct"],[13,"Type"],[13,"Verbatim"],[13,"Wild"],[13,"AngleBracketed"],[13,"Parenthesized"],[13,"HalfOpen"],[13,"Closed"],[13,"Type"],[13,"Local"],[13,"Item"],[13,"Expr"],[13,"Semi"],[13,"Raw"],[13,"Maybe"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Array"],[13,"BareFn"],[13,"Group"],[13,"ImplTrait"],[13,"Infer"],[13,"Macro"],[13,"Never"],[13,"Paren"],[13,"Path"],[13,"Ptr"],[13,"Reference"],[13,"Slice"],[13,"TraitObject"],[13,"Tuple"],[13,"Verbatim"],[13,"Trait"],[13,"Lifetime"],[13,"Deref"],[13,"Not"],[13,"Neg"],[13,"Path"],[13,"Name"],[13,"Rename"],[13,"Glob"],[13,"Group"],[13,"Public"],[13,"Crate"],[13,"Restricted"],[13,"Type"],[13,"Lifetime"],[13,"Eq"],[8,"IdentExt"],[8,"Speculative"],[13,"Punctuated"],[13,"End"],[8,"Spanned"],[8,"Visit"],[8,"VisitMut"]]},\
"tiff":{"doc":"Decoding and Encoding of TIFF Images","tn":["ByteExpected","CMYK","ColorType","CycleInOffsets","FloatingPointPredictor","Format","FormatError","Gray","GrayA","HorizontalPredictor","ImageFileDirectoryNotFound","InconsistentSizesEncountered","InconsistentStripSamples","IntSizeError","InterpretationWithBits","InvalidChunkIndex","InvalidChunkType","InvalidDimensions","InvalidTag","InvalidTagValueType","IoError","JpegDecoder","LimitsExceeded","Palette","RGB","RGBA","RequiredTagEmpty","RequiredTagNotFound","SignedIntegerExpected","StripTileTagConflict","TiffError","TiffFormatError","TiffResult","TiffSignatureInvalid","TiffSignatureNotFound","TiffUnsupportedError","UnexpectedCompressedData","UnknownCompressionMethod","UnknownInterpretation","UnknownPredictor","UnsignedIntegerExpected","UnsupportedBitsPerChannel","UnsupportedColorType","UnsupportedCompressionMethod","UnsupportedDataType","UnsupportedError","UnsupportedInterpretation","UnsupportedJpegFeature","UnsupportedPlanarConfig","UnsupportedSampleDepth","UnsupportedSampleFormat","UsageError","UsageError","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","decoder","description","encoder","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","into","into","into","into","into","provide","tags","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","actual_bytes","actual_samples","required_bytes","required_samples","0","0","0","0","0","0","0","0","0","0","0","1","0","0","1","ChunkType","Decoder","DecodingBuffer","DecodingResult","F32","F32","F64","F64","I16","I16","I32","I32","I64","I64","I8","I8","Limits","Strip","Tile","U16","U16","U32","U32","U64","U64","U8","U8","as_buffer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_order","chunk_data_dimensions","chunk_dimensions","clone","clone","clone_into","clone_into","colortype","decoding_buffer_size","default","dimensions","eq","find_tag","find_tag_unsigned","find_tag_unsigned_vec","fmt","fmt","fmt","fmt","fp_predict_f32","fp_predict_f64","from","from","from","from","from","get_chunk_type","get_tag","get_tag_ascii_string","get_tag_f32","get_tag_f32_vec","get_tag_f64","get_tag_f64_vec","get_tag_u16_vec","get_tag_u32","get_tag_u32_vec","get_tag_u64","get_tag_u64_vec","get_tag_u8_vec","get_tag_unsigned","goto_offset","goto_offset_u64","ifd","ifd_value_size","intermediate_buffer_size","into","into","into","into","into","more_images","new","next_image","read_byte","read_chunk","read_chunk_to_buffer","read_double","read_float","read_ifd_offset","read_image","read_long","read_long8","read_offset","read_offset_u64","read_short","read_slong","read_slong8","read_sshort","read_string","seek_to_image","strip_count","tile_count","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unlimited","with_limits","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","Ascii","Byte","Directory","Double","Entry","Float","Ifd","IfdBig","List","Rational","RationalBig","SRational","SRationalBig","Short","Signed","SignedBig","Unsigned","UnsignedBig","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","into","into","into_f32","into_f32_vec","into_f64","into_f64_vec","into_i32","into_i32_vec","into_i64","into_i64_vec","into_string","into_u16","into_u16_vec","into_u32","into_u32_vec","into_u64","into_u64_vec","into_u8","into_u8_vec","new","new_u64","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","val","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","0","0","BYTE_LEN","DirectoryEncoder","FIELD_TYPE","Ifd","Ifd8","ImageEncoder","OffsetArrayType","OffsetType","Rational","SRational","TiffEncoder","TiffKind","TiffKindBig","TiffKindStandard","TiffValue","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","colortype","compression","convert_offset","convert_offset","convert_offset","convert_slice","convert_slice","convert_slice","count","count","count","count","count","d","d","data","data","data","data","data","drop","drop","encoder","finish","finish","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","n","n","new","new_big","new_directory","new_generic","new_image","new_image_with_compression","next_strip_sample_count","resolution","resolution_unit","rows_per_strip","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write","write","write","write_data","write_data","write_entry_count","write_entry_count","write_entry_count","write_header","write_header","write_header","write_image","write_image_with_compression","write_offset","write_offset","write_offset","write_strip","write_tag","x_resolution","y_resolution","BITS_PER_SAMPLE","CMYK16","CMYK32","CMYK32Float","CMYK64","CMYK64Float","CMYK8","ColorType","Gray16","Gray32","Gray32Float","Gray64","Gray64Float","Gray8","GrayI16","GrayI32","GrayI64","GrayI8","Inner","RGB16","RGB32","RGB32Float","RGB64","RGB64Float","RGB8","RGBA16","RGBA32","RGBA32Float","RGBA64","RGBA64Float","RGBA8","SAMPLE_FORMAT","TIFF_VALUE","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Balanced","Best","COMPRESSION_METHOD","Compression","CompressionAlgorithm","Compressor","Deflate","Deflate","DeflateLevel","Fast","Lzw","Lzw","Packbits","Packbits","Uncompressed","Uncompressed","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","default","default","default","default","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_algorithm","get_algorithm","get_algorithm","get_algorithm","get_algorithm","into","into","into","into","into","into","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_level","write_to","write_to","write_to","write_to","write_to","write_to","0","0","0","0","ASCII","Artist","BYTE","BitsPerSample","BlackIsZero","CIELab","CMYK","CellLength","CellWidth","Centimeter","Chunky","ColorMap","Compression","CompressionMethod","Copyright","DOUBLE","DateTime","Deflate","ExtraSamples","FLOAT","Fax3","Fax4","FillOrder","FloatingPoint","FreeByteCounts","FreeOffsets","GdalNodata","GeoAsciiParamsTag","GeoDoubleParamsTag","GeoKeyDirectoryTag","GrayResponseCurve","GrayResponseUnit","Horizontal","HostComputer","Huffman","IEEEFP","IFD","IFD8","ImageDescription","ImageLength","ImageWidth","Inch","Int","JPEG","JPEGTables","LONG","LONG8","LZW","Make","MaxSampleValue","MinSampleValue","Model","ModelPixelScaleTag","ModelTiepointTag","ModelTransformationTag","ModernJPEG","NewSubfileType","None","None","None","OldDeflate","Orientation","PackBits","PhotometricInterpretation","PhotometricInterpretation","Planar","PlanarConfiguration","PlanarConfiguration","Predictor","Predictor","RATIONAL","RGB","RGBPalette","ResolutionUnit","ResolutionUnit","RowsPerStrip","SBYTE","SHORT","SLONG","SLONG8","SMaxSampleValue","SMinSampleValue","SRATIONAL","SSHORT","SampleFormat","SampleFormat","SamplesPerPixel","Software","StripByteCounts","StripOffsets","SubfileType","Tag","Threshholding","TileByteCounts","TileLength","TileOffsets","TileWidth","TransparencyMask","Type","UNDEFINED","Uint","Unknown","Unknown","Void","WhiteIsZero","XResolution","YCbCr","YResolution","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16_exhaustive","from_u16_exhaustive","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_u16","to_u16","to_u16","to_u16","to_u16","to_u16","to_u16","to_u16","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0"],"q":["tiff","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tiff::ColorType","","","","","","tiff::TiffError","","","","tiff::TiffFormatError","","","","","","","","","","","","","","","tiff::TiffUnsupportedError","","","","","","","","","","","","tiff::UsageError","","","tiff::decoder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tiff::decoder::DecodingBuffer","","","","","","","","","","tiff::decoder::DecodingResult","","","","","","","","","","tiff::decoder::ifd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tiff::decoder::ifd::Value","","","","","","","","","","","","","","","","","","","","tiff::encoder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tiff::encoder::colortypetiff::encoder::compression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tiff::encoder::compression::Compressor","","","","tiff::tagstiff::tags::SampleFormat","tiff::tags::Tag"],"d":["","Pixel is CMYK","An enumeration over supported color types and their bit …","","","","The Image is not formatted properly.","Pixel is grayscale","Pixel is grayscale with an alpha channel","","","","","An integer conversion to or from a platform size failed, …","","","","","","","An I/O Error occurred while decoding the image.","","The Limits of the Decoder is exceeded.","Pixel is an index into a color palette","Pixel contains R, G and B channels","Pixel is RGB with an alpha channel","","","","","Tiff error kinds.","The image is not formatted properly.","Result of an image decoding/encoding process","","","The Decoder does not support features required by the …","","","","","","","","","","The Decoder does not support features required by the …","","","","","","User attempted to use the Decoder in a way that is …","The image does not support the requested operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chunk type of the internal representation","The representation of a TIFF decoder","","Result of a decoding process","A slice of 32 bit IEEE floats","A vector of 32 bit IEEE floats","A slice of 64 bit IEEE floats","A vector of 64 bit IEEE floats","A slice of 16 bits signed ints","A vector of 16 bit signed ints","A slice of 32 bits signed ints","A vector of 32 bit signed ints","A slice of 64 bits signed ints","A vector of 64 bit signed ints","A slice of 8 bits signed ints","A vector of 8 bit signed ints","Decoding limits","","","A slice of unsigned words","A vector of unsigned words","A slice of 32 bit unsigned ints","A vector of 32 bit unsigned ints","A slice of 64 bit unsigned ints","A vector of 64 bit unsigned ints","A slice of unsigned bytes","A vector of unsigned bytes","","","","","","","","","","","","Returns the byte_order","Returns the size of the data in the chunk with the …","Returns the default chunk size for the current image. Any …","","","","","","The maximum size of any <code>DecodingResult</code> in bytes, the …","","","","Tries to retrieve a tag. Return <code>Ok(None)</code> if the tag is not …","Tries to retrieve a tag and convert it to the desired …","Tries to retrieve a vector of all a tag’s values and …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The chunk type (Strips / Tiles) of the image","Tries to retrieve a tag. Returns an error if the tag is …","Tries to retrieve a tag and convert it to a ascii vector.","Tries to retrieve a tag and convert it to the desired type.","Tries to retrieve a tag and convert it to the desired type.","Tries to retrieve a tag and convert it to the desired type.","Tries to retrieve a tag and convert it to the desired type.","","Tries to retrieve a tag and convert it to the desired type.","Tries to retrieve a tag and convert it to the desired type.","","","Tries to retrieve a tag and convert it to a 8bit vector.","Tries to retrieve a tag and convert it to the desired …","Moves the cursor to the specified offset","","Function for reading TIFF tags","The maximum size of any ifd value in bytes, the default is …","Maximum size for intermediate buffer which may be used to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if there is at least one more image available.","Create a new decoder that decodes from the stream <code>r</code>","Reads in the next image. If there is no further image in …","Reads a TIFF byte value","Read the specified chunk (at index <code>chunk_index</code>) and return …","","Reads a TIFF double value","Reads a TIFF float value","","Decodes the entire image and return it as a Vector","Reads a TIFF long value","","Reads a TIFF IFA offset/value field","Reads a TIFF IFA offset/value field","Reads a TIFF short value","Reads a TIFF slong value","","Reads a TIFF sshort value","Reads a string","Loads the IFD at the specified index in the list, if one …","Number of strips in image","Number of tiles in image","","","","","","","","","","","","","","","","","","A configuration that does not impose any limits.","","","","","","","","","","","","","","","","","","","","","","","","Type representing an Image File Directory","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Low level interface to encode ifd directories.","","Type to represent tiff values of type <code>IFD</code>","Type to represent tiff values of type <code>IFD8</code>","Type to encode images strip by strip.","Needed for the <code>convert_slice</code> method.","The type of offset fields, <code>u32</code> for normal Tiff, <code>u64</code> for …","Type to represent tiff values of type <code>RATIONAL</code>","Type to represent tiff values of type <code>SRATIONAL</code>","Encoder for Tiff and BigTiff files.","Trait to abstract over Tiff/BigTiff differences.","Create a BigTiff file.","Create a standard Tiff file.","Trait for types that can be encoded in a tiff file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a file offset to <code>Self::OffsetType</code>.","","","Internal helper method for satisfying Rust’s type …","","","","","","","","","","Access this value as an contiguous sequence of bytes. If …","","","","","","","Get a reference of the underlying <code>DirectoryEncoder</code>","Write out the ifd directory.","Write out image and ifd directory.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new encoder for standard Tiff files.","Creates a new encoder for BigTiff files.","Create a <code>DirectoryEncoder</code> to encode an ifd directory.","Creates a new Tiff or BigTiff encoder, inferred from the …","Create an <code>ImageEncoder</code> to encode an image one slice at a …","Create an <code>ImageEncoder</code> to encode an image one slice at a …","Number of samples the next strip should have.","Set image resolution","Set image resolution unit","Set image number of lines per strip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write this value to a TiffWriter. While the default …","Write this value to a TiffWriter. While the default …","","","","","Write some data to the tiff file, the offset of the data …","Write strips from data","Write the IFD entry count field with the given <code>count</code> value.","","","Write the (Big)Tiff header.","","","Convenience function to write an entire image from memory.","Convenience function to write an entire image from memory …","Write an offset value to the given writer.","","","Write a single strip.","Write a single ifd tag.","Set image x-resolution","Set image y-resolution","The value of the tiff tag <code>BitsPerSample</code>","","","","","","","Trait for different colortypes that can be encoded.","","","","","","","","","","","The type of each sample of this colortype","","","","","","","","","","","","","The value of the tiff tag <code>SampleFormat</code>","The value of the tiff tag <code>PhotometricInterpretation</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The conserative choice between speed and ratio.","The best compression available with Deflate.","The corresponding tag to the algorithm.","An algorithm used for compression with associated enums …","An algorithm used for compression","An enum to store each compression algorithm.","The Deflate algorithm used to compress image data in TIFF …","","The level of compression used by the Deflate algorithm. It …","The fastest possible compression mode.","The LZW algorithm used to compress image data in TIFF …","","Compressor that uses the Packbits algorithm to compress …","","The default algorithm which does not compress at all.","","","","","","","","","","","","","","","","","","","","","","","","","The default compression strategy does not apply any …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Method to optain a type that can store each variant of …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Create a new deflate compressor with a specific level of …","The algorithm writes data directly into the writer. It …","","","","","","","","","","8-bit byte that contains a 7-bit ASCII code; the last byte …","","8-bit unsigned integer","","","","","","","","","","","See TIFF compression tags for reference.","","64-bit IEEE floating point","","","","32-bit IEEE floating point","","","","","","","","","","","","","","","","","32-bit unsigned integer (offset)","BigTIFF 64-bit unsigned integer (offset)","","","","","","","","32-bit unsigned integer","BigTIFF 64-bit unsigned integer","","","","","","","","","","","","","","","","","","","","","","","","Fraction stored as two 32-bit unsigned integers","","","Type to represent resolution units","","","8-bit signed integer","16-bit unsigned integer","32-bit signed integer","BigTIFF 64-bit signed integer","","","Fraction stored as two 32-bit signed integers","16-bit signed integer","","","","","","","","TIFF tags","","","","","","","The type of an IFD entry (a 2 byte field).","8-bit byte that may contain anything, depending on the …","","A private or extension tag","An unknown extension sample format","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,6,0,4,5,4,1,6,6,5,4,4,4,1,5,13,13,4,4,4,1,4,1,6,6,6,4,4,4,4,0,0,0,4,4,0,4,5,5,4,4,5,5,5,5,1,5,5,5,5,5,0,1,1,4,5,13,6,1,4,5,13,6,1,4,5,6,4,5,6,0,1,0,4,5,6,1,1,4,4,5,5,13,13,6,1,1,1,1,1,1,1,1,1,1,4,5,13,6,5,6,1,4,5,13,6,1,0,4,5,6,1,4,5,13,1,4,5,13,6,1,4,5,13,6,1,4,5,13,6,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,87,97,98,97,98,99,100,101,102,103,104,105,106,107,108,109,101,110,111,110,0,0,0,0,25,23,25,23,25,23,25,23,25,23,25,23,0,30,30,25,23,25,23,25,23,25,23,23,25,23,30,31,28,25,23,30,31,28,28,28,28,30,31,30,31,28,31,31,28,30,28,28,28,23,30,31,28,0,0,25,23,30,31,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,31,31,25,23,30,31,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,30,31,25,23,30,31,28,25,23,30,31,28,25,23,30,31,28,31,28,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,34,34,0,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,0,34,47,34,47,34,47,34,47,34,34,47,34,47,34,47,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,47,47,34,47,34,47,34,47,34,47,47,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,141,142,143,144,49,50,65,0,65,0,0,0,55,55,0,0,0,0,0,0,0,61,56,59,60,62,49,50,51,52,61,56,59,60,62,49,50,51,52,65,65,49,50,51,52,49,50,51,52,0,0,55,60,62,55,60,62,65,49,50,51,52,51,52,65,49,50,51,52,56,59,59,56,59,61,56,59,60,62,49,50,51,52,61,56,59,60,62,49,50,51,52,51,52,61,61,61,61,61,61,59,59,59,59,49,50,51,52,61,56,59,60,62,49,50,51,52,61,56,59,60,62,49,50,51,52,61,56,59,60,62,49,50,51,52,65,65,49,50,51,52,56,59,55,60,62,55,60,62,61,61,55,60,62,59,56,59,59,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,57,57,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,67,67,58,0,0,0,0,71,0,67,0,71,0,71,0,71,71,66,67,68,69,63,71,66,67,68,69,63,66,67,68,69,63,66,67,68,69,63,67,71,66,67,68,69,63,67,68,69,63,66,67,68,69,63,71,66,67,68,69,63,58,66,68,69,63,71,66,67,68,69,63,67,66,67,68,69,63,71,66,67,68,69,63,71,66,67,68,69,63,71,66,67,68,69,63,66,176,71,66,68,69,63,177,178,179,180,48,33,48,33,73,73,73,33,33,64,74,33,33,0,33,48,33,72,33,48,72,72,33,75,33,33,33,33,33,33,33,33,75,33,72,76,48,48,33,33,33,64,76,72,33,48,48,72,33,33,33,33,33,33,33,72,33,72,75,64,72,33,72,0,33,74,0,33,0,33,48,73,73,0,33,33,48,48,48,48,33,33,48,48,0,33,33,33,33,33,33,0,33,33,33,33,33,73,0,48,76,33,76,76,73,33,73,33,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,33,48,72,73,74,75,64,76,181,182],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[4,4],[5,5],[6,6],[[]],[[]],[[]],0,[1,7],0,[[4,4],8],[[5,5],8],[[6,6],8],[[1,9],10],[[1,9],[[12,[11]]]],[[4,9],10],[[4,9],[[12,[11]]]],[[5,9],[[12,[11]]]],[[5,9],10],[[13,9],10],[[13,9],10],[[6,9],10],[14,1],[15,1],[16,1],[13,1],[5,1],[4,1],[17,1],[18,1],[19,1],[[]],[[]],[[]],[[]],[[]],[5],[6],[[]],[[]],[[]],[[]],[[]],[20],0,[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[23,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[28,[[0,[26,27]]]],29]],[[[28,[[0,[26,27]]]]]],[30,30],[31,31],[[]],[[]],[[[28,[[0,[26,27]]]]],[[32,[6]]]],0,[[],31],[[[28,[[0,[26,27]]]]],32],[[30,30],8],[[[28,[[0,[26,27]]]],33],[[32,[[3,[34]]]]]],[[[28,[[0,[26,27]]]],33],[[32,[[3,[[36,[35]]]]]]]],[[[28,[[0,[26,27]]]],33],[[32,[[3,[[37,[[36,[35]]]]]]]]]],[[23,9],10],[[30,9],10],[[31,9],10],[[[28,[38]],9],10],[24],[24],[[]],[[]],[[]],[[]],[[]],[[[28,[[0,[26,27]]]]],30],[[[28,[[0,[26,27]]]],33],[[32,[34]]]],[[[28,[[0,[26,27]]]],33],[[32,[21]]]],[[[28,[[0,[26,27]]]],33],[[32,[39]]]],[[[28,[[0,[26,27]]]],33],[[32,[[37,[39]]]]]],[[[28,[[0,[26,27]]]],33],[[32,[40]]]],[[[28,[[0,[26,27]]]],33],[[32,[[37,[40]]]]]],[[[28,[[0,[26,27]]]],33],[[32,[[37,[41]]]]]],[[[28,[[0,[26,27]]]],33],[[32,[29]]]],[[[28,[[0,[26,27]]]],33],[[32,[[37,[29]]]]]],[[[28,[[0,[26,27]]]],33],[[32,[35]]]],[[[28,[[0,[26,27]]]],33],[[32,[[37,[35]]]]]],[[[28,[[0,[26,27]]]],33],[[32,[[37,[42]]]]]],[[[28,[[0,[26,27]]]],33],[[32,[[36,[35]]]]]],[[[28,[[0,[26,27]]]],29],43],[[[28,[[0,[26,27]]]],35],43],0,0,0,[[]],[[]],[[]],[[]],[[]],[[[28,[[0,[26,27]]]]],8],[[[0,[26,27]]],[[32,[[28,[[0,[26,27]]]]]]]],[[[28,[[0,[26,27]]]]],32],[[[28,[[0,[26,27]]]]],[[12,[42,19]]]],[[[28,[[0,[26,27]]]],29],[[32,[23]]]],[[[28,[[0,[26,27]]]],25,29,24],32],[[[28,[[0,[26,27]]]]],[[12,[40,19]]]],[[[28,[[0,[26,27]]]]],[[12,[39,19]]]],[[[28,[[0,[26,27]]]]],[[12,[35,19]]]],[[[28,[[0,[26,27]]]]],[[32,[23]]]],[[[28,[[0,[26,27]]]]],[[12,[29,19]]]],[[[28,[[0,[26,27]]]]],[[12,[35,19]]]],[[[28,[[0,[26,27]]]]],32],[[[28,[[0,[26,27]]]]],[[12,[19]]]],[[[28,[[0,[26,27]]]]],[[12,[41,19]]]],[[[28,[[0,[26,27]]]]],[[12,[44,19]]]],[[[28,[[0,[26,27]]]]],[[12,[45,19]]]],[[[28,[[0,[26,27]]]]],[[12,[46,19]]]],[[[28,[[0,[26,27]]]],24],[[32,[21]]]],[[[28,[[0,[26,27]]]],24],32],[[[28,[[0,[26,27]]]]],[[32,[29]]]],[[[28,[[0,[26,27]]]]],[[32,[29]]]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],22],[[],22],[[],22],[[],22],[[],22],[[],31],[[[28,[[0,[26,27]]]],31],[[28,[[0,[26,27]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[34,34],[47,47],[[]],[[]],[[34,34],8],[[34,9],10],[[47,9],[[12,[11]]]],[[]],[[]],[[]],[[]],[34,[[32,[39]]]],[34,[[32,[[37,[39]]]]]],[34,[[32,[40]]]],[34,[[32,[[37,[40]]]]]],[34,[[32,[44]]]],[34,[[32,[[37,[44]]]]]],[34,[[32,[45]]]],[34,[[32,[[37,[45]]]]]],[34,[[32,[21]]]],[34,[[32,[41]]]],[34,[[32,[[37,[41]]]]]],[34,[[32,[29]]]],[34,[[32,[[37,[29]]]]]],[34,[[32,[35]]]],[34,[[32,[[37,[35]]]]]],[34,[[32,[42]]]],[34,[[32,[[37,[42]]]]]],[[48,29],47],[[48,35],47],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],22],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[49,49],[50,50],[51,51],[52,52],[[]],[[]],[[]],[[]],0,0,[35,32],[35,32],[35,32],[[]],[[]],[[]],[[],24],[49,24],[50,24],[51,24],[52,24],0,0,[[],53],[49,53],[50,53],[51,53],[52,53],[[[56,[[0,[54,27]],55]]]],[[[59,[[0,[54,27]],57,55,58]]]],[[[59,[[0,[54,27]],57,55,58]]],56],[[[56,[[0,[54,27]],55]]],32],[[[59,[[0,[54,27]],57,55,58]]],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[0,[54,27]]],[[32,[[61,[[0,[54,27]],60]]]]]],[[[0,[54,27]]],[[32,[[61,[[0,[54,27]],62]]]]]],[[[61,[[0,[54,27]],55]]],[[32,[[56,[[0,[54,27]],55]]]]]],[[[0,[54,27]]],[[32,[[61,[[0,[54,27]],55]]]]]],[[[61,[[0,[54,27]],55]],29,29],[[32,[[59,[[0,[54,27]],57,55,63]]]]]],[[[61,[[0,[54,27]],55]],29,29,58],[[32,[[59,[[0,[54,27]],57,55,58]]]]]],[[[59,[[0,[54,27]],57,55,58]]],35],[[[59,[[0,[54,27]],57,55,58]],64,51]],[[[59,[[0,[54,27]],57,55,58]],64]],[[[59,[[0,[54,27]],57,55,58]],29],32],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0,[[[56,[[0,[54,27]],55]],65],[[32,[35]]]],[[[59,[[0,[54,27]],57,55,58]]],32],0,0,0,0,0,0,[[[61,[[0,[54,27]],55]],29,29],32],[[[61,[[0,[54,27]],55]],29,29,58],32],0,0,0,[[[59,[[0,[54,27]],57,55,58]]],32],[[[56,[[0,[54,27]],55]],33,65],32],[[[59,[[0,[54,27]],57,55,58]],51]],[[[59,[[0,[54,27]],57,55,58]],51]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,66],[67,67],[68,68],[69,69],[63,63],[[]],[[]],[[]],[[]],[[]],[[67,67],70],[[],71],[[],66],[[],67],[[],68],[[],69],[[],63],[[67,67],8],[[68,68],8],[[69,69],8],[[63,63],8],[[66,9],10],[[67,9],10],[[68,9],10],[[69,9],10],[[63,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[],71],[66,71],[68,71],[69,71],[63,71],[[]],[[]],[[]],[[]],[[]],[[]],[[67,67],[[3,[70]]]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[67,66],[[],[[12,[35,19]]]],[71,[[12,[35,19]]]],[66,[[12,[35,19]]]],[68,[[12,[35,19]]]],[69,[[12,[35,19]]]],[63,[[12,[35,19]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[48,48],[72,72],[73,73],[74,74],[75,75],[64,64],[76,76],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[33,33],8],[[48,48],8],[[72,72],8],[[73,73],8],[[74,74],8],[[75,75],8],[[64,64],8],[[76,76],8],[[33,9],10],[[48,9],10],[[72,9],10],[[73,9],10],[[74,9],10],[[75,9],10],[[64,9],10],[[76,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,[[3,[33]]]],[41,[[3,[48]]]],[41,[[3,[72]]]],[41,[[3,[73]]]],[41,[[3,[74]]]],[41,[[3,[75]]]],[41,[[3,[64]]]],[41,[[3,[76]]]],[41,33],[41,76],[33],[48],[72],[73],[74],[75],[64],[76],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,41],[48,41],[72,41],[73,41],[74,41],[75,41],[64,41],[76,41],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0,0],"p":[[4,"TiffError"],[8,"Error"],[4,"Option"],[4,"TiffFormatError"],[4,"TiffUnsupportedError"],[4,"ColorType"],[15,"str"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[4,"UsageError"],[4,"Error"],[4,"LzwError"],[3,"TryFromIntError"],[3,"FromUtf8Error"],[3,"Utf8Error"],[3,"Error"],[3,"Demand"],[3,"String"],[3,"TypeId"],[4,"DecodingResult"],[15,"usize"],[4,"DecodingBuffer"],[8,"Read"],[8,"Seek"],[3,"Decoder"],[15,"u32"],[4,"ChunkType"],[3,"Limits"],[6,"TiffResult"],[4,"Tag"],[4,"Value"],[15,"u64"],[8,"TryFrom"],[3,"Vec"],[8,"Debug"],[15,"f32"],[15,"f64"],[15,"u16"],[15,"u8"],[6,"Result"],[15,"i32"],[15,"i64"],[15,"i16"],[3,"Entry"],[4,"Type"],[3,"Ifd"],[3,"Ifd8"],[3,"Rational"],[3,"SRational"],[4,"Cow"],[8,"Write"],[8,"TiffKind"],[3,"DirectoryEncoder"],[8,"ColorType"],[8,"Compression"],[3,"ImageEncoder"],[3,"TiffKindStandard"],[3,"TiffEncoder"],[3,"TiffKindBig"],[3,"Uncompressed"],[4,"ResolutionUnit"],[8,"TiffValue"],[3,"Deflate"],[4,"DeflateLevel"],[3,"Lzw"],[3,"Packbits"],[4,"Ordering"],[4,"Compressor"],[4,"CompressionMethod"],[4,"PhotometricInterpretation"],[4,"PlanarConfiguration"],[4,"Predictor"],[4,"SampleFormat"],[13,"Gray"],[13,"RGB"],[13,"Palette"],[13,"GrayA"],[13,"RGBA"],[13,"CMYK"],[13,"FormatError"],[13,"UnsupportedError"],[13,"IoError"],[13,"UsageError"],[13,"InvalidDimensions"],[13,"InvalidTagValueType"],[13,"RequiredTagNotFound"],[13,"UnknownPredictor"],[13,"ByteExpected"],[13,"UnsignedIntegerExpected"],[13,"SignedIntegerExpected"],[13,"Format"],[13,"RequiredTagEmpty"],[13,"JpegDecoder"],[13,"UnexpectedCompressedData"],[13,"InconsistentStripSamples"],[13,"FloatingPointPredictor"],[13,"HorizontalPredictor"],[13,"InterpretationWithBits"],[13,"UnsupportedCompressionMethod"],[13,"UnsupportedSampleDepth"],[13,"UnsupportedSampleFormat"],[13,"UnsupportedColorType"],[13,"UnsupportedBitsPerChannel"],[13,"UnsupportedPlanarConfig"],[13,"UnsupportedInterpretation"],[13,"UnsupportedJpegFeature"],[13,"InvalidChunkType"],[13,"InvalidChunkIndex"],[13,"U8"],[13,"U16"],[13,"U32"],[13,"U64"],[13,"F32"],[13,"F64"],[13,"I8"],[13,"I16"],[13,"I32"],[13,"I64"],[13,"U8"],[13,"U16"],[13,"U32"],[13,"U64"],[13,"F32"],[13,"F64"],[13,"I8"],[13,"I16"],[13,"I32"],[13,"I64"],[13,"Byte"],[13,"Short"],[13,"Signed"],[13,"SignedBig"],[13,"Unsigned"],[13,"UnsignedBig"],[13,"Float"],[13,"Double"],[13,"List"],[13,"Rational"],[13,"RationalBig"],[13,"SRational"],[13,"SRationalBig"],[13,"Ascii"],[13,"Ifd"],[13,"IfdBig"],[3,"Gray8"],[3,"GrayI8"],[3,"Gray16"],[3,"GrayI16"],[3,"Gray32"],[3,"GrayI32"],[3,"Gray32Float"],[3,"Gray64"],[3,"GrayI64"],[3,"Gray64Float"],[3,"RGB8"],[3,"RGB16"],[3,"RGB32"],[3,"RGB32Float"],[3,"RGB64"],[3,"RGB64Float"],[3,"RGBA8"],[3,"RGBA16"],[3,"RGBA32"],[3,"RGBA32Float"],[3,"RGBA64"],[3,"RGBA64Float"],[3,"CMYK8"],[3,"CMYK16"],[3,"CMYK32"],[3,"CMYK32Float"],[3,"CMYK64"],[3,"CMYK64Float"],[8,"CompressionAlgorithm"],[13,"Uncompressed"],[13,"Lzw"],[13,"Deflate"],[13,"Packbits"],[13,"Unknown"],[13,"Unknown"]]},\
"time":{"doc":"Feature flags","t":[12,13,13,18,3,13,3,2,13,13,18,3,13,13,13,18,18,18,18,18,18,18,18,18,18,13,13,13,4,18,13,13,3,3,6,18,13,13,13,13,3,13,18,18,3,18,13,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,3,13,3,13,4,4,13,13,13,13,13,13,4,13,13,13,3,13,13,4,4,13,13,13,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,13,13,13,13,3,13,13,13,13,3,13,13,3,4,13,13,13,3,3,3,13,13,3,4,3,3,13,13,13,13,13,3,4,13,13,13,13,3,4,3,4,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,13,3,18,18,13,4,13,13,6,4,13,13,3,13,13,13,13,4,13,18,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5],"n":["0","April","August","DAY","Date","December","Duration","Error","February","Friday","HOUR","Instant","January","July","June","MAX","MAX","MAX","MICROSECOND","MIDNIGHT","MILLISECOND","MIN","MIN","MIN","MINUTE","March","May","Monday","Month","NANOSECOND","November","October","OffsetDateTime","PrimitiveDateTime","Result","SECOND","Saturday","September","Sunday","Thursday","Time","Tuesday","UNIX_EPOCH","UTC","UtcOffset","WEEK","Wednesday","Weekday","ZERO","abs","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_hms","as_hms","as_hms","as_hms_micro","as_hms_micro","as_hms_milli","as_hms_milli","as_hms_nano","as_hms_nano","as_ref","as_seconds_f32","as_seconds_f64","assume_offset","assume_utc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_add","checked_add","checked_add","checked_div","checked_mul","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","date","date","day","day","day","days","default","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","elapsed","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","ext","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format","format","format_description","format_into","format_into","format_into","format_into","format_into","formatting","from","from","from","from","from","from","from","from","from","from","from","from_calendar_date","from_hms","from_hms","from_hms_micro","from_hms_milli","from_hms_nano","from_iso_week_date","from_julian_day","from_ordinal_date","from_str","from_str","from_unix_timestamp","from_unix_timestamp_nanos","from_whole_seconds","hash","hash","hash","hash","hash","hash","hash","hash","hash","hour","hour","hour","hours","into","into","into","into","into","into","into","into","into","into_inner","is_negative","is_negative","is_positive","is_positive","is_utc","is_zero","iso_week","iso_week","iso_week","microsecond","microsecond","microsecond","microseconds","midnight","millisecond","millisecond","millisecond","milliseconds","minute","minute","minute","minutes","minutes_past_hour","monday_based_week","monday_based_week","monday_based_week","month","month","month","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nanosecond","nanosecond","nanosecond","nanoseconds","neg","neg","new","new","next","next","next_day","now","now_utc","number_days_from_monday","number_days_from_sunday","number_from_monday","number_from_sunday","offset","ordinal","ordinal","ordinal","parse","parse","parse","parse","parse","parsing","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","previous","previous","previous_day","replace_date","replace_date","replace_date_time","replace_day","replace_day","replace_day","replace_hour","replace_hour","replace_hour","replace_microsecond","replace_microsecond","replace_microsecond","replace_millisecond","replace_millisecond","replace_millisecond","replace_minute","replace_minute","replace_minute","replace_month","replace_month","replace_month","replace_nanosecond","replace_nanosecond","replace_nanosecond","replace_offset","replace_second","replace_second","replace_second","replace_time","replace_time","replace_year","replace_year","replace_year","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","saturating_sub","saturating_sub","second","second","second","seconds","seconds_f32","seconds_f64","seconds_past_minute","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","subsec_microseconds","subsec_milliseconds","subsec_nanoseconds","sum","sum","sunday_based_week","sunday_based_week","sunday_based_week","time","time","time_fn","to_calendar_date","to_calendar_date","to_calendar_date","to_hms","to_hms_micro","to_hms_milli","to_hms_nano","to_iso_week_date","to_iso_week_date","to_iso_week_date","to_julian_day","to_julian_day","to_julian_day","to_offset","to_ordinal_date","to_ordinal_date","to_ordinal_date","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unix_timestamp","unix_timestamp_nanos","unsigned_abs","util","weekday","weekday","weekday","weeks","whole_days","whole_hours","whole_hours","whole_microseconds","whole_milliseconds","whole_minutes","whole_minutes","whole_nanoseconds","whole_seconds","whole_seconds","whole_weeks","with_hms","with_hms_micro","with_hms_milli","with_hms_nano","with_time","year","year","year","ComponentRange","ComponentRange","ComponentRange","ConversionRange","ConversionRange","DifferentVariant","DifferentVariant","Error","Format","Format","InsufficientInformation","InsufficientTypeInformation","InvalidComponent","InvalidComponent","InvalidComponentName","InvalidFormatDescription","InvalidFormatDescription","InvalidLiteral","InvalidModifier","InvalidVariant","InvalidVariant","MissingComponentName","Parse","ParseFromDescription","ParseFromDescription","ParseFromDescription","StdIo","TryFromParsed","TryFromParsed","TryFromParsed","UnclosedOpeningBracket","UnexpectedTrailingCharacters","UnexpectedTrailingCharacters","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","into","is_conditional","name","provide","provide","provide","provide","provide","provide","provide","provide","provide","provide","source","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","index","index","index","index","name","value","0","0","0","0","NumericalDuration","NumericalStdDuration","days","hours","microseconds","milliseconds","minutes","nanoseconds","seconds","std_days","std_hours","std_microseconds","std_milliseconds","std_minutes","std_nanoseconds","std_seconds","std_weeks","weeks","Component","Component","Component","Compound","Compound","Day","First","First","FormatItem","Hour","Literal","Literal","Minute","Month","OffsetHour","OffsetMinute","OffsetSecond","Optional","Optional","Ordinal","OwnedFormatItem","Period","Second","Subsecond","WeekNumber","Weekday","Year","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","into","into","into","modifier","parse","parse_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","well_known","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","Day","Eight","Five","Four","Full","Hour","Iso","LastTwo","Long","Long","Minute","Monday","Monday","Month","MonthRepr","Nine","None","Numerical","OffsetHour","OffsetMinute","OffsetSecond","One","OneOrMore","Ordinal","Padding","Period","Second","Seven","Short","Short","Six","Space","Subsecond","SubsecondDigits","Sunday","Sunday","Three","Two","WeekNumber","WeekNumberRepr","Weekday","WeekdayRepr","Year","YearRepr","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_sensitive","case_sensitive","case_sensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","digits","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_12_hour_clock","is_uppercase","iso_week_based","one_indexed","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","repr","repr","repr","repr","sign_is_mandatory","sign_is_mandatory","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Iso8601","Rfc2822","Rfc3339","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","iso8601","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Calendar","Config","DEFAULT","DEFAULT","Date","DateKind","DateTime","DateTimeOffset","EncodedConfig","FormattedComponents","Hour","Hour","Iso8601","Minute","Minute","None","Offset","OffsetPrecision","Ordinal","PARSING","Second","Time","TimeOffset","TimePrecision","Week","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","encode","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","set_date_kind","set_formatted_components","set_offset_precision","set_time_precision","set_use_separators","set_year_is_six_digits","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","decimal_digits","decimal_digits","decimal_digits","Formattable","Parsable","Parsed","borrow","borrow_mut","clone","clone_into","day","fmt","from","hour_12","hour_12_is_pm","hour_24","into","iso_week_number","iso_year","iso_year_last_two","minute","monday_week_number","month","new","offset_hour","offset_minute","offset_minute_signed","offset_second","offset_second_signed","ordinal","parse_component","parse_item","parse_items","parse_literal","second","set_day","set_hour_12","set_hour_12_is_pm","set_hour_24","set_iso_week_number","set_iso_year","set_iso_year_last_two","set_minute","set_monday_week_number","set_month","set_offset_hour","set_offset_minute","set_offset_minute_signed","set_offset_second","set_offset_second_signed","set_ordinal","set_second","set_subsecond","set_sunday_week_number","set_weekday","set_year","set_year_last_two","subsecond","sunday_week_number","to_owned","try_from","try_into","type_id","weekday","with_day","with_hour_12","with_hour_12_is_pm","with_hour_24","with_iso_week_number","with_iso_year","with_iso_year_last_two","with_minute","with_monday_week_number","with_month","with_offset_hour","with_offset_minute","with_offset_minute_signed","with_offset_second","with_offset_second_signed","with_ordinal","with_second","with_subsecond","with_sunday_week_number","with_weekday","with_year","with_year_last_two","year","year_last_two","days_in_year","days_in_year_month","is_leap_year","weeks_in_year"],"q":["timetime::errortime::error::Error","","","","","","","","time::error::Format","","time::error::InvalidFormatDescription","","","","","","time::error::Parse","","time::error::ParseFromDescription","time::error::TryFromParsed","time::ext","","","","","","","","","","","","","","","","","","time::format_description","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","time::format_description::Component","","","","","","","","","","","","","","time::format_description::FormatItem","","","","","time::format_description::OwnedFormatItem","","","","","time::format_description::modifiertime::format_description::well_known","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","time::format_description::well_known::iso8601","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","time::format_description::well_known::iso8601::TimePrecision","","","time::formatting","time::parsing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","time::util","","",""],"d":["","","","Equivalent to <code>1.days()</code>.","Date in the proleptic Gregorian calendar.","","A span of time with nanosecond precision.","","","","Equivalent to <code>1.hours()</code>.","A measurement of a monotonically non-decreasing clock. …","","","","The maximum valid <code>Date</code>.","The maximum possible duration. Adding any positive …","The largest value that can be represented by …","Equivalent to <code>1.microseconds()</code>.","Create a <code>Time</code> that is exactly midnight.","Equivalent to <code>1.milliseconds()</code>.","The minimum valid <code>Date</code>.","The minimum possible duration. Adding any negative …","The smallest value that can be represented by …","Equivalent to <code>1.minutes()</code>.","","","","Months of the year.","Equivalent to <code>1.nanoseconds()</code>.","","","A <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.","Combined date and time.","An alias for <code>std::result::Result</code> with a generic error from …","Equivalent to <code>1.seconds()</code>.","","","","","The clock time within a given date. Nanosecond precision.","","Midnight, 1 January, 1970 (UTC).","A <code>UtcOffset</code> that is UTC.","An offset from UTC.","Equivalent to <code>1.weeks()</code>.","","Days of the week.","Equivalent to <code>0.seconds()</code>.","Get the absolute value of the duration.","","","","","","","","","","Add the sub-day time of the <code>Duration</code> to the <code>Time</code>. Wraps on …","Add the sub-day time of the <code>std::time::Duration</code> to the <code>Time</code>…","","","","","","","","","","","","","Get the clock hour, minute, and second.","Get the clock hour, minute, and second.","Obtain the UTC offset as its hours, minutes, and seconds. …","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and nanosecond.","Get the clock hour, minute, second, and nanosecond.","","Get the number of fractional seconds in the duration.","Get the number of fractional seconds in the duration.","Assuming that the existing <code>PrimitiveDateTime</code> represents a …","Assuming that the existing <code>PrimitiveDateTime</code> represents a …","","","","","","","","","","","","","","","","","","","","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self + rhs</code>, returning <code>None</code> if an overflow …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code> or if the …","Computes <code>self * rhs</code>, returning <code>None</code> if an overflow …","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Computes <code>self - rhs</code>, returning <code>None</code> if an overflow …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","","","","","","","","","","","","","","","","","","","","","","","","","","Get the <code>Date</code> in the stored offset.","Get the <code>Date</code> component of the <code>PrimitiveDateTime</code>.","Get the day of the month.","Get the day of the date in the stored offset.","Get the day of the date.","Create a new <code>Duration</code> with the given number of days. …","","","","","","","","","","","","","","","","","","","","Returns the amount of time elapsed since this instant was …","","","","","","","","","","","","","Various error types returned by methods in the time crate.","Extension traits.","","","","","","","","","","","","","","","","","","Format the <code>Date</code> using the provided format description.","Format the <code>OffsetDateTime</code> using the provided format …","Format the <code>PrimitiveDateTime</code> using the provided format …","Format the <code>Time</code> using the provided format description.","Format the <code>UtcOffset</code> using the provided format description.","Description of how types should be formatted and parsed.","Format the <code>Date</code> using the provided format description.","Format the <code>OffsetDateTime</code> using the provided format …","Format the <code>PrimitiveDateTime</code> using the provided format …","Format the <code>Time</code> using the provided format description.","Format the <code>UtcOffset</code> using the provided format description.","Formatting for various types.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempt to create a <code>Date</code> from the year, month, and day.","Attempt to create a <code>Time</code> from the hour, minute, and second.","Create a <code>UtcOffset</code> representing an offset by the number of …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Date</code> from the ISO year, week, and …","Create a <code>Date</code> from the Julian day.","Attempt to create a <code>Date</code> from the year and ordinal day …","","","Create an <code>OffsetDateTime</code> from the provided Unix timestamp. …","Construct an <code>OffsetDateTime</code> from the provided Unix …","Create a <code>UtcOffset</code> representing an offset by the number of …","","","","","","","","","","Get the clock hour in the stored offset.","Get the clock hour.","Get the clock hour.","Create a new <code>Duration</code> with the given number of hours. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Obtain the inner <code>std::time::Instant</code>.","Check if a duration is negative.","Check if the offset is negative, or west of UTC.","Check if a duration is positive.","Check if the offset is positive, or east of UTC.","Check if the offset is exactly UTC.","Check if a duration is exactly zero.","Get the ISO week number.","Get the ISO week number of the date in the stored offset.","Get the ISO week number.","Get the microseconds within the second in the stored …","Get the microseconds within the second.","Get the microseconds within the second.","Create a new <code>Duration</code> with the given number of …","Create a <code>PrimitiveDateTime</code> using the existing date. The …","Get the milliseconds within the second in the stored …","Get the milliseconds within the second.","Get the milliseconds within the second.","Create a new <code>Duration</code> with the given number of …","Get the minute within the hour in the stored offset.","Get the minute within the hour.","Get the minute within the hour.","Create a new <code>Duration</code> with the given number of minutes. …","Obtain the number of minutes past the hour the offset is …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the month.","Get the month of the date in the stored offset.","Get the month of the date.","","","","","","","","","","","","","","","","","Get the nanoseconds within the second in the stored offset.","Get the nanoseconds within the second.","Get the nanoseconds within the second.","Create a new <code>Duration</code> with the given number of nanoseconds.","","","Create a new <code>Duration</code> with the provided seconds and …","Create a new <code>PrimitiveDateTime</code> from the provided <code>Date</code> and …","Get the next month.","Get the next weekday.","Get the next calendar date.","Returns an <code>Instant</code> corresponding to “now”.","Create a new <code>OffsetDateTime</code> with the current date and time …","Get the zero-indexed number of days from Monday.","Get the zero-indexed number of days from Sunday.","Get the one-indexed number of days from Monday.","Get the one-indexed number of days from Sunday.","Get the <code>UtcOffset</code>.","Get the day of the year.","Get the day of the year of the date in the stored offset.","Get the day of the year.","Parse a <code>Date</code> from the input using the provided format …","Parse an <code>OffsetDateTime</code> from the input using the provided …","Parse a <code>PrimitiveDateTime</code> from the input using the …","Parse a <code>Time</code> from the input using the provided format …","Parse a <code>UtcOffset</code> from the input using the provided format …","Parsing for various types.","","","","","","","","","","","Get the previous month.","Get the previous weekday.","Get the previous calendar date.","Replace the date, which is assumed to be in the stored …","Replace the date, preserving the time.","Replace the date and time, which are assumed to be in the …","Replace the day of the month.","Replace the day of the month.","Replace the day of the month.","Replace the clock hour.","Replace the clock hour.","Replace the clock hour.","Replace the microseconds within the second.","Replace the microseconds within the second.","Replace the microseconds within the second.","Replace the milliseconds within the second.","Replace the milliseconds within the second.","Replace the milliseconds within the second.","Replace the minutes within the hour.","Replace the minutes within the hour.","Replace the minutes within the hour.","Replace the month of the year.","Replace the month of the year.","Replace the month of the year.","Replace the nanoseconds within the second.","Replace the nanoseconds within the second.","Replace the nanoseconds within the second.","Replace the offset. The date and time components remain …","Replace the seconds within the minute.","Replace the seconds within the minute.","Replace the seconds within the minute.","Replace the time, which is assumed to be in the stored …","Replace the time, preserving the date.","Replace the year. The month and day will be unchanged.","Replace the year. The month and day will be unchanged.","Replace the year. The month and day will be unchanged.","Computes <code>self + duration</code>, saturating value on overflow.","Computes <code>self + rhs</code>, saturating if an overflow occurred.","Computes <code>self + duration</code>, saturating value on overflow.","Computes <code>self + duration</code>, saturating value on overflow.","Computes <code>self * rhs</code>, saturating if an overflow occurred.","Computes <code>self - duration</code>, saturating value on overflow.","Computes <code>self - rhs</code>, saturating if an overflow occurred.","Computes <code>self - duration</code>, saturating value on overflow.","Computes <code>self - duration</code>, saturating value on overflow.","Get the second within the minute in the stored offset.","Get the second within the minute.","Get the second within the minute.","Create a new <code>Duration</code> with the given number of seconds.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Obtain the number of seconds past the minute the offset is …","","","","","","","","","","","","","","","","Subtract the sub-day time of the <code>Duration</code> from the <code>Time</code>. …","Subtract the sub-day time of the <code>std::time::Duration</code> from …","Subtract two <code>Time</code>s, returning the <code>Duration</code> between. This …","","","","","","","","","","","","","Get the number of microseconds past the number of whole …","Get the number of milliseconds past the number of whole …","Get the number of nanoseconds past the number of whole …","","","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the <code>Time</code> in the stored offset.","Get the <code>Time</code> component of the <code>PrimitiveDateTime</code>.","Runs a closure, returning the duration of time it took to …","Get the year, month, and day.","Get the year, month, and day.","Get the year, month, and day.","Get the clock hour, minute, and second.","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and nanosecond.","Get the ISO 8601 year, week number, and weekday.","Get the ISO 8601 year, week number, and weekday.","Get the ISO 8601 year, week number, and weekday.","Get the Julian day for the date.","Get the Julian day for the date. The time is not taken …","Get the Julian day for the date. The time is not taken …","Convert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …","Get the year and ordinal day number.","Get the year and ordinal day number.","Get the year and ordinal day number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the Unix timestamp.","Get the Unix timestamp in nanoseconds.","Convert the existing <code>Duration</code> to a <code>std::time::Duration</code> and …","Utility functions.","Get the weekday.","Get the weekday of the date in the stored offset.","Get the weekday.","Create a new <code>Duration</code> with the given number of weeks. …","Get the number of whole days in the duration.","Get the number of whole hours in the duration.","Obtain the number of whole hours the offset is from UTC. A …","Get the number of whole microseconds in the duration.","Get the number of whole milliseconds in the duration.","Get the number of whole minutes in the duration.","Obtain the number of whole minutes the offset is from UTC. …","Get the number of nanoseconds in the duration.","Get the number of whole seconds in the duration.","Obtain the number of whole seconds the offset is from UTC. …","Get the number of whole weeks in the duration.","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Create a <code>PrimitiveDateTime</code> using the existing date and the …","Get the year of the date.","Get the year of the date in the stored offset.","Get the year of the date.","An error type indicating that a component provided to a …","Some component contained an invalid value for the type.","","An error type indicating that a conversion failed because …","","An error type indicating that a <code>TryFrom</code> call failed …","","A unified error type for anything returned by a method in …","An error occurred when formatting.","","The <code>Parsed</code> did not include enough information to construct …","The type being formatted does not contain sufficient …","The component named has a value that cannot be formatted …","A dynamic component was not valid.","A component name is not valid.","The format description provided was not valid.","","A string literal was not what was expected.","A modifier is not valid.","An error type indicating that a <code>FromStr</code> call failed …","","A component name is missing.","An error that occurred at some stage of parsing.","An error that occurred while parsing the input into a …","","","A value of <code>std::io::Error</code> was returned internally.","An error that occurred when converting a <code>Parsed</code> to another …","","","There was a bracket pair that was opened but not closed.","The input should have ended, but there were characters …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the value’s permitted range is conditional, i.e. …","Obtain the name of the component whose value was out of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The zero-based index of the opening bracket.","The zero-based index the component name starts at.","The zero-based index the modifier starts at.","The zero-based index where the component name should start.","The name of the invalid component name.","The value of the invalid modifier.","","","","","Create <code>Duration</code>s from numeric literals.","Create <code>std::time::Duration</code>s from numeric literals.","Create a <code>Duration</code> from the number of days.","Create a <code>Duration</code> from the number of hours.","Create a <code>Duration</code> from the number of microseconds.","Create a <code>Duration</code> from the number of milliseconds.","Create a <code>Duration</code> from the number of minutes.","Create a <code>Duration</code> from the number of nanoseconds.","Create a <code>Duration</code> from the number of seconds.","Create a <code>std::time::Duration</code> from the number of days.","Create a <code>std::time::Duration</code> from the number of hours.","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of minutes.","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of seconds.","Create a <code>std::time::Duration</code> from the number of weeks.","Create a <code>Duration</code> from the number of weeks.","A component of a larger format description.","A minimal representation of a single non-literal item.","A minimal representation of a single non-literal item.","A series of literals or components that collectively form …","A series of literals or components that collectively form …","Day of the month.","A series of <code>FormatItem</code>s where, when parsing, the first …","A series of <code>FormatItem</code>s where, when parsing, the first …","A complete description of how to format and parse a type.","Hour of the day.","Bytes that are formatted as-is.","Bytes that are formatted as-is.","Minute within the hour.","Month of the year.","Hour of the UTC offset.","Minute within the hour of the UTC offset.","Second within the minute of the UTC offset.","A <code>FormatItem</code> that may or may not be present when parsing. …","A <code>FormatItem</code> that may or may not be present when parsing. …","Ordinal day of the year.","A complete description of how to format and parse a type.","AM/PM part of the time.","Second within the minute.","Subsecond within the second.","Week within the year.","Day of the week.","Year of the date.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Various modifiers for components.","Parse a sequence of items from the format description.","Parse a sequence of items from the format description.","","","","","","","","","","","","","","","Well-known formats, typically standards.","","","","","","","","","","","","","","","","","","","","","","","","","Day of the month.","Exactly eight digits.","Exactly five digits.","Exactly four digits.","The full value of the year.","Hour of the day.","Week 1 is the week that contains January 4.","Only the last two digits of the year.","The long form of the month name (e.g. “January”).","The long form of the weekday (e.g. “Monday”).","Minute within the hour.","A numerical representation using Monday as the first day …","Week 1 begins on the first Monday of the calendar year.","Month of the year.","The representation of a month.","Exactly nine digits.","There is no padding. This can result in a width below the …","The number of the month (January is 1, December is 12).","Hour of the UTC offset.","Minute within the hour of the UTC offset.","Second within the minute of the UTC offset.","Exactly one digit.","Any number of digits (up to nine) that is at least one. …","Ordinal day of the year.","Type of padding to ensure a minimum width.","AM/PM part of the time.","Second within the minute.","Exactly seven digits.","The short form of the month name (e.g. “Jan”).","The short form of the weekday (e.g. “Mon”).","Exactly six digits.","A space character (<code> </code>) should be used as padding.","Subsecond within the second.","The number of digits present in a subsecond representation.","A numerical representation using Sunday as the first day …","Week 1 begins on the first Sunday of the calendar year.","Exactly three digits.","Exactly two digits.","Week within the year.","The representation used for the week number.","Day of the week.","The representation used for the day of the week.","Year of the date.","The representation used for a year value.","A zero character (<code>0</code>) should be used as padding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Is the value case sensitive when parsing?","Is the value case sensitive when parsing?","Is the value case sensitive when parsing?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a modifier that indicates the value is padded with …","","Creates an instance of this type that indicates the value …","","Creates a modifier that indicates the value is padded with …","","","Creates a modifier that indicates the value uses the <code>Long</code> …","","","","Creates a modifier that indicates that the value is padded …","","","Creates a modifier that indicates the value uses the <code>Full</code> …","","Creates a modifier that indicates the value is padded with …","Creates a modifier that indicates the value is padded with …","","","Creates a modifier that indicates the value uses the …","Creates a modifier that indicates the value is padded with …","","","Creates a modifier that indicates the stringified value …","","","Creates a modifier that indicates the value uses the <code>+</code> …","","Creates a modifier that indicates the value is padded with …","Creates a modifier that indicates the value is padded with …","","","How many digits are present in the component?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the hour displayed using a 12 or 24-hour clock?","Is the period uppercase or lowercase?","Whether the value is based on the ISO week number or the …","When using a numerical representation, should it be zero …","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","What form of representation should be used?","What form of representation should be used?","What kind of representation should be used?","What kind of representation should be used?","Whether the <code>+</code> sign is present when a positive year …","Whether the <code>+</code> sign is present on positive values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The format described in ISO 8601.","The format described in RFC 2822.","The format described in RFC 3339.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The format described in ISO 8601.","","","","","","","","","","","","","Use the year-month-day format.","Configuration for <code>Iso8601</code>.","An <code>Iso8601</code> with the default configuration.","A configuration for the <code>Iso8601</code> format.","Format only the date.","Which format to use for the date.","Format the date and time.","Format the date, time, and UTC offset.","An encoded <code>Config</code> that can be used as a const parameter to …","Which components to format.","Format the hour only. Minutes, seconds, and nanoseconds …","Format only the offset hour. Requires the offset minute to …","The format described in ISO 8601.","Format the hour and minute. Seconds and nanoseconds will …","Format both the offset hour and minute.","The configuration can only be used for parsing. Using this …","Format only the UTC offset.","The precision for the UTC offset.","Use the week-ordinal format.","An <code>Iso8601</code> that can only be used for parsing. Using this …","Format the hour, minute, and second. Nanoseconds will be …","Format only the time.","Format the time and UTC offset.","The precision and number of decimal digits present for the …","Use the year-week-weekday format.","","","","","","","","","","","","","","","","","","","Encode the configuration, permitting it to be used as a …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the format used for the date.","Set whether the format the date, time, and/or UTC offset.","Set the precision for the UTC offset.","Set the precision and number of decimal digits present for …","Set whether the format contains separators (such as <code>-</code> or <code>:</code>…","Set whether the year is six digits.","","","","","","","","","","","","","","","","","","","","","","","A type that can be formatted.","A type that can be parsed.","All information parsed.","","","","","Obtain the named component.","","Returns the argument unchanged.","Obtain the named component.","Obtain the named component.","Obtain the named component.","Calls <code>U::from(self)</code>.","Obtain the named component.","Obtain the named component.","Obtain the named component.","Obtain the named component.","Obtain the named component.","Obtain the named component.","Create a new instance of <code>Parsed</code> with no information known.","Obtain the named component.","Obtain the absolute value of the offset minute.","Obtain the offset minute as an <code>i8</code>.","Obtain the absolute value of the offset second.","Obtain the offset second as an <code>i8</code>.","Obtain the named component.","Parse a single component, mutating the struct. The …","Parse a single <code>FormatItem</code> or <code>OwnedFormatItem</code>, mutating the …","Parse a sequence of <code>FormatItem</code>s or <code>OwnedFormatItem</code>s, …","Parse a literal byte sequence. The remaining input is …","Obtain the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the <code>offset_minute</code> component.","Set the named component.","Set the <code>offset_second</code> component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Set the named component.","Obtain the named component.","Obtain the named component.","","","","","Obtain the named component.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the <code>offset_minute</code> component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the <code>offset_second</code> component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Set the named component and return <code>self</code>.","Obtain the named component.","Obtain the named component.","Get the number of calendar days in a given year.","Get the number of days in the month of a given year.","Returns if the provided year is a leap year in the …","Get the number of weeks in the ISO year."],"i":[4,14,14,1,0,14,0,0,14,15,1,0,14,14,14,2,1,6,1,7,1,2,1,6,1,14,14,15,0,1,14,14,0,0,0,1,15,14,15,15,0,15,5,8,0,1,15,0,1,1,2,2,1,1,4,4,5,6,6,7,7,2,2,1,1,4,4,5,5,6,6,7,7,6,7,8,6,7,6,7,6,7,4,1,1,6,6,2,1,4,4,14,5,6,7,8,15,2,1,4,14,5,6,7,8,15,2,1,4,5,6,1,1,2,1,4,5,6,2,1,4,14,5,6,7,8,15,2,1,4,14,5,6,7,8,15,2,1,4,5,6,7,8,5,6,2,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,2,1,1,4,4,14,5,5,6,7,8,15,0,0,2,2,1,1,4,14,14,5,5,6,6,7,7,8,8,15,15,2,5,6,7,8,0,2,5,6,7,8,0,2,1,4,4,14,5,5,6,7,8,15,2,7,8,7,7,7,2,2,2,14,15,5,5,8,2,1,4,14,5,6,7,8,15,5,6,7,1,2,1,4,14,5,6,7,8,15,4,1,8,1,8,8,1,2,5,6,5,6,7,1,2,5,6,7,1,5,6,7,1,8,2,5,6,2,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,6,7,1,1,8,1,6,14,15,2,4,5,15,15,15,15,5,2,5,6,2,5,6,7,8,0,2,1,1,4,4,5,5,6,7,8,14,15,2,5,6,5,2,5,6,5,6,7,5,6,7,5,6,7,5,6,7,2,5,6,5,6,7,5,5,6,7,5,6,2,5,6,2,1,5,6,1,2,1,5,6,5,6,7,1,1,1,8,2,2,2,1,1,4,4,4,4,5,5,5,6,6,6,7,7,7,2,2,1,1,4,4,5,5,6,6,7,7,1,1,1,1,1,2,5,6,5,6,1,2,5,6,5,5,5,5,2,5,6,2,5,6,5,2,5,6,2,1,4,14,5,6,7,8,15,2,1,14,5,6,7,8,15,2,2,1,1,4,14,14,5,5,6,6,7,7,8,8,15,2,1,4,14,5,6,7,8,15,2,1,4,14,5,6,7,8,15,5,5,1,0,2,5,6,1,1,1,8,1,1,1,8,1,1,8,1,2,2,2,2,2,2,5,6,0,45,46,0,46,0,46,0,0,46,45,30,30,44,42,0,46,44,42,0,46,42,0,0,35,46,30,0,35,46,42,35,46,32,39,41,30,42,43,35,44,45,46,32,39,41,30,42,43,35,44,45,46,32,39,41,42,43,35,44,45,32,39,41,42,43,35,44,45,32,39,41,42,43,35,44,45,32,32,39,39,41,41,30,30,42,42,43,43,35,35,44,44,45,45,46,46,32,39,41,30,30,42,43,35,35,35,44,45,45,46,46,46,46,46,46,46,46,46,46,32,32,39,41,30,42,43,35,44,45,46,32,32,32,39,41,30,42,43,35,44,45,46,30,35,45,46,32,39,41,42,43,35,44,45,32,39,41,30,42,43,35,44,45,46,32,32,32,39,39,41,41,30,30,42,42,43,43,35,35,44,44,44,45,45,45,46,32,39,41,30,42,43,35,44,45,46,32,39,41,30,42,43,35,44,45,46,85,86,87,88,89,90,91,92,93,94,95,96,97,98,96,97,99,100,101,102,0,0,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,103,0,50,52,50,52,51,50,52,0,51,50,52,51,51,51,51,51,50,52,51,0,51,51,51,51,51,51,50,51,52,50,51,52,50,51,52,50,51,52,50,50,50,51,51,51,52,52,52,50,51,52,50,50,50,51,52,52,52,52,52,52,52,50,51,52,0,0,0,50,51,52,50,51,51,51,52,50,51,52,50,51,52,0,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,0,68,68,68,62,0,60,62,55,58,0,58,60,0,0,68,73,55,0,0,0,68,68,0,0,0,0,68,55,58,68,73,0,0,58,60,68,68,0,0,0,0,0,0,73,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,56,59,66,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,54,55,56,56,57,57,58,59,59,60,61,61,62,63,63,64,64,65,65,66,66,67,67,68,69,69,70,70,71,71,72,72,73,69,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,64,66,63,59,54,56,57,61,63,64,65,67,70,71,72,56,59,61,63,63,70,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,0,0,0,74,75,76,74,75,76,74,75,76,74,75,76,74,75,76,74,75,76,74,75,76,74,75,76,0,74,75,76,74,75,76,74,75,76,74,75,76,78,0,74,81,77,0,77,77,0,0,79,80,0,79,80,77,77,0,78,74,79,77,77,0,78,77,78,79,80,81,77,78,79,80,81,77,78,79,80,77,78,79,80,81,77,78,79,80,77,78,79,80,81,77,78,79,80,81,77,78,79,80,81,81,81,81,81,81,81,77,78,79,80,77,78,79,80,81,77,78,79,80,81,77,78,79,80,81,129,130,131,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[2,1]],[[2,3]],[[1,3]],[[1,1]],[[4,3]],[[4,1]],[5],[[6,3]],[[6,1]],[[7,1]],[[7,3]],[[2,1]],[[2,3]],[[1,3]],[[1,1]],[[4,1]],[[4,3]],[[5,1]],[[5,3]],[[6,1]],[[6,3]],[[7,3]],[[7,1]],[6],[7],[8],[6],[7],[6],[7],[6],[7],[4,9],[1,10],[1,11],[[6,8],5],[6,5],[[]],[[]],[[]],[4,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,1],[[12,[2]]]],[[1,1],[[12,[1]]]],[[4,1],[[12,[4]]]],[[5,1],[[12,[5]]]],[[6,1],[[12,[6]]]],[[1,13],[[12,[1]]]],[[1,13],[[12,[1]]]],[[2,1],[[12,[2]]]],[[1,1],[[12,[1]]]],[[4,1],[[12,[4]]]],[[5,1],[[12,[5]]]],[[6,1],[[12,[6]]]],[2,2],[1,1],[4,4],[14,14],[5,5],[6,6],[7,7],[8,8],[15,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],16],[[1,1],16],[[4,4],16],[[5,5],16],[[6,6],16],[[7,7],16],[[8,8],16],[5,2],[6,2],[2,17],[5,17],[6,17],[18,1],[[],1],[[1,19]],[[1,1]],[[1,20]],[[1,17]],[[1,13]],[[1,21]],[[1,10]],[[1,22]],[[1,11]],[[1,3]],[[1,17]],[[1,20]],[[1,10]],[[1,21]],[[1,11]],[[1,22]],[[1,19]],[[1,13]],[4,1],[[2,2],23],[[1,3],23],[[1,1],23],[[4,4],23],[[4,9],23],[[14,14],23],[[5,5],23],[[5,24],23],[[6,6],23],[[7,7],23],[[8,8],23],[[15,15],23],0,0,[[2,25],26],[[2,25],[[28,[27]]]],[[1,25],26],[[1,25],26],[[4,25],26],[[14,25],26],[[14,25],26],[[5,25],26],[[5,25],26],[[6,25],26],[[6,25],26],[[7,25],26],[[7,25],26],[[8,25],26],[[8,25],26],[[15,25],26],[[15,25],26],[2,[[28,[29,30]]]],[5,[[28,[29,30]]]],[6,[[28,[29,30]]]],[7,[[28,[29,30]]]],[8,[[28,[29,30]]]],0,[2,[[28,[31,30]]]],[5,[[28,[31,30]]]],[6,[[28,[31,30]]]],[7,[[28,[31,30]]]],[8,[[28,[31,30]]]],0,[[]],[[]],[[]],[9,4],[[]],[24,5],[[]],[[]],[[]],[[]],[[]],[[13,14,17],[[28,[2,32]]]],[[17,17,17],[[28,[7,32]]]],[[22,22,22],[[28,[8,32]]]],[[17,17,17,21],[[28,[7,32]]]],[[17,17,17,20],[[28,[7,32]]]],[[17,17,17,21],[[28,[7,32]]]],[[13,17,15],[[28,[2,32]]]],[13,[[28,[2,32]]]],[[13,20],[[28,[2,32]]]],[33,[[28,[14]]]],[33,[[28,[15]]]],[18,[[28,[5,32]]]],[34,[[28,[5,32]]]],[13,[[28,[8,32]]]],[2],[1],[4],[14],[5],[6],[7],[8],[15],[5,17],[6,17],[7,17],[18,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,9],[1,23],[8,23],[1,23],[8,23],[8,23],[1,23],[2,17],[5,17],[6,17],[5,21],[6,21],[7,21],[18,1],[2,6],[5,20],[6,20],[7,20],[18,1],[5,17],[6,17],[7,17],[18,1],[8,22],[2,17],[5,17],[6,17],[2,14],[5,14],[6,14],[[1,21]],[[1,13]],[[1,11]],[[1,10]],[[1,20]],[[1,22]],[[1,19]],[[1,17]],[[1,10]],[[1,20]],[[1,22]],[[1,19]],[[1,13]],[[1,17]],[[1,21]],[[1,11]],[5,21],[6,21],[7,21],[18,1],[1],[8],[[18,13],1],[[2,7],6],[14,14],[15,15],[2,[[12,[2]]]],[[],4],[[],5],[15,17],[15,17],[15,17],[15,17],[5,8],[2,20],[5,20],[6,20],[33,[[28,[2,35]]]],[33,[[28,[5,35]]]],[33,[[28,[6,35]]]],[33,[[28,[7,35]]]],[33,[[28,[8,35]]]],0,[[2,2],[[12,[16]]]],[[1,1],[[12,[16]]]],[[1,3],[[12,[16]]]],[[4,9],[[12,[16]]]],[[4,4],[[12,[16]]]],[[5,5],[[12,[16]]]],[[5,24],[[12,[16]]]],[[6,6],[[12,[16]]]],[[7,7],[[12,[16]]]],[[8,8],[[12,[16]]]],[14,14],[15,15],[2,[[12,[2]]]],[[5,2],5],[[6,2],6],[[5,6],5],[[2,17],[[28,[2,32]]]],[[5,17],[[28,[5,32]]]],[[6,17],[[28,[6,32]]]],[[5,17],[[28,[5,32]]]],[[6,17],[[28,[6,32]]]],[[7,17],[[28,[7,32]]]],[[5,21],[[28,[5,32]]]],[[6,21],[[28,[6,32]]]],[[7,21],[[28,[7,32]]]],[[5,20],[[28,[5,32]]]],[[6,20],[[28,[6,32]]]],[[7,20],[[28,[7,32]]]],[[5,17],[[28,[5,32]]]],[[6,17],[[28,[6,32]]]],[[7,17],[[28,[7,32]]]],[[2,14],[[28,[2,32]]]],[[5,14],[[28,[5,32]]]],[[6,14],[[28,[6,32]]]],[[5,21],[[28,[5,32]]]],[[6,21],[[28,[6,32]]]],[[7,21],[[28,[7,32]]]],[[5,8],5],[[5,17],[[28,[5,32]]]],[[6,17],[[28,[6,32]]]],[[7,17],[[28,[7,32]]]],[[5,7],5],[[6,7],6],[[2,13],[[28,[2,32]]]],[[5,13],[[28,[5,32]]]],[[6,13],[[28,[6,32]]]],[[2,1],2],[[1,1],1],[[5,1],5],[[6,1],6],[[1,13],1],[[2,1],2],[[1,1],1],[[5,1],5],[[6,1],6],[5,17],[6,17],[7,17],[18,1],[10,1],[11,1],[8,22],[[2,2]],[[2,3]],[[2,1]],[[1,3]],[[1,1]],[[4,3]],[[4,1]],[[4,9]],[[4,4]],[[5,24]],[[5,5]],[5],[[6,1]],[[6,3]],[[6,6]],[[7,1]],[[7,3]],[[7,7]],[[2,3]],[[2,1]],[[1,1]],[[1,3]],[[4,3]],[[4,1]],[[5,3]],[[5,1]],[[6,1]],[[6,3]],[[7,3]],[[7,1]],[1,13],[1,19],[1,13],[36,1],[36,1],[2,17],[5,17],[6,17],[5,7],[6,7],[37],[2],[5],[6],[5],[5],[5],[5],[2],[5],[6],[2,13],[5,13],[6,13],[[5,8],5],[2],[5],[6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],28],[38,[[28,[2]]]],[3,[[28,[1,39]]]],[[],28],[[],28],[[],28],[17,[[28,[14]]]],[[],28],[38,[[28,[5]]]],[[],28],[38,[[28,[6]]]],[38,[[28,[7]]]],[[],28],[38,[[28,[8]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[5,18],[5,34],[1,3],0,[2,15],[5,15],[6,15],[18,1],[1,18],[1,18],[8,22],[1,34],[1,34],[1,18],[8,19],[1,34],[1,18],[8,13],[1,18],[[2,17,17,17],[[28,[6,32]]]],[[2,17,17,17,21],[[28,[6,32]]]],[[2,17,17,17,20],[[28,[6,32]]]],[[2,17,17,17,21],[[28,[6,32]]]],[[2,7],6],[2,13],[5,13],[6,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[39,39],[41,41],[42,42],[43,43],[35,35],[44,44],[45,45],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[32,32],23],[[39,39],23],[[41,41],23],[[42,42],23],[[43,43],23],[[35,35],23],[[44,44],23],[[45,45],23],[[32,25],26],[[32,25],26],[[39,25],26],[[39,25],26],[[41,25],26],[[41,25],26],[[30,25],26],[[30,25],26],[[42,25],26],[[42,25],26],[[43,25],26],[[43,25],26],[[35,25],26],[[35,25],26],[[44,25],26],[[44,25],26],[[45,25],26],[[45,25],26],[[46,25],26],[[46,25],26],[[]],[[]],[[]],[[]],[47,30],[[]],[[]],[45,35],[[]],[44,35],[[]],[[]],[32,45],[43,46],[[]],[42,46],[35,46],[41,46],[30,46],[45,46],[39,46],[32,46],[44,46],[32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,23],[32,33],[48],[48],[48],[48],[48],[48],[48],[48],[48],[48],[30,[[12,[49]]]],[35,[[12,[49]]]],[45,[[12,[49]]]],[46,[[12,[49]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],28],[46,[[28,[32]]]],[45,[[28,[32]]]],[[],28],[46,[[28,[39]]]],[[],28],[46,[[28,[41]]]],[46,[[28,[30]]]],[[],28],[46,[[28,[42]]]],[[],28],[46,[[28,[43]]]],[[],28],[46,[[28,[35]]]],[[],28],[35,[[28,[44]]]],[46,[[28,[44]]]],[[],28],[35,[[28,[45]]]],[46,[[28,[45]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[50,50],[51,51],[52,52],[[]],[[]],[[]],[50,23],[[50,50],23],[[50,51],23],[[51,51],23],[[51,50],23],[[51,52],23],[52,23],[[52,52],23],[[52,51],23],[[50,25],26],[[51,25],26],[[52,25],26],[[],50],[[]],[51,50],[[]],[[[53,[52]]],52],[[]],[51,52],[[],52],[[[53,[50]]],52],[50,52],[50,52],[[]],[[]],[[]],0,[33,[[28,[[53,[50]],42]]]],[33,[[28,[52,42]]]],[[]],[[]],[[]],[[],28],[50,[[28,[51]]]],[[],28],[52,[[28,[51]]]],[[],28],[[],28],[[],28],[[],28],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[71,71],[72,72],[73,73],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],54],[[],54],[[],55],[[],56],[[],56],[[],57],[[],57],[[],58],[[],59],[[],59],[[],60],[[],61],[[],61],[[],62],[[],63],[[],63],[[],64],[[],64],[[],65],[[],65],[[],66],[[],66],[[],67],[[],67],[[],68],[[],69],[[],69],[[],70],[[],70],[[],71],[[],71],[[],72],[[],72],[[],73],0,[[54,54],23],[[55,55],23],[[56,56],23],[[57,57],23],[[58,58],23],[[59,59],23],[[60,60],23],[[61,61],23],[[62,62],23],[[63,63],23],[[64,64],23],[[65,65],23],[[66,66],23],[[67,67],23],[[68,68],23],[[69,69],23],[[70,70],23],[[71,71],23],[[72,72],23],[[73,73],23],[[54,25],26],[[55,25],26],[[56,25],26],[[57,25],26],[[58,25],26],[[59,25],26],[[60,25],26],[[61,25],26],[[62,25],26],[[63,25],26],[[64,25],26],[[65,25],26],[[66,25],26],[[67,25],26],[[68,25],26],[[69,25],26],[[70,25],26],[[71,25],26],[[72,25],26],[[73,25],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[74,74],[75,75],[76,76],[[]],[[]],[[]],[[74,74],23],[[75,75],23],[[76,76],23],[[74,25],26],[[75,25],26],[[76,25],26],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],40],[[],40],[[],40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,77],[78,78],[79,79],[80,80],[[]],[[]],[[]],[[]],[81,82],[[77,77],23],[[78,78],23],[[79,79],23],[[80,80],23],[[77,25],26],[[78,25],26],[[79,25],26],[[80,25],26],[[81,25],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[81,78],81],[[81,77],81],[[81,80],81],[[81,79],81],[[81,23],81],[[81,23],81],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,0,0,0,0,[[]],[[]],[38,38],[[]],[38,[[12,[83]]]],[[38,25],26],[[]],[38,[[12,[83]]]],[38,[[12,[23]]]],[38,[[12,[17]]]],[[]],[38,[[12,[83]]]],[38,[[12,[13]]]],[38,[[12,[17]]]],[38,[[12,[17]]]],[38,[[12,[17]]]],[38,[[12,[14]]]],[[],38],[38,[[12,[22]]]],[38,[[12,[17]]]],[38,[[12,[22]]]],[38,[[12,[17]]]],[38,[[12,[22]]]],[38,[[12,[84]]]],[[38,51],[[28,[44]]]],[38,[[28,[44]]]],[38,[[28,[44]]]],[[],[[28,[44]]]],[38,[[12,[17]]]],[[38,83],12],[[38,83],12],[[38,23],12],[[38,17],12],[[38,83],12],[[38,13],12],[[38,17],12],[[38,17],12],[[38,17],12],[[38,14],12],[[38,22],12],[[38,17],12],[[38,22],12],[[38,17],12],[[38,22],12],[[38,84],12],[[38,17],12],[[38,21],12],[[38,17],12],[[38,15],12],[[38,13],12],[[38,17],12],[38,[[12,[21]]]],[38,[[12,[17]]]],[[]],[[],28],[[],28],[[],40],[38,[[12,[15]]]],[[38,83],[[12,[38]]]],[[38,83],[[12,[38]]]],[[38,23],[[12,[38]]]],[[38,17],[[12,[38]]]],[[38,83],[[12,[38]]]],[[38,13],[[12,[38]]]],[[38,17],[[12,[38]]]],[[38,17],[[12,[38]]]],[[38,17],[[12,[38]]]],[[38,14],[[12,[38]]]],[[38,22],[[12,[38]]]],[[38,17],[[12,[38]]]],[[38,22],[[12,[38]]]],[[38,17],[[12,[38]]]],[[38,22],[[12,[38]]]],[[38,84],[[12,[38]]]],[[38,17],[[12,[38]]]],[[38,21],[[12,[38]]]],[[38,17],[[12,[38]]]],[[38,15],[[12,[38]]]],[[38,13],[[12,[38]]]],[[38,17],[[12,[38]]]],[38,[[12,[13]]]],[38,[[12,[17]]]],[13,20],[[13,14],17],[13,23],[13,17]],"p":[[3,"Duration"],[3,"Date"],[3,"Duration"],[3,"Instant"],[3,"OffsetDateTime"],[3,"PrimitiveDateTime"],[3,"Time"],[3,"UtcOffset"],[3,"Instant"],[15,"f32"],[15,"f64"],[4,"Option"],[15,"i32"],[4,"Month"],[4,"Weekday"],[4,"Ordering"],[15,"u8"],[15,"i64"],[15,"i16"],[15,"u16"],[15,"u32"],[15,"i8"],[15,"bool"],[3,"SystemTime"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"String"],[4,"Format"],[15,"usize"],[3,"ComponentRange"],[15,"str"],[15,"i128"],[4,"Parse"],[8,"Iterator"],[8,"FnOnce"],[3,"Parsed"],[3,"ConversionRange"],[3,"TypeId"],[3,"DifferentVariant"],[4,"InvalidFormatDescription"],[3,"InvalidVariant"],[4,"ParseFromDescription"],[4,"TryFromParsed"],[4,"Error"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"FormatItem"],[4,"Component"],[4,"OwnedFormatItem"],[3,"Vec"],[3,"Day"],[4,"MonthRepr"],[3,"Month"],[3,"Ordinal"],[4,"WeekdayRepr"],[3,"Weekday"],[4,"WeekNumberRepr"],[3,"WeekNumber"],[4,"YearRepr"],[3,"Year"],[3,"Hour"],[3,"Minute"],[3,"Period"],[3,"Second"],[4,"SubsecondDigits"],[3,"Subsecond"],[3,"OffsetHour"],[3,"OffsetMinute"],[3,"OffsetSecond"],[4,"Padding"],[3,"Iso8601"],[3,"Rfc2822"],[3,"Rfc3339"],[4,"FormattedComponents"],[4,"DateKind"],[4,"TimePrecision"],[4,"OffsetPrecision"],[3,"Config"],[6,"EncodedConfig"],[3,"NonZeroU8"],[3,"NonZeroU16"],[13,"ConversionRange"],[13,"ComponentRange"],[13,"Format"],[13,"ParseFromDescription"],[13,"TryFromParsed"],[13,"InvalidFormatDescription"],[13,"DifferentVariant"],[13,"InvalidVariant"],[13,"InvalidComponent"],[13,"StdIo"],[13,"UnclosedOpeningBracket"],[13,"InvalidComponentName"],[13,"InvalidModifier"],[13,"MissingComponentName"],[13,"TryFromParsed"],[13,"ParseFromDescription"],[13,"InvalidComponent"],[13,"ComponentRange"],[8,"NumericalDuration"],[8,"NumericalStdDuration"],[13,"Day"],[13,"Month"],[13,"Ordinal"],[13,"Weekday"],[13,"WeekNumber"],[13,"Year"],[13,"Hour"],[13,"Minute"],[13,"Period"],[13,"Second"],[13,"Subsecond"],[13,"OffsetHour"],[13,"OffsetMinute"],[13,"OffsetSecond"],[13,"Literal"],[13,"Component"],[13,"Compound"],[13,"Optional"],[13,"First"],[13,"Literal"],[13,"Component"],[13,"Compound"],[13,"Optional"],[13,"First"],[13,"Hour"],[13,"Minute"],[13,"Second"]],"a":{"encodedconfig":[1267],"from_julian_date":[230],"iso_weekday_number":[320]}},\
"time_core":{"doc":"Core items for <code>time</code>.","t":[0,5,5,5],"n":["util","days_in_year","is_leap_year","weeks_in_year"],"q":["time_core","time_core::util","",""],"d":["Utility functions.","Get the number of calendar days in a given year.","Returns if the provided year is a leap year in the …","Get the number of weeks in the ISO year."],"i":[0,0,0,0],"f":[0,[1,2],[1,3],[1,4]],"p":[[15,"i32"],[15,"u16"],[15,"bool"],[15,"u8"]]},\
"trees":{"doc":"General purpose tree library. See the trees book for more.","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,0,0,0,0,0,0,0,2,0,0,0,4,3,3,13,16,16,8,3,13,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,3,3,4,13,13,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,18,18,8,8,4,11,11,11,11,11,10,10,11,11,11,11,11,10,10,11,11,11,10,10,11,10,10,11,10,10,11,10,10,11,11,11,11,11,12,12,13,13,3,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["Forest","ForestWalk","IntoIter","Iter","IterMut","IterRc","Node","RcNode","Size","Tree","TreeWalk","TupleForest","TupleTree","WeakNode","bfs","forest","fr","into_iter","iter","iter_rc","node","notation","rc","size","tr","tree","tuple","walk","Bfs","BfsForest","BfsTree","Forest","Item","Iter","Split","Splitted","Tree","Visit","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","data","descendants","descendants","descendants","descendants","descendants","eq","fmt","fmt","forest_iter","from","from","from","from","from","from","from","from","height","height","height","height","height","into","into","into","into","into","into_iter","iter","iter","iter","iter_and_size","map","map","next","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","size","size","size","split","tree_iter","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrap","wrap","0","0","Forest","append","back","back_mut","bfs","bfs_mut","borrow","borrow_mut","clone","clone_into","cmp","default","degree","descendants","drop","eq","fmt","fmt","from","from","from","from_tuple","front","front_mut","has_no_child","hash","height","into","into_bfs","into_iter","iter","iter_mut","ne","new","node_count","partial_cmp","pop_back","pop_front","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prepend","push_back","push_front","sub","sub","sub","sub","sub","sub","sub","sub","to_owned","to_string","try_from","try_into","type_id","IntoIter","borrow","borrow_mut","descendants","drop","from","height","into","into_iter","next","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","size_hint","try_from","try_into","type_id","Iter","IterMut","borrow","borrow","borrow_mut","borrow_mut","descendants","descendants","fmt","fmt","from","from","height","height","into","into","into_iter","into_iter","next","next","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","size_hint","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","IterRc","borrow","borrow_mut","clone","clone_into","descendants","from","height","into","into_iter","next","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","size_hint","to_owned","try_from","try_into","type_id","Node","append","back","back_mut","bfs","bfs_children","bfs_children_mut","bfs_mut","borrow","borrow_mut","cmp","data","data_mut","deep_clone","deep_clone_forest","default","degree","descendants","detach","eq","fmt","fmt","from","front","front_mut","has_no_child","hash","height","insert_next_sib","insert_prev_sib","into","into_iter","iter","iter_mut","ne","node_count","parent","partial_cmp","pop_back","pop_front","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prepend","push_back","push_front","split","to_string","try_from","try_into","type_id","fr","tr","Piled","Piled","PiledRcNode","PiledWeakNode","RcNode","Scattered","Scattered","ScatteredRcNode","ScatteredWeakNode","WeakNode","append","back","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","data","data_mut","deep_clone","degree","descendants","descendants","descendants","descendants","descendants","descendants","detach","downgrade","drop","drop","eq","extend","fmt","fmt","from","from","from","from","from","from","from","front","has_no_child","hash","height","height","height","height","height","height","insert_next_sib","insert_prev_sib","into","into","into","into","into","into","into_tree","is_root","iter_rc","ne","node","node_count","node_mut","parent","partial_cmp","pop_back","pop_front","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","prepend","push_back","push_front","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","0","0","0","0","Size","add","add_assign","borrow","borrow_mut","clone","clone_into","default","degree","descendants","descendants","eq","fmt","from","height","into","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","sub","sub_assign","to_owned","try_from","try_into","type_id","Tree","abandon","append","back_mut","bfs_children_mut","bfs_mut","borrow","borrow_mut","clone","clone_into","cmp","deref","descendants","div","div","div","div","div","div","div","div","div","div","drop","eq","fmt","fmt","from","from","from","from_tuple","front_mut","hash","height","into","into_bfs","into_iter","iter_mut","ne","neg","neg","new","partial_cmp","pop_back","pop_front","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prepend","push_back","push_front","root","root_mut","split","sub","sub","sub","sub","to_owned","to_string","try_from","try_into","type_id","Branch","Frame","Leaf","SIZE","SIZE","TupleForest","TupleTree","Visit","borrow","borrow_mut","clone","clone_into","cmp","descendants","descendants","descendants","eq","fmt","from","hash","height","height","height","into","partial_cmp","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","to_owned","try_from","try_into","type_id","0","0","Begin","End","ForestWalk","Leaf","TreeWalk","Visit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","descendants","descendants","descendants","eq","fmt","forward","forward","from","from","from","from","from","get","get","get_parent","get_parent","height","height","height","into","into","into","next","next","node","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","revisit","revisit","to_child","to_child","to_owned","to_parent","to_parent","to_sib","to_sib","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0"],"q":["trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::bfs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::bfs::Bfs","","trees::forest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::into_iter","","","","","","","","","","","","","","","","","","trees::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::iter_rc","","","","","","","","","","","","","","","","","","","","trees::node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::notation","","trees::rc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::rc::RcNode","","trees::rc::WeakNode","","trees::size","","","","","","","","","","","","","","","","","","","","","","","","","","trees::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::tuple","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::tuple::Visit","","trees::walk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::walk::Visit","",""],"d":["","","","","","","","","","","","","","","Breadth first search.","Composed of a list of <code>Node</code>s as its children.","","Forest’s owning iterator.","Iterators of <code>Tree</code>/<code>Forest</code>, returned by <code>iter()</code> or <code>iter_mut()</code>.","Iterators of <code>RcNode</code>, returned by <code>iter_rc()</code>.","Composed of <code>data</code> and a list of its child <code>Node</code>s.","Operator overloading of <code>-</code> and <code>/</code> for constructing tree …","Reference-counting nodes.","size of a tree/forest/node, including degree and …","","Composed of a root <code>Node</code> and a list of its child <code>Node</code>s.","Traits for implementing tuple notations","Depth first search in <code>Tree</code>/<code>Node</code>/<code>Forest</code>.","Bfs iterator of either tree or forest.","Forest iterator for breadth first search.","Tree iterator for breadth first search.","","","","Split tree node into data item and children iter.","An iterator in breadth-first manner.","","Visit a node in breadth first search.","","","","","","","","","","","","","","","","","","","","Returns the iterator which iterates the forest nodes in …","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the iterator in breadth-first search.","","","Returns the iterator and size infomation.","Takes a closure and creates another BfsTree which calls …","Takes a closure and creates another BfsForest which calls …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the iterator which iterates the tree nodes in …","","","","","","","","","","","","","","","","","","","","List of <code>Node</code>s as its children.","Add all the forest’s trees at back of children list","","Returns a mutable pointer to the last child of the forest, …","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator with mutable references in a …","","","","","","","Returns the number of child nodes in <code>Forest</code>.","","","","","","Returns the argument unchanged.","","","Construct forest from tuple notations.","Returns the first child of the forest, or <code>None</code> if it is …","Returns a mutable pointer to the first child of the forest,","Returns <code>true</code> if <code>Forest</code> is empty.","","","Calls <code>U::from(self)</code>.","Provides a forward iterator with owned data in a …","","Provides a forward iterator over child <code>Node</code>s.","Provides a forward iterator over child <code>Node</code>s with mutable …","","Makes an empty <code>Forest</code>.","Returns the number of all child nodes in <code>Forest</code>.","","Remove and return the first child.","Remove and return the first child.","","","","","Add all the forest’s trees at front of children list","Add the tree as the last child.","Add the tree as the first child.","","","","","","","","","","","","","","Forest’s owning iterator.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","An iterator over the child <code>Node</code>s of <code>Tree</code>, <code>Node</code> or <code>Forest</code>.","A mutable iterator over the child <code>Node</code>s of <code>Tree</code>, <code>Node</code> or …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","An iterator over the child <code>Node</code>s of <code>RcNode</code> with shared …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Composed of <code>data</code> and a list of its child <code>Node</code>s. Size …","Adds all the forest’s trees at back of children list.","Returns the last child of this node, or None if it has no …","Returns a mutable pointer to the last child of this node, …","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator in a breadth-first manner, …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","","","","Reference of its associated data.","Mutable reeference of its associated data.","Clones the node deeply and creates a new tree.","Clones the node’s descendant nodes as a forest.","","Returns the number of child nodes in <code>Node</code>.","","The subtree departs from its parent and becomes an …","","","","Returns the argument unchanged.","Returns the first child of this node, or None if it has no …","Returns a mutable pointer to the first child of this node, …","Returns <code>true</code> if <code>Node</code> has no child nodes.","","","Inserts sib tree after <code>self</code>. The newly inserted node will …","Inserts sib tree before <code>self</code>. The newly inserted node will …","Calls <code>U::from(self)</code>.","","Provides a forward iterator over child <code>Node</code>s","Provides a forward iterator over child <code>Node</code>s with mutable …","","Returns the number of all child nodes in <code>Node</code>, including …","Returns the parent node of this node, or None if it is the …","","Removes and return the last child.","Removes and return the first child.","","","","","Adds all the forest’s trees at front of children list.","Adds the tree as the last child.","Adds the tree as the first child.","","","","","","<code>fr</code> stands for <code>Forest</code>","<code>tr</code> stands for <code>Tree</code>","","","Reference-counting node which stored contiguously.","Non-owning reference-counting node which stored …","Reference-counting node.","","","Reference-counting node which stored scatteredly.","Non-owning reference-counting node which stored …","Non-owning reference-counting node.","Adds all the forest’s trees at back of children list.","Returns the last child of the tree, or None if it is empty.","","","","","","","","","","","","","","","","Dynamically borrows the node’s data.","Mutably borrows the node’s data.","Clones the node deeply and creates a new tree.","Returns the number of subtrees.","","","","","","","The subtree departs from its parent and becomes an …","Creates a new weak pointer to this node.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the first child of the tree, or None if it is …","Returns <code>true</code> if this <code>Node</code> has no child node, otherwise …","","","","","","","","Inserts sib tree after <code>self</code>. The newly inserted node will …","Inserts sib tree before <code>self</code>. The newly inserted node will …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts to a tree which disables reference-counting.","Checks if it is a root node.","Provides a forward iterator over child <code>Node</code>s, with shared …","","Obtains a node reference","Returns the number of all subnodes, including itself.","Obtains a mutable node reference","Returns the parent node of this node, or None if it is the …","","Removes and return the last child.","Removes and return the first child.","","","","","","","","","","","","","","","","","","","","","","","","","Adds all the forest’s trees at front of children list.","Adds the tree as the last child.","Adds the tree as the first child.","","","","","","","","","","","","","","","","","","","","","Attempts to upgrade the <code>WeakNode</code> a <code>RcNode</code>, delaying …","","","","","A struct keeping the node’s children count and all its …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Composed of a root <code>Node</code> and a list of its child <code>Node</code>s.","Removes and returns the given <code>Tree</code>’s children.","Adds all the forest’s trees at back of children list.","Returns a mutable reference to the last child of this node,","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Constructs tree from tuple notations.","Returns a mutable reference to the first child of this …","","","Calls <code>U::from(self)</code>.","Provides a forward iterator with owned data in a …","","Provides a forward iterator over child <code>Node</code>s with mutable …","","","","Creates a <code>Tree</code> containing only root node associated with …","","Removes and returns the last child.","Removes and returns the first child.","","","","","Adds all the forest’s trees at front of children list.","Adds the tree as the last child.","Adds the tree as the first child.","Reference of the root node.","Mutable reference of the root node.","","","","","","","","","","","","","","","","For tuple notations to construct <code>Forest</code>.","For tuple notations to construct <code>Tree</code>.","Visit one node in tree/forest building process, using …","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Depth first search in forest.","","Depth first search in tree.","Distinguish between visiting a leaf node and (begin/end …","","","","","","","","","","","","","","","Depth first search on <code>TreeWalk</code>. Preorder or postorder at …","Depth first search on <code>ForestWalk</code>. Preorder or postorder at …","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the current node in the tree traversal, or <code>None</code> if …","Returns the current node in the forest traversal, or <code>None</code> …","Returns the parent of current node, or <code>None</code> if it has no …","Returns the parent of current node, or <code>None</code> if it has no …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Advance the cursor and return the newly visited node.","Advances the cursor and return the newly visited node.","Returns the node under visit, regardless of whether it is …","","","","","","","","","","","","","Revisits a <code>Node</code> that reached <code>Visit::End</code>. No effect on …","Revisits a <code>Node</code> that reached <code>Visit::End</code>. No effect on …","Sets the cursor to the current node’s <code>n</code>-th child and …","Sets the cursor to the current node’s <code>n</code>-th child and …","","Set the cursor to the current node’s parent and returns …","Sets the cursor to the current node’s parent and returns …","Sets the cursor to the current node’s next <code>n</code>-th sibling …","Sets the cursor to the current node’s next <code>n</code>-th sibling …","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,42,42,0,0,9,0,12,13,9,3,8,12,13,9,3,8,3,12,13,9,3,8,3,3,8,9,12,12,13,13,9,3,8,8,12,13,9,3,8,12,13,9,3,8,8,9,12,13,9,12,13,8,12,13,9,3,8,12,13,9,3,8,12,13,9,3,8,12,13,9,3,8,12,13,3,42,9,12,13,9,3,8,12,13,9,3,8,12,13,9,3,8,12,13,43,44,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,20,21,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,33,36,0,0,0,33,36,0,0,0,33,33,45,46,33,47,48,36,45,46,33,47,48,36,33,33,33,33,33,33,33,45,46,33,47,48,36,33,33,33,36,33,33,33,33,45,46,33,33,47,48,36,33,33,33,45,46,33,47,48,36,33,33,45,46,33,47,48,36,33,33,33,33,33,33,33,33,33,33,33,45,46,33,47,48,36,45,46,33,47,48,36,45,46,33,47,48,36,45,46,33,47,48,36,33,33,33,33,33,45,46,33,47,48,36,45,46,33,47,48,36,45,46,33,47,48,36,36,49,50,51,52,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,39,39,39,53,54,0,0,0,39,39,39,39,39,53,54,39,39,39,39,39,53,54,39,39,39,53,54,39,53,54,39,53,54,39,53,54,39,39,39,39,39,55,56,40,40,0,40,0,0,38,40,26,38,40,26,40,40,26,38,40,26,40,40,38,26,38,38,40,26,26,38,26,38,26,38,40,26,38,40,26,38,26,40,38,40,26,38,40,26,38,40,26,38,40,26,38,26,38,26,40,38,26,38,26,38,40,26,38,40,26,38,40,26,57,58,59],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[1,1],[1,1],[1,1],[1,1],[[[3,[2]],3],4],[[[3,[5]],6],7],[[[8,[5]],6],7],[9,10],[11,[[12,[8]]]],[[]],[11,[[13,[8]]]],[[]],[[]],[[]],[[],8],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[9],0,0,[9],[12,[[12,[14]]]],[13,[[13,[14]]]],[8,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[9,10],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[12,9],[13,9],0,0,0,[[17,17]],[17,[[10,[18]]]],[17,[[10,[[19,[18]]]]]],[17,[[13,[[8,[20]]]]]],[17,[[13,[[8,[21]]]]]],[[]],[[]],[[[17,[22]]],[[17,[22]]]],[[]],[[[17,[23]],[17,[23]]],24],[[],17],[17,1],[1,1],[17],[[[17,[2]],[17,[2]]],4],[[[17,[5]],6],7],[[[17,[25]],6],7],[[]],[26,17],[13,17],[[],17],[17,[[10,[18]]]],[17,[[10,[[19,[18]]]]]],[17,4],[[[17,[27]]]],[[],1],[[]],[17,[[13,[[8,[28]]]]]],[17,28],[17,20],[17,21],[[[17,[2]],[17,[2]]],4],[[],17],[17,1],[[[17,[29]],[17,[29]]],[[10,[24]]]],[17,[[10,[30]]]],[17,[[10,[30]]]],[[]],[[]],[[]],[[]],[[17,17]],[[17,30]],[[17,30]],[[[17,[22]],30],[[17,[22]]]],[[17,30],[[17,[22]]]],[[17,17],17],[[[17,[22]],17],[[17,[22]]]],[[17,[17,[22]]],[[17,[22]]]],[[17,17],[[17,[22]]]],[[17,[30,[22]]],[[17,[22]]]],[[17,30],17],[[]],[[],31],[[],15],[[],15],[[],16],0,[[]],[[]],[1,1],[28],[[]],[[],1],[[]],[[]],[28,[[10,[30]]]],[[]],[[]],[[]],[[]],[28],[[],15],[[],15],[[],16],0,0,[[]],[[]],[[]],[[]],[1,1],[1,1],[[[20,[5]],6],7],[[[21,[5]],6],7],[[]],[[]],[[],1],[[],1],[[]],[[]],[[]],[[]],[20,10],[21,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[21],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,[[]],[[]],[32,32],[[]],[1,1],[[]],[[],1],[[]],[[]],[32,[[10,[33]]]],[[]],[[]],[[]],[[]],[32],[[]],[[],15],[[],15],[[],16],0,[[18,17]],[18,[[10,[18]]]],[18,[[10,[[19,[18]]]]]],[18,[[12,[[8,[20]]]]]],[18,[[13,[[8,[20]]]]]],[18,[[13,[[8,[21]]]]]],[18,[[12,[[8,[21]]]]]],[[]],[[]],[[[18,[23]],[18,[23]]],24],[18],[18],[18,30],[18,17],[[],18],[18,1],[1,1],[18,30],[[[18,[2]],[18,[2]]],4],[[[18,[25]],6],7],[[[18,[5]],6],7],[[]],[18,[[10,[18]]]],[18,[[10,[[19,[18]]]]]],[18,4],[[[18,[27]]]],[[],1],[[18,30]],[[18,30]],[[]],[18],[18,20],[18,21],[[[18,[2]],[18,[2]]],4],[18,1],[18,[[10,[18]]]],[[[18,[29]],[18,[29]]],[[10,[24]]]],[18,[[10,[30]]]],[18,[[10,[30]]]],[[]],[[]],[[]],[[]],[[18,17]],[[18,30]],[[18,30]],[18],[[],31],[[],15],[[],15],[[],16],[[],17],[[],30],0,0,0,0,0,0,0,0,0,0,[[33,17]],[33,[[10,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[[]],[[[33,[23]],[33,[23]]],24],[33,34],[33,35],[[[33,[22]]],[[30,[22]]]],[33,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[33],[33,36],[33],[36],[[[33,[2]],[33,[2]]],4],[[33,37]],[[[33,[25]],6],7],[[[33,[5]],6],7],[[]],[[]],[[]],[30,33],[[]],[[]],[[]],[33,[[10,[33]]]],[33,4],[[[33,[27]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[33,30]],[[33,30]],[[]],[[]],[[]],[[]],[[]],[[]],[33,30],[33,4],[33,32],[[[33,[2]],[33,[2]]],4],[33,[[34,[18]]]],[33,1],[33,[[35,[18]]]],[33,[[10,[33]]]],[[[33,[29]],[33,[29]]],[[10,[24]]]],[33,[[10,[33]]]],[33,[[10,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[33,17]],[[33,30]],[[33,30]],[[]],[[],31],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[36,[[10,[33]]]],0,0,0,0,0,[[11,11],11],[[11,11]],[[]],[[]],[11,11],[[]],[[],11],0,[1,1],0,[[11,11],4],[[11,6],7],[[]],[[],1],[[]],[[]],[[]],[[]],[[]],[[11,11],11],[[11,11]],[[]],[[],15],[[],15],[[],16],0,[30,17],[[30,17]],[30,[[10,[[19,[18]]]]]],[30,[[13,[[8,[21]]]]]],[30,[[12,[[8,[21]]]]]],[[]],[[]],[[[30,[22]]],[[30,[22]]]],[[]],[[[30,[23]],[30,[23]]],24],[30],[1,1],[[30,17],[[30,[22]]]],[[[30,[22]],17],[[30,[22]]]],[[30,30],[[30,[22]]]],[[30,[30,[22]]],[[30,[22]]]],[[30,[17,[22]]],[[30,[22]]]],[30,30],[[30,17],30],[30,[[30,[22]]]],[[30,30],30],[[[30,[22]],30],[[30,[22]]]],[30],[[[30,[2]],[30,[2]]],4],[[[30,[5]],6],7],[[[30,[25]],6],7],[[]],[38,30],[12,30],[[],30],[30,[[10,[[19,[18]]]]]],[[[30,[27]]]],[[],1],[[]],[30,[[12,[[8,[28]]]]]],[30,28],[30,21],[[[30,[2]],[30,[2]]],4],[30,17],[30,[[17,[22]]]],[[],30],[[[30,[29]],[30,[29]]],[[10,[24]]]],[30,[[10,[30]]]],[30,[[10,[30]]]],[[]],[[]],[[]],[[]],[[30,17]],[[30,30]],[[30,30]],[30,18],[30,[[19,[18]]]],[30],[[30,[30,[22]]],[[17,[22]]]],[[30,30],[[17,[22]]]],[[[30,[22]],30],[[17,[22]]]],[[30,30],17],[[]],[[],31],[[],15],[[],15],[[],16],0,0,0,0,0,0,0,0,[[]],[[]],[[[39,[22]]],[[39,[22]]]],[[]],[[[39,[23]],39],24],[1,1],[1,1],[1,1],[[[39,[2]],39],4],[[[39,[5]],6],7],[[]],[[[39,[27]]]],[[],1],[[],1],[[],1],[[]],[[[39,[29]],39],[[10,[24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],16],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[22]]],[[40,[22]]]],[[]],[[],[[26,[41]]]],[1,1],[1,1],[1,1],[[[40,[2]],40],4],[[[40,[5]],6],7],[38],[26],[[]],[30,38],[[]],[17,26],[[]],[38,[[10,[40]]]],[26,[[10,[40]]]],[38,[[10,[18]]]],[26,[[10,[18]]]],[[],1],[[],1],[[],1],[[]],[[]],[[]],[38,[[10,[40]]]],[26,[[10,[40]]]],[40,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[26],[[38,1],[[10,[40]]]],[[26,1],[[10,[40]]]],[[]],[38,[[10,[40]]]],[26,[[10,[40]]]],[[38,1],[[10,[40]]]],[[26,1],[[10,[40]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],0,0,0],"p":[[15,"usize"],[8,"PartialEq"],[3,"Visit"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Splitted"],[4,"Bfs"],[4,"Option"],[3,"Size"],[3,"BfsTree"],[3,"BfsForest"],[8,"Iterator"],[4,"Result"],[3,"TypeId"],[3,"Forest"],[3,"Node"],[3,"Pin"],[3,"Iter"],[3,"IterMut"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"Display"],[3,"ForestWalk"],[8,"Hash"],[3,"IntoIter"],[8,"PartialOrd"],[3,"Tree"],[3,"String"],[3,"IterRc"],[4,"RcNode"],[3,"Ref"],[3,"RefMut"],[4,"WeakNode"],[8,"IntoIterator"],[3,"TreeWalk"],[4,"Visit"],[4,"Visit"],[8,"Default"],[8,"Split"],[13,"Tree"],[13,"Forest"],[3,"ScatteredRcNode"],[3,"PiledRcNode"],[3,"ScatteredWeakNode"],[3,"PiledWeakNode"],[13,"Scattered"],[13,"Piled"],[13,"Scattered"],[13,"Piled"],[8,"TupleTree"],[8,"TupleForest"],[13,"Branch"],[13,"Leaf"],[13,"Begin"],[13,"End"],[13,"Leaf"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":[5,5],"n":["is_xid_continue","is_xid_start"],"q":["unicode_ident",""],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"p":[[15,"char"],[15,"bool"]]},\
"weezl":{"doc":"LZW decoder and encoder","t":[4,3,13,13,13,4,4,13,13,13,3,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BitOrder","BufferResult","Done","InvalidCode","Lsb","LzwError","LzwStatus","Msb","NoProgress","Ok","StreamResult","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_read","bytes_written","clone","clone","clone","clone_into","clone_into","clone_into","consumed_in","consumed_out","decode","encode","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","provide","status","status","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Decoder","IntoStream","IntoVec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","decode","decode","decode","decode_all","decode_all","decode_bytes","from","from","from","has_ended","into","into","into","into_stream","into_vec","new","reset","set_buffer","set_buffer_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_tiff_size_switch","Encoder","IntoStream","IntoVec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","encode","encode","encode","encode_all","encode_all","encode_bytes","finish","from","from","from","into","into","into","into_stream","into_vec","new","reset","set_buffer","set_buffer_size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_tiff_size_switch"],"q":["weezl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","weezl::decode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","weezl::encode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The order of bits in bytes.","The result of a coding operation on a pair of buffer.","No more data will be produced because an end marker was …","The input contained an invalid code.","The least significant bit is processed first.","The error kind after unsuccessful coding of an LZW stream.","The status after successful coding of an LZW stream.","The most significant bit is processed first.","No bytes were read or written and no internal state …","Everything went well.","The result of coding into an output stream.","","","","","","","","","","","The total number of bytes consumed from the reader.","The total number of bytes written into the writer.","","","","","","","The number of bytes consumed from the input buffer.","The number of bytes written into the output buffer.","A module for all decoding needs.","A module for all encoding needs.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The status after returning from the write call.","The possible error that occurred.","","","","","","","","","","","","","","","","","","","","The state for decoding data with an LZW algorithm.","A decoding stream sink.","A decoding sink into a vector.","","","","","","","Decode a single chunk of lzw encoded data.","Decode data from a reader.","Decode data from a slice.","Decode data from a reader, requiring an end marker.","Decode data from a slice, requiring an end marker.","Decode some bytes from <code>inp</code> and write result to <code>out</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Check if the decoding has finished.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a decoder into a writer.","Construct a decoder into a vector.","Create a new decoder with the specified bit order and …","Reset all internal state.","Use a particular buffer as an intermediate decode buffer.","Set the size of the intermediate decode buffer.","","","","","","","","","","Create a TIFF compatible decoder with the specified bit …","The state for encoding data with an LZW algorithm.","A encoding stream sink.","A encoding sink into a vector.","","","","","","","Encode a single chunk of data.","Encode data from a reader.","Encode data from a slice.","Encode data from a reader and an end marker.","Decode data from a reader, adding an end marker.","Encode some bytes from <code>inp</code> into <code>out</code>.","Mark the encoding as in the process of finishing.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a encoder into a writer.","Construct an encoder into a vector.","Create a new encoder with the specified bit order and …","Reset all internal state.","Use a particular buffer as an intermediate encode buffer.","Set the size of the intermediate encode buffer.","","","","","","","","","","Create a TIFF compatible encoder with the specified bit …"],"i":[0,0,2,3,1,0,0,1,2,2,0,18,16,1,2,3,18,16,1,2,3,16,16,1,2,3,1,2,3,18,18,0,0,1,2,3,3,18,16,1,2,3,18,16,1,2,3,3,18,16,1,2,3,3,18,16,1,2,3,18,16,1,2,3,18,16,1,2,3,0,0,0,10,14,17,10,14,17,10,14,17,14,17,10,10,14,17,10,10,14,17,10,10,10,10,14,14,10,14,17,10,14,17,10,14,17,10,0,0,0,21,22,23,21,22,23,21,22,23,22,23,21,21,21,22,23,21,22,23,21,21,21,21,22,22,21,22,23,21,22,23,21,22,23,21],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,1],[2,2],[3,3],[[]],[[]],[[]],0,0,0,0,[[1,4],5],[[2,4],5],[[3,4],5],[[3,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],0,0,[[]],[[]],[[]],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[10,[[8,[[12,[11]],3]]]],[[[14,[13]],15],16],0,[[[14,[13]],15],16],0,[10,18],[[]],[[]],[[]],[10,19],[[]],[[]],[[]],[[10,13],[[14,[13]]]],[[10,12],17],[[1,11],10],[10],[[[14,[13]]]],[[[14,[13]],20]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[1,11],10],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[21,[[8,[[12,[11]],3]]]],[[[22,[13]],15],16],0,[[[22,[13]],15],16],0,[21,18],[21],[[]],[[]],[[]],[[]],[[]],[[]],[[21,13],[[22,[13]]]],[[21,12],23],[[1,11],21],[21],[[[22,[13]]]],[[[22,[13]],20]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[1,11],21]],"p":[[4,"BitOrder"],[4,"LzwStatus"],[4,"LzwError"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Decoder"],[15,"u8"],[3,"Vec"],[8,"Write"],[3,"IntoStream"],[8,"BufRead"],[3,"StreamResult"],[3,"IntoVec"],[3,"BufferResult"],[15,"bool"],[15,"usize"],[3,"Encoder"],[3,"IntoStream"],[3,"IntoVec"]]},\
"xml":{"doc":"This crate currently provides an almost XML …","t":[3,2,2,3,0,12,12,12,12,0,0,12,12,12,12,12,12,12,0,0,0,12,12,12,12,0,12,12,12,12,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,3,13,13,4,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,17,17,17,17,17,17,3,6,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,3,4,3,3,13,3,13,6,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,3,13,13,4,3,13,13,6,2,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,3,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12],"n":["EmitterConfig","EventReader","EventWriter","ParserConfig","attribute","autopad_comments","cdata_to_characters","cdata_to_characters","coalesce_characters","common","escape","extra_entities","ignore_comments","ignore_end_of_stream","ignore_root_level_whitespace","indent_string","keep_element_names_stack","line_separator","macros","name","namespace","normalize_empty_elements","pad_self_closing","perform_escaping","perform_indent","reader","replace_unknown_entity_references","trim_whitespace","whitespace_to_characters","write_document_declaration","writer","Attribute","OwnedAttribute","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","name","name","new","new","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","value","Position","TextPosition","Version10","Version11","XmlVersion","advance","advance_to_tab","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","eq","eq","fmt","fmt","fmt","fmt","from","from","into","into","is_name_char","is_name_start_char","is_whitespace_char","is_whitespace_str","new","new_line","position","position","row","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","escape_str_attribute","escape_str_pcdata","Name","OwnedName","ReprDisplay","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","hash","hash","into","into","into","local","local","local_name","local_name","namespace","namespace","namespace_ref","prefix","prefix","prefix_ref","prefix_repr","prefixed","qualified","qualified","repr_display","to_owned","to_owned","to_owned","to_repr","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","CheckedTarget","NS_EMPTY_URI","NS_NO_PREFIX","NS_XMLNS_PREFIX","NS_XMLNS_URI","NS_XML_PREFIX","NS_XML_URI","Namespace","NamespaceMappings","NamespaceStack","NamespaceStackMappings","UriMapping","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_target","clone","clone","clone_into","clone_into","contains","default","empty","empty","eq","eq","extend","extend","extend","fmt","fmt","force_put","from","from","from","from","get","get","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_essentially_empty","iter","next","peek","peek_mut","pop","push_empty","put","put","put_checked","squash","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_pop","type_id","type_id","type_id","type_id","CData","Characters","Comment","EndDocument","EndElement","Error","ErrorKind","EventReader","Events","Io","ParserConfig","ProcessingInstruction","Result","StartDocument","StartElement","Syntax","UnexpectedEof","Utf8","Whitespace","XmlEvent","add_entity","as_writer_event","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cdata_to_characters","cdata_to_characters","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coalesce_characters","coalesce_characters","create_reader","default","description","eq","eq","eq","eq","extra_entities","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","ignore_comments","ignore_comments","ignore_end_of_stream","ignore_end_of_stream","ignore_root_level_whitespace","ignore_root_level_whitespace","into","into","into","into","into","into","into_inner","into_inner","into_iter","into_iter","kind","msg","new","new","new_with_config","next","next","position","position","provide","replace_unknown_entity_references","replace_unknown_entity_references","source","source","source_mut","source_mut","to_owned","to_owned","to_owned","to_owned","to_string","trim_whitespace","trim_whitespace","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","whitespace_to_characters","whitespace_to_characters","0","0","0","0","0","0","0","attributes","data","encoding","name","name","name","namespace","standalone","version","DocumentStartAlreadyEmitted","EmitterConfig","EndElementNameIsNotEqualToLastStartElementName","EndElementNameIsNotSpecified","Error","EventWriter","Io","LastElementNameNotAvailable","Result","XmlEvent","autopad_comments","autopad_comments","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cdata_to_characters","cdata_to_characters","clone","clone_into","create_writer","default","description","eq","events","fmt","fmt","fmt","from","from","from","from","indent_string","indent_string","inner_mut","into","into","into","into_inner","keep_element_names_stack","keep_element_names_stack","line_separator","line_separator","new","new","new_with_config","normalize_empty_elements","normalize_empty_elements","pad_self_closing","pad_self_closing","perform_escaping","perform_indent","perform_indent","provide","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_document_declaration","write_document_declaration","0","CData","Characters","Comment","EndElement","EndElementBuilder","ProcessingInstruction","StartDocument","StartElement","StartElementBuilder","XmlEvent","attr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cdata","characters","comment","default_ns","end_element","fmt","from","from","from","from","from","from","into","into","into","name","ns","processing_instruction","start_element","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","attributes","data","encoding","name","name","name","namespace","standalone","version"],"q":["xml","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::attribute","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::escape","","xml::name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::namespace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::reader::ErrorKind","","","xml::reader::XmlEvent","","","","","","","","","","","","","xml::writer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::writer::Error","xml::writer::events","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::writer::events::XmlEvent","","","","","","","","","","",""],"d":["Emitter configuration structure.","","","Parser configuration structure.","Contains XML attributes manipulation types and functions.","Whether or not to automatically insert leading and …","Whether or not should CDATA be converted to characters. …","Whether or not to emit CDATA events as plain characters. …","Whether or not should sequential <code>Characters</code> events be …","Contains common types and functions used throughout the …","Contains functions for performing XML special characters …","A map of extra entities recognized by the parser. Default …","Whether or not should comments be omitted. Default is true.","Whether or not the parser should ignore the end of stream. …","Whether or not whitespace at the root level of the …","A string which will be used for a single level of …","Whether or not to keep element names to support <code>EndElement</code> …","Line separator used to separate lines in formatted output. …","Contains several macros used in this crate.","Contains XML qualified names manipulation types and …","Contains namespace manipulation types and functions.","Whether or not to convert elements with empty content to …","Whether or not to automatically insert spaces before the …","Whether or not characters in output events will be …","Whether or not the emitted document should be indented. …","Contains high-level interface for a pull-based XML parser.","Whether or not non-unicode entity references get replaced …","Whether or not should whitespace in textual events be …","Whether or not should whitespace be converted to …","Whether or not to write XML document declaration at the …","Contains high-level interface for an events-based XML …","A borrowed version of an XML attribute.","An owned version of an XML attribute.","","Returns a borrowed <code>Attribute</code> out of this owned one.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Attribute name.","Attribute name.","Creates a borrowed attribute using the provided borrowed …","Creates a new owned attribute using the provided owned …","","Creates an owned attribute out of this borrowed one.","","","","","","","","","","Attribute value.","Attribute value.","Get the position in the document corresponding to the …","Represents a position inside some textual document.","XML version 1.0.","XML version 1.1.","XML version enumeration.","Advances the position in a line","Advances the position in a line to the next tab position","","","","","","","","","Column, counting from 0","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the given character is a name character (…","Checks whether the given character is a name start …","Checks whether the given character is a white space …","Checks whether the given string is compound only by white …","Creates a new position initialized to the beginning of the …","Advances the position to the beginning of the next line","Returns the current position or a position corresponding …","","Row, counting from 0","","","","","","","","","","","Performs escaping of common XML characters inside an …","Performs escaping of common XML characters inside PCDATA.","Represents a qualified XML name.","An owned variant of <code>Name</code>.","A wrapper around <code>Name</code> whose <code>Display</code> implementation prints …","","","Constructs a borrowed <code>Name</code> based on this owned name.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Parses the given string slice into a qualified name.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new <code>Name</code> instance representing plain local name.","Returns a new <code>OwnedName</code> instance representing a plain …","A local name, e.g. <code>string</code> in <code>xsi:string</code>.","A local name, e.g. <code>string</code> in <code>xsi:string</code>.","A namespace URI, e.g. <code>http://www.w3.org/2000/xmlns/</code>.","A namespace URI, e.g. <code>http://www.w3.org/2000/xmlns/</code>.","Returns an optional namespace by reference, equivalen to …","A name prefix, e.g. <code>xsi</code> in <code>xsi:string</code>.","A name prefix, e.g. <code>xsi</code> in <code>xsi:string</code>.","Returns an optional prefix by reference, equivalent to …","Returns either a prefix of this name or …","Returns a new <code>Name</code> instance with the given local name and …","Returns a new <code>Name</code> instance representing a qualified name …","Returns a new <code>OwnedName</code> instance representing a qualified …","Returns a structure which can be displayed with <code>std::fmt</code> …","","Returns an owned variant of the qualified name.","","Returns a correct XML representation of this local name …","","","","","","","","","","","","","","","A wrapper around <code>NamespaceStack</code> which implements <code>Extend</code> …","Designates an empty namespace URI, which is equivalent to …","Designates the absence of prefix in a qualified name.","Designates prefix for namespace definitions.","Designates the standard URI for <code>xmlns</code> prefix.","Designates prefix for a namespace containing several …","Designates the standard URI for <code>xml</code> prefix.","Namespace is a map from prefixes to namespace URIs.","An alias for iterator type for namespace mappings …","Namespace stack is a sequence of namespaces.","An iterator over mappings from prefixes to URIs in a …","A type alias for a pair of <code>(prefix, uri)</code> values returned …","","","","","","","","","Returns an object which implements <code>Extend</code> using …","","","","","Checks whether this namespace mapping contains the given …","Returns a namespace stack with default items in it.","Returns an empty namespace.","Returns an empty namespace stack.","","","","","","","","Puts a mapping into this namespace forcefully.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Queries the namespace for the given prefix.","Performs a search for the given prefix in the whole stack.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Checks whether this namespace is empty.","Checks whether this namespace is essentially empty, that …","Returns an iterator over all mappings in this namespace …","","Borrows the topmost namespace immutably, leaving the stack …","Borrows the topmost namespace mutably, leaving the stack …","Removes the topmost namespace in this stack.","Adds an empty namespace to the top of this stack.","Puts a mapping into this namespace.","Puts a mapping into the topmost namespace in this stack.","Puts a mapping into the topmost namespace if this stack …","Combines this stack of namespaces into a single namespace.","","","","","","","","","","","Removes the topmost namespace in this stack.","","","","","Denotes CDATA content.","Denotes character data outside of tags.","Denotes a comment.","Denotes to the end of the document stream.","Denotes an end of an XML element.","An XML parsing error.","","A wrapper around an <code>std::io::Read</code> instance which provides …","An iterator over XML events created from some type …","","Parser configuration structure.","Denotes an XML processing instruction.","A result type yielded by <code>XmlReader</code>.","Corresponds to XML document declaration.","Denotes a beginning of an XML element.","","","","Denotes a chunk of whitespace outside of tags.","An element of an XML input stream.","Adds a new entity mapping and returns an updated config …","Obtains a writer event from this reader event.","","","","","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not should CDATA be converted to characters. …","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not should sequential <code>Characters</code> events be …","Creates an XML reader with this configuration.","","","","","","","A map of extra entities recognized by the parser. Default …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","A convenience method to create an <code>XmlReader</code> from a string …","Sets the field to the provided value and returns updated …","Whether or not should comments be omitted. Default is true.","Sets the field to the provided value and returns updated …","Whether or not the parser should ignore the end of stream. …","Sets the field to the provided value and returns updated …","Whether or not whitespace at the root level of the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this <code>EventReader</code>, returning the underlying reader.","Unwraps the iterator, returning the internal <code>EventReader</code>.","","","","Returns a reference to a message which is contained inside …","Creates a new reader, consuming the given stream.","Returns a new config with default values.","Creates a new reader with the provded configuration, …","Pulls and returns next XML event from the stream.","","Returns the position of the last event produced by the …","","","Sets the field to the provided value and returns updated …","Whether or not non-unicode entity references get replaced …","","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not should whitespace in textual events be …","","","","","","","","","","","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not should whitespace be converted to …","","","","","","","","A list of attributes associated with the element.","Processing instruction content.","XML document encoding.","Processing instruction target.","Qualified name of the element.","Qualified name of the element.","Contents of the namespace mapping at this point of the …","XML standalone declaration.","XML version.","Document declaration has already been written to the …","Emitter configuration structure.","The name of the last opening element is not equal to the …","End element name is not specified when it is needed, for …","An error which may be returned by <code>XmlWriter</code> when writing …","A wrapper around an <code>std::io::Write</code> instance which emits …","An I/O error occured in the underlying <code>Write</code> instance.","The name of the last opening element is not available.","A result type yielded by <code>XmlWriter</code>.","","Sets the field to the provided value and returns updated …","Whether or not to automatically insert leading and …","","","","","","","Sets the field to the provided value and returns updated …","Whether or not to emit CDATA events as plain characters. …","","","Creates an XML writer with this configuration.","","","","Contains <code>XmlEvent</code> datatype, instances of which are …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Sets the field to the provided value and returns updated …","A string which will be used for a single level of …","Returns a mutable reference to the underlying <code>Writer</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this <code>EventWriter</code>, returning the underlying writer.","Sets the field to the provided value and returns updated …","Whether or not to keep element names to support <code>EndElement</code> …","Sets the field to the provided value and returns updated …","Line separator used to separate lines in formatted output. …","Creates a new <code>EventWriter</code> out of an <code>std::io::Write</code> …","Creates an emitter configuration with default values.","Creates a new <code>EventWriter</code> out of an <code>std::io::Write</code> …","Sets the field to the provided value and returns updated …","Whether or not to convert elements with empty content to …","Sets the field to the provided value and returns updated …","Whether or not to automatically insert spaces before the …","Whether or not characters in output events will be …","Sets the field to the provided value and returns updated …","Whether or not the emitted document should be indented. …","","","","","","","","","","","","","Writes the next piece of XML document according to the …","Sets the field to the provided value and returns updated …","Whether or not to write XML document declaration at the …","","Denotes CDATA content.","Denotes character data outside of tags.","Denotes a comment.","Denotes an end of an XML element.","","Denotes an XML processing instruction.","Corresponds to XML document declaration.","Denotes a beginning of an XML element.","A builder for a starting element event.","A part of an XML output stream.","Sets an attribute value of this element to the given …","","","","","","","Returns a CDATA event.","Returns a regular characters (PCDATA) event.","Returns a comment event.","Adds a default namespace mapping to the current namespace …","Returns a builder for an closing element.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets the name of this closing element.","Adds a namespace to the current namespace context.","Returns an writer event for a processing instruction.","Returns a builder for a starting element.","","","","","","","","","","","","","A list of attributes associated with the element.","Processing instruction content.","XML document encoding.","Processing instruction target.","Qualified name of the element.","Optional qualified name of the element.","Contents of the namespace mapping at this point of the …","XML standalone declaration.","XML version."],"i":[0,0,0,0,0,36,25,36,25,0,0,25,25,25,25,36,36,36,0,0,0,36,36,36,36,0,25,25,25,36,0,0,0,2,1,1,2,1,2,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,0,0,15,15,0,13,13,13,15,13,15,13,15,13,15,13,13,15,13,13,15,15,13,15,13,15,0,0,0,0,13,13,43,13,13,13,15,13,15,13,15,13,15,13,15,0,0,0,0,0,18,6,8,8,18,6,8,6,8,6,8,6,8,18,6,6,8,8,18,6,6,6,8,8,8,6,8,18,6,8,6,8,6,8,6,8,8,6,8,8,6,6,6,8,6,6,6,8,6,18,6,8,18,6,8,18,6,8,18,6,8,22,20,0,0,0,0,0,0,0,0,0,0,0,0,23,21,22,20,23,21,22,20,20,22,20,22,20,22,20,22,20,22,20,21,22,20,22,20,22,23,21,22,20,22,20,23,21,22,20,23,22,20,22,22,20,23,20,20,20,20,22,20,20,20,22,20,23,21,22,20,23,21,22,20,20,23,21,22,20,26,26,26,26,26,0,0,0,0,28,0,26,0,26,26,28,28,28,26,0,25,26,31,33,25,26,28,29,31,33,25,26,28,29,25,25,25,26,28,29,25,26,28,29,25,25,25,25,29,25,26,28,29,25,25,26,28,29,29,31,33,25,26,28,29,29,29,31,25,25,25,25,25,25,31,33,25,26,28,29,31,33,31,33,29,29,31,25,31,31,33,31,29,29,25,25,31,33,31,33,25,26,28,29,29,25,25,31,33,25,26,28,29,31,33,25,26,28,29,31,33,25,26,28,29,25,25,44,45,46,47,48,49,50,51,52,53,52,51,54,51,53,53,39,0,39,39,0,0,39,39,0,0,36,36,38,39,36,38,39,36,36,36,36,36,36,36,39,36,0,39,39,36,38,39,39,36,36,36,38,38,39,36,38,36,36,36,36,38,36,38,36,36,36,36,36,36,36,39,36,39,38,39,36,38,39,36,38,39,36,38,36,36,55,27,27,27,27,0,27,27,27,0,0,41,42,41,27,42,41,27,27,27,27,41,27,27,42,41,27,27,27,27,42,41,27,42,41,27,27,42,41,27,42,41,27,42,41,27,56,57,58,59,60,61,60,59,62,59,61,61],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[1,2],[[]],[[]],[[]],[2,2],[1,1],[[]],[[]],[[2,2],3],[[1,1],3],[[2,4],5],[[2,4],5],[[1,4],5],[[1,4],5],[[]],[[]],[2],[1],[[]],[[]],0,0,[[6,7],2],[[8,[10,[9]]],1],[[]],[2,1],[[]],[[],9],[[],9],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,0,0,0,[[13,14]],[[13,14]],[[]],[[]],[[]],[[]],[13,13],[15,15],[[]],[[]],0,[[13,13],3],[[15,15],3],[[13,4],5],[[13,4],5],[[15,4],5],[[15,4],5],[[]],[[]],[[]],[[]],[16,3],[16,3],[16,3],[7,3],[[],13],[13],[[],13],[13,13],0,[[]],[[]],[[],9],[[],9],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[7,[[17,[7]]]],[7,[[17,[7]]]],0,0,0,[[]],[[]],[8,6],[[]],[[]],[[]],[[]],[6,6],[8,8],[[]],[[]],[[6,6],3],[[8,8],3],[[18,4],5],[[6,4],5],[[6,4],5],[[8,4],5],[[8,4],5],[[]],[[]],[[],6],[7,6],[6,8],[[]],[7,[[11,[8]]]],[6],[8],[[]],[[]],[[]],[7,6],[[],8],0,0,0,0,[8,[[19,[7]]]],0,0,[8,[[19,[7]]]],[6,7],[[7,7],6],[[7,7,[19,[7]]],6],[19,8],[6,18],[[]],[6,8],[[]],[6,9],[[],9],[[],9],[[],9],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,21],[22,22],[20,20],[[]],[[]],[22,3],[[],20],[[],22],[[],20],[[22,22],3],[[20,20],3],[21],[22],[20],[[22,4],5],[[20,4],5],[22,[[19,[9]]]],[[]],[[]],[[]],[[]],[22,[[19,[7]]]],[20,[[19,[7]]]],[[]],[[]],[[]],[[]],[[]],[22],[20],[22,3],[22,3],[20,23],[23,[[19,[24]]]],[20,22],[20,22],[20,22],[20,20],[22,3],[20,3],[20,3],[20,22],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[20,[[19,[22]]]],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[25,[10,[9]],[10,[9]]],25],[26,[[19,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,3],25],0,[25,25],[26,26],[28,28],[29,29],[[]],[[]],[[]],[[]],[[25,3],25],0,[[25,30],[[31,[30]]]],[[],25],[29,7],[[25,25],3],[[26,26],3],[[28,28],3],[[29,29],3],0,[[25,4],5],[[26,4],5],[[28,4],5],[[29,4],5],[[29,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[32,29],[7,31],[[25,3],25],0,[[25,3],25],0,[[25,3],25],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[31,[30]]],30],[[[33,[30]]],[[31,[30]]]],[[[31,[30]]],[[33,[30]]]],[[]],[29,28],[29,7],[30,[[31,[30]]]],[[],25],[[30,25],[[31,[30]]]],[[[31,[30]]],[[34,[26]]]],[[[33,[30]]],[[19,[[34,[26]]]]]],[[[31,[30]]],13],[29,13],[35],[[25,3],25],0,[[[31,[30]]]],[[[33,[30]]]],[[[31,[30]]]],[[[33,[30]]]],[[]],[[]],[[]],[[]],[[],9],[[25,3],25],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[25,3],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[36,3],36],0,[[]],[[]],[[]],[[]],[[]],[[]],[[36,3],36],0,[36,36],[[]],[[36,37],[[38,[37]]]],[[],36],[39,7],[[36,36],3],0,[[39,4],5],[[39,4],5],[[36,4],5],[[]],[[]],[32,39],[[]],[[36,[10,[[17,[7]]]]],36],0,[[[38,[37]]]],[[]],[[]],[[]],[[[38,[37]]],37],[[36,3],36],0,[[36,[10,[[17,[7]]]]],36],0,[37,[[38,[37]]]],[[],36],[[37,36],[[38,[37]]]],[[36,3],36],0,[[36,3],36],0,0,[[36,3],36],0,[35],[[]],[[],9],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[[38,[37]]],40],[[36,3],36],0,0,0,0,0,0,0,0,0,0,0,0,[[41,7],41],[[]],[[]],[[]],[[]],[[]],[[]],[7,27],[7,27],[7,27],[41,41],[[],42],[[27,4],5],[[]],[[]],[41,27],[7,27],[42,27],[[]],[[]],[[]],[[]],[42,42],[41,41],[[7,[19,[7]]],27],[[],41],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"OwnedAttribute"],[3,"Attribute"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Name"],[15,"str"],[3,"OwnedName"],[3,"String"],[8,"Into"],[4,"Result"],[3,"TypeId"],[3,"TextPosition"],[15,"u8"],[4,"XmlVersion"],[15,"char"],[4,"Cow"],[3,"ReprDisplay"],[4,"Option"],[3,"NamespaceStack"],[3,"CheckedTarget"],[3,"Namespace"],[3,"NamespaceStackMappings"],[6,"UriMapping"],[3,"ParserConfig"],[4,"XmlEvent"],[4,"XmlEvent"],[4,"ErrorKind"],[3,"Error"],[8,"Read"],[3,"EventReader"],[3,"Error"],[3,"Events"],[6,"Result"],[3,"Demand"],[3,"EmitterConfig"],[8,"Write"],[3,"EventWriter"],[4,"Error"],[6,"Result"],[3,"StartElementBuilder"],[3,"EndElementBuilder"],[8,"Position"],[13,"Syntax"],[13,"Io"],[13,"Utf8"],[13,"CData"],[13,"Comment"],[13,"Characters"],[13,"Whitespace"],[13,"StartElement"],[13,"ProcessingInstruction"],[13,"StartDocument"],[13,"EndElement"],[13,"Io"],[13,"CData"],[13,"Comment"],[13,"Characters"],[13,"StartElement"],[13,"ProcessingInstruction"],[13,"StartDocument"],[13,"EndElement"]]},\
"xmltree":{"doc":"A simple library for parsing an XML file into an in-memory …","t":[12,13,13,13,13,3,13,8,3,13,13,4,13,13,13,3,4,13,13,4,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,12,10,12,12,12,11,11,11,12,11,12,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,12,12],"n":["0","CData","CannotParse","Comment","DocumentStartAlreadyEmitted","Element","Element","ElementPredicate","EmitterConfig","EndElementNameIsNotEqualToLastStartElementName","EndElementNameIsNotSpecified","Error","Io","LastElementNameNotAvailable","MalformedXml","Namespace","ParseError","ProcessingInstruction","Text","XMLNode","as_cdata","as_comment","as_element","as_mut_element","as_processing_instruction","as_text","attributes","autopad_comments","autopad_comments","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cdata_to_characters","cdata_to_characters","children","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contains","create_writer","default","description","description","empty","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_put","from","from","from","from","from","from","from","get","get_child","get_mut_child","get_text","indent_string","indent_string","into","into","into","into","into","into","into_iter","is_empty","is_essentially_empty","keep_element_names_stack","keep_element_names_stack","line_separator","line_separator","match_element","name","namespace","namespaces","new","new","normalize_empty_elements","normalize_empty_elements","pad_self_closing","pad_self_closing","parse","parse_all","perform_escaping","perform_indent","perform_indent","prefix","provide","provide","put","take_child","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write","write_document_declaration","write_document_declaration","write_with_config","0","0","0","0","0","0","0","1"],"q":["xmltree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xmltree::Error","xmltree::ParseError","xmltree::XMLNode","","","","",""],"d":["","","This library is unable to process this XML. This can occur …","","Document declaration has already been written to the …","Represents an XML element.","","A predicate for matching elements.","Emitter configuration structure.","The name of the last opening element is not equal to the …","End element name is not specified when it is needed, for …","An error which may be returned by <code>XmlWriter</code> when writing …","An I/O error occured in the underlying <code>Write</code> instance.","The name of the last opening element is not available.","The XML is invalid","Namespace is a map from prefixes to namespace URIs.","Errors that can occur parsing XML","","","","","","","","","","The Element attributes","Sets the field to the provided value and returns updated …","Whether or not to automatically insert leading and …","","","","","","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not to emit CDATA events as plain characters. …","Children","","","","","","","","","Checks whether this namespace mapping contains the given …","Creates an XML writer with this configuration.","","","","Returns an empty namespace.","","","","","","","","","","","","","","","","","","Puts a mapping into this namespace forcefully.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Queries the namespace for the given prefix.","Find a child element with the given name and return a …","Find a child element with the given name and return a …","Returns the inner text/cdata of this element, if any.","Sets the field to the provided value and returns updated …","A string which will be used for a single level of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks whether this namespace is empty.","Checks whether this namespace is essentially empty, that …","Sets the field to the provided value and returns updated …","Whether or not to keep element names to support <code>EndElement</code> …","Sets the field to the provided value and returns updated …","Line separator used to separate lines in formatted output. …","","The name of the Element.  Does not include any namespace …","This elements namespace, if any","The full list of namespaces, if any","Create a new empty element with given name","Creates an emitter configuration with default values.","Sets the field to the provided value and returns updated …","Whether or not to convert elements with empty content to …","Sets the field to the provided value and returns updated …","Whether or not to automatically insert spaces before the …","Parses some data into an Element","Parses some data into a list of <code>XMLNode</code>s","Whether or not characters in output events will be …","Sets the field to the provided value and returns updated …","Whether or not the emitted document should be indented. …","This elements prefix, if any","","","Puts a mapping into this namespace.","Find a child element with the given name, remove and …","","","","","","","","","","","","","","","","","","","","","","","","","Writes out this element as the root element in an new XML …","Sets the field to the provided value and returns updated …","Whether or not to write XML document declaration at the …","Writes out this element as the root element in a new XML …","","","","","","","",""],"i":[9,1,7,1,11,0,1,0,0,11,11,0,11,11,7,0,0,1,1,0,1,1,1,1,1,1,4,5,5,1,4,7,9,11,5,1,4,7,9,11,5,7,5,5,4,1,4,9,5,1,4,9,5,9,5,5,7,11,9,1,4,9,5,1,4,9,5,9,1,4,7,7,9,11,11,5,9,1,4,7,9,11,11,5,9,4,4,4,5,5,1,4,7,9,11,5,9,9,9,5,5,5,5,18,4,4,4,4,5,5,5,5,5,4,4,5,5,5,4,7,11,9,4,1,4,9,5,7,11,1,4,7,9,11,5,1,4,7,9,11,5,1,4,7,9,11,5,4,5,5,4,25,26,27,28,29,30,31,31],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[1,[[3,[2]]]],[1,[[3,[4]]]],[1,[[3,[4]]]],[1,3],[1,[[3,[2]]]],0,[[5,6],5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[3,[8]]]],[[5,6],5],0,0,[1,1],[4,4],[9,9],[5,5],[[]],[[]],[[]],[[]],[9,6],[5,10],[[],5],[7,2],[11,2],[[],9],[[1,1],6],[[4,4],6],[[9,9],6],[[5,5],6],[[],6],[[],6],[[],6],[[],6],[9],[[1,12],13],[[4,12],13],[[7,12],13],[[7,12],13],[[9,12],[[15,[14]]]],[[11,12],[[15,[14]]]],[[11,12],[[15,[14]]]],[[5,12],[[15,[14]]]],[9,[[3,[16]]]],[[]],[[]],[[]],[[]],[[]],[17,11],[[]],[9,[[3,[2]]]],[[4,18],[[3,[4]]]],[[4,18],[[3,[4]]]],[4,[[3,[[19,[2]]]]]],[5,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[9],[9,6],[9,6],[[5,6],5],0,[5,5],0,[4,6],0,0,0,[2,4],[[],5],[[5,6],5],0,[[5,6],5],0,[20,[[15,[4,7]]]],[20,[[15,[[21,[1]],7]]]],0,[[5,6],5],0,0,[22],[22],[9,6],[[4,18],[[3,[4]]]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[4,24],[[15,[11]]]],[[5,6],5],0,[[4,24,5],[[15,[11]]]],0,0,0,0,0,0,0,0],"p":[[4,"XMLNode"],[15,"str"],[4,"Option"],[3,"Element"],[3,"EmitterConfig"],[15,"bool"],[4,"ParseError"],[8,"Error"],[3,"Namespace"],[3,"EventWriter"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[3,"String"],[3,"Error"],[8,"ElementPredicate"],[4,"Cow"],[8,"Read"],[3,"Vec"],[3,"Demand"],[3,"TypeId"],[8,"Write"],[13,"Io"],[13,"MalformedXml"],[13,"Element"],[13,"Comment"],[13,"CData"],[13,"Text"],[13,"ProcessingInstruction"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
