var searchIndex = JSON.parse('{\
"glifparser":{"doc":"A parser and writer for UFO <code>.glif</code> files.","t":[8,13,13,4,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,10,11,11,11,10,12,12,3,4,13,8,3,13,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,3,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,3,8,3,3,3,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,6,4,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,8,8,4,13,13,13,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,11,10,12,11,11,12,11,11,12,0,10,11,12,5,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,12,12,5,5,0,10,11,12,12,13,4,13,13,4,13,13,3,3,13,13,3,4,13,4,4,13,3,3,6,3,13,13,13,13,13,13,3,13,4,4,4,4,13,13,13,13,13,13,13,13,13,3,3,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,12,12,17,3,8,8,11,11,11,11,12,11,11,11,11,11,11,12,11,10,12,11,12,12,11,11,11,11,11,11,10,10,11,11,11,11,11,12,8,6,6,8,16,8,10,10,10,10,10,13,13,13,3,13,4,8,8,13,13,13,8,8,4,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,12,12,12,12,12,12,12,3,3,12,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,13,13,13,4,4,13,13,3,3,4,3,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,8,10,6,13,13,8,6,3,4,8,8,13,13,6,4,16,8,13,13,8,8,8,13,8,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,0,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,8,4,16,16,8,13,8,8,8,13,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,10,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,5,5,8,8,8,6,6,6,3,3,8,8,8,8,11,11,11,11,12,12,11,11,11,11,12,11,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,10,10,11,11,11,11,10,11,11,13,13,4,13,4,4,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,8,3,4,8,3,13,13,13,18,13,3,8,8,4,13,13,8,13,4,18,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,12,12,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,12,12,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Codepoint","Float","Integer","IntegerOrFloat","IsValid","PointLike","add","add","add","add","add","add","add","add","add","add","add","add","add","anchor","approx_eq","borrow","borrow_mut","check_smooth","cleanly_downgradable","clone","clone_into","color","component","conics_to_cubics","contour_prev_next","contour_prev_next_handles","default","descendants","deserialize","display","div","div","div","div","div","div","div","div","div","div","div","div","div","downgrade","downgrade_contour_ops","eq","error","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_kurbo","from_skia_path","from_skoutline","from_str","glif","guideline","hash","height","holding_float","holding_integer","image","into","into_glifpoints","into_kurbo_vec","into_kurbo_vec","into_xml","is_open","is_point_smooth_within","matrix","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","next","outline","partial_cmp","pedantry","point","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prev","read","read_from_filename","read_from_filename_pedantic","read_pedantic","refigure_point_types","refigure_point_types","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","serialize","set_x","set_y","string","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_bits","to_owned","to_reversed","to_reversed","to_skia_path","to_skia_paths","to_skia_paths","to_string","try_from","try_from","try_into","type_id","ulps","unwrap_float","unwrap_integer","upgrade","upgrade_contour_ops","write","write_to_filename","x","xml","xml","xml","y","0","0","Anchor","AnchorType","Base","FromOption","GlifAnchor","Mark","atype","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class","class","clone","clone","clone","clone_into","clone_into","clone_into","data","default","default","default","descendants","descendants","descendants","deserialize","deserialize","deserialize","eq","eq","eq","equivalent","fmt","fmt","fmt","from","from","from","from","from_glif","from_option","height","height","height","into","into","into","is_base","is_mark","ne","ne","new","new","new","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap_base","unwrap_mark","x","x","xml","y","y","Color","a","as_plist_value","b","borrow","borrow_mut","clone","clone_into","default","descendants","deserialize","eq","fmt","from","from","from_rgba","from_str","g","height","into","into","ne","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","r","serialize","to_owned","to_string","try_from","try_into","type_id","Component","ComponentRect","FlattenedGlif","Forest","GlifComponent","GlifComponents","Node","Tree","abandon","append","append","append","back","back","back_mut","back_mut","back_mut","base","bfs","bfs","bfs_children","bfs_children_mut","bfs_children_mut","bfs_mut","bfs_mut","bfs_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","data","data_mut","deep_clone","deep_clone_forest","default","default","default","default","default","default","degree","degree","deref","descendants","descendants","descendants","descendants","descendants","descendants","descendants","deserialize","deserialize","deserialize","deserialize","detach","div","div","div","div","div","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","filename","flattened","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_rect_and_name","from_tuple","from_tuple","front","front","front_mut","front_mut","front_mut","glif","has_no_child","has_no_child","hash","hash","hash","hash","height","height","height","height","height","height","height","identifier","insert_next_sib","insert_prev_sib","into","into","into","into","into","into","into","into_bfs","into_bfs","into_iter","into_iter","iter","iter","iter_mut","iter_mut","iter_mut","matrix","matrix","maxx","maxy","minx","miny","name","ne","ne","ne","ne","ne","ne","ne","neg","new","new","new","new","new","node_count","node_count","parent","partial_cmp","partial_cmp","partial_cmp","pop_back","pop_back","pop_back","pop_front","pop_front","pop_front","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","prepend","prepend","prepend","push_back","push_back","push_back","push_front","push_front","push_front","refers_to","root","root","root_mut","serialize","serialize","serialize","serialize","set_file_name","split","sub","sub","sub","sub","sub","sub","to_component","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec","xOffset","xScale","xml","xyScale","yOffset","yScale","yxScale","ColorNotRGBA","ContourLenOneUnexpected","ContourLenZeroUnexpected","ContourNoNext","ContourNoPrevious","GlifComponentsCyclical","GlifContourHasBadPointType","GlifFileIoError","GlifFilenameInsane","GlifFilenameNotSet","GlifInputError","GlifLibError","GlifNotUtf8","GlifOutlineHasBadPointType","GlifParserError","GlifParserResult","GlifStringConversionError","HasControlCharacter","ImageIoError","ImageNotDecodable","ImageNotLoaded","ImageNotPNG","LenZero","PedanticXmlParseError","PointIdxOutOfBounds","TypeConversionError","XmlParseError","XmlWriteError","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","descendants","descendants","fmt","fmt","fmt","fmt","from","from","from","from","from","from","height","height","into","into","mfek","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","ci","idx","len","pi","pi","ptype","ptype","req_type","req_variant","c","idx","MoreContoursThanOps","MoreLayersThanVecOps","MoreOpsThanContours","MoreVecOpsThanLayers","UpgradeContourOpsError","borrow","borrow_mut","clone","clone_into","descendants","deserialize","eq","fmt","fmt","from","height","into","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","serialize","to_owned","to_string","try_from","try_into","type_id","FromXML","Glif","GlifLike","IntoXML","Lib","None","Plist","Xml","advance_xml","anchors","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","components","default","default","descendants","descendants","deserialize","deserialize","eq","eq","filename","filename","filename","filename_is_sane","flattened","fmt","fmt","from","from","from","from","from_xml","guidelines","height","height","images","into","into","lib","mfek","name","name","name","name_to_filename","name_to_filename","ne","ne","new","note","order","outline","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","read","read_from_filename","read_from_filename_pedantic","read_pedantic","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unicode","width","write","write_to_filename","xml","xml","xml","0","0","Bevel","CapType","Circle","Circle","ContourOperations","Custom","DashAlongPath","DashContour","DashCull","Difference","Fixed","HistoryEntry","InterpolationType","Intersect","JoinType","LayerOperation","Linear","MFEKContour","MFEKGlif","MFEKOutline","MFEKPointData","Miter","Null","Off","Off","Off","On","PAPContour","PatternAlongPath","PatternCopies","PatternHandleDiscontinuity","PatternStretch","PatternSubdivide","Repeated","Round","Round","Simple","Single","Spacing","Split","Square","Union","VWSContour","VWSHandle","VariableWidthStroke","XOR","anchors","area_cutoff","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cap_end_type","cap_start_type","center_pattern","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","component_rects","components","contour_idx","copies","cull","dash_desc","default","default","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","descendants","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","downgrade_contour_ops","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","filename","filename","flattened","flattened","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","glyph","guidelines","guidelines","handles","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","height","history","include_last_path","inner","interpolation","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_vertical","join_type","layer","layer_idx","layers","left_offset","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","normal_offset","note","operation","order","paint_cap","paint_join","pattern","pattern_scale","point_idx","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","prevent_overdraw","remove_external","remove_internal","reverse_culling","reverse_path","right_offset","selected","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","simplify","spacing","stretch","stroke_width","subdivide","tangent_offset","tangent_offset","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","traits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_pass_culling","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","upgrade_contour_ops","width","width","data","data","data","0","0","0","DEFAULT_LAYER_FORMAT_STR","Layer","ToLayerContentsPlist","ToLayerInfoPlist","borrow","borrow_mut","clone","clone_into","color","descendants","deserialize","eq","fmt","from","height","images","into","merge_layercontents_plists","name","ne","operation","outline","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","serialize","to_glyphs_dir","to_layercontents_plist","to_layerinfo_plist","to_layerinfo_plist","to_owned","try_from","try_into","type_id","visible","DowngradeOutline","MFEKGlifContourOperations","MFEKOutlineContourOperations","ManageContourOperations","Output","UpgradeOutline","cleanly_downgradable","downgrade","downgrade_contour_ops","upgrade","upgrade_contour_ops","CData","CannotParse","Comment","Element","Element","Error","FromXML","IntoXML","MalformedXml","ProcessingInstruction","Text","TryIntoXML","XMLConversion","XMLNode","as_cdata","as_comment","as_element","as_mut_element","as_processing_instruction","as_text","attributes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","children","clone","clone","clone_into","clone_into","descendants","descendants","descendants","description","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_xml","from_xml_string","from_xml_string","from_xml_string","get_child","get_mut_child","get_text","height","height","height","into","into","into","into_xml","into_xml","into_xml","name","namespace","namespaces","ne","ne","new","parse","parse_all","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","prefix","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","take_child","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_xml","type_id","type_id","type_id","write","write_with_config","xml","0","0","0","0","0","0","1","Guideline","GuidelinePoint","angle","as_plist_dict","at","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color","color","data","data","default","default","descendants","descendants","deserialize","deserialize","eq","eq","fmt","fmt","from","from","from_x_y_angle","height","height","identifier","identifier","into","into","into","name","name","ne","ne","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","xml","y","BMP","Bitmap","Data","DataLoadState","DataOrBitmap","Decoded","GIF","GlifImage","Image","ImageCodec","ImageData","JPEG","Loaded","LoadedDecodeFailed","NotTried","PNG","TIFF","TriedAndFailed","Unknown","WebP","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codec","color","color","data","data","data","decode","descendants","descendants","descendants","descendants","descendants","descendants","deserialize","eq","eq","eq","eq","eq","eq","filename","filename","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_filename","from_filename","guess_codec","height","height","height","height","height","height","identifier","into","into","into","into","into","into","load","matrix","matrix","ne","ne","ne","ne","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","serialize","set_matrix","state","to_image_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_xml","type_id","type_id","type_id","type_id","type_id","type_id","xOffset","xScale","xyScale","yOffset","yScale","yxScale","0","height","pixels","width","0","1","2","3","4","5","Affine","FLIP_X","FLIP_Y","GlifMatrix","IDENTITY","as_coeffs","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","descendants","descendants","deserialize","determinant","eq","eq","fmt","fmt","from","from","from","height","height","into","into","into","inverse","is_finite","is_nan","map_unit_square","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","ne","ne","new","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","rotate","scale","scale_non_uniform","serialize","skia","to_owned","to_owned","to_skia_matrix","to_skia_matrix","transform_rect_bbox","translate","try_from","try_from","try_into","try_into","type_id","type_id","ToSkiaMatrix","to_skia_matrix","Contour","Cubic","Cubic","FromKurbo","GlifContour","GlifOutline","GlifOutlineType","IntoGlifPoints","IntoKurbo","Mixed","OnlyCorners","Outline","OutlineType","Output","QuadToCubic","Quadratic","Quadratic","RefigurePointTypes","Reverse","RoundToInt","Spiro","ToOutline","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","components","contour","contours","create","default","default","default","deref","deref_mut","descendants","descendants","descendants","deserialize","deserialize","deserialize","eq","eq","eq","equivalent","equivalent","figure_type","fmt","fmt","fmt","from","from","from","from","from","from_kurbo","get_type","hash","hash","hash","height","height","height","into","into","into","into_glifpoints","into_kurbo","into_kurbo","into_kurbo_vec","ne","new","otype","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","quad_to_cubic","refigure_point_types","round_to_int","serialize","serialize","serialize","skia","to_outline","to_owned","to_owned","to_owned","to_reversed","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","CheckSmooth","End","Error","Error","GenericPrevNext","Head","PrevNext","Reverse","State","Tail","borrow","borrow_mut","check_smooth","clone","clone_into","contour_prev_next","contour_prev_next_handles","descendants","eq","equivalent","fmt","from","hash","height","idx_at_start_or_end","idx_is_insane","idx_is_sane","idx_sane","idx_which_end","into","is_closed","is_open","is_point_smooth","is_point_smooth_within","next","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prev","prev_next","reverse","reverse","reverse","to_owned","to_reversed","try_from","try_into","type_id","cubic_outline","quadratic_outline","ConicsToCubics","FromSkOutline","FromSkiaPath","SkContour","SkOutline","SkPointTuple","SkiaPaths","SkiaPointTransforms","SplitSkiaPath","ToSkiaPath","ToSkiaPaths","TryIntoPointType","borrow","borrow","borrow_mut","borrow_mut","calc_x","calc_y","clone","clone","clone_into","clone_into","closed","combined","conics_to_cubics","default","default","descendants","descendants","eq","from","from","from_skia_path","from_skoutline","height","height","into","into","into","ne","new","open","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","split_skia_path","to_owned","to_owned","to_skia_path","to_skia_paths","try_from","try_from","try_into","try_into","try_into_pointtype","type_id","type_id","Always","Anchor","FloatClass","GlifParser","Level","Mend","Never","OpenType","Pedantry","TrueType","Ufo","UfoSpecErrorsOnly","UfoSpecOutdatedOnly","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","descendants","descendants","descendants","descendants","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","height","height","height","height","into","into","into","into","is_always","is_anchor","is_glif_parser","is_never","is_open_type","is_true_type","is_ufo","is_ufo_spec_errors_only","is_ufo_spec_outdated_only","level","maybe_round","mend","ne","new","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap_always","unwrap_anchor","unwrap_glif_parser","unwrap_never","unwrap_open_type","unwrap_true_type","unwrap_ufo","unwrap_ufo_spec_errors_only","unwrap_ufo_spec_outdated_only","A","At","B","Colocated","Curve","FromKurboPoint","GlifPoint","Handle","IsValid","KurboPoint","Line","Move","Neither","ORIGIN","OffCurve","Point","PointData","PointLike","PointType","QClose","QCurve","ToKurboPoint","Undefined","WhichHandle","ZERO","a","add","add","add_assign","add_assign","apply_matrix","as_kpoint","as_kpoint","as_kpoint","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","default","default","default","default","default","default","descendants","descendants","descendants","descendants","descendants","descendants","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","distance","distance_squared","eq","eq","eq","eq","eq","eq","expand","expect_valid","expect_valid","expect_valid","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fields","from_handle","from_kurbo","from_kurbo","from_kurbo_offcurve","from_str","from_str","from_x_y_a_b_type","from_x_y_type","from_x_y_type","handle","handle_as_gpoint","handle_as_kpoint","handle_as_point","handle_or_colocated","hash","hash","hash","height","height","height","height","height","height","into","into","into","into","into","into","into","into","is_finite","is_nan","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid_oncurve","lerp","midpoint","name","name","name","ne","ne","ne","ne","new","new","new","opposite","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","ptype","ptype","round","round_to_int","round_to_int","serialize","serialize","serialize","serialize","serialize","serialize","set_handle","set_x","set_x","set_x","set_y","set_y","set_y","smooth","smooth","sub","sub","sub","sub_assign","sub_assign","to_kurbo","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_vec2","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","x","x","x","x","x","x","x32","x32","x32","x64","x64","x64","xml","y","y","y","y","y","y","y32","y32","y32","y64","y64","y64","0","1","GlifString","GlifStringLenOne","ToGlifString","as_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","descendants","descendants","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","from","from","from_str","height","height","into","into","ne","ne","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","serialize","serialize","to_glif_string","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["glifparserglifparser::IntegerOrFloat","","glifparser::anchor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::componentglifparser::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::error::GlifParserError","","","","","","","","","","","","","","","","","","","","glifparser::error::GlifStringConversionError","","glifparser::error::mfek","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif::Lib","","glifparser::glif::mfekglifparser::glif::mfek::ContourOperations","","","glifparser::glif::mfek::PatternCopies","glifparser::glif::mfek::PatternHandleDiscontinuity","glifparser::glif::mfek::PatternSubdivide","glifparser::glif::mfek::layer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif::mfek::traits","","","","","","","","","","","glifparser::glif::xml","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif::xml::Error","glifparser::glif::xml::XMLNode","","","","","","glifparser::guideline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::image::DataOrBitmap","","","","glifparser::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::matrix::skia","","glifparser::outline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::outline::contour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::outline::create","","glifparser::outline::skia","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::pedantry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::pointglifparser::point::Handle","","glifparser::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","The UFO data type “integer or float”.","","","","","","","","","","","","","","","",".glif <code>&lt;anchor&gt;</code> + ufo2ft <code>_</code> mark/base determination","","","","","","","","impl’s/struct for shared <code>&lt;image&gt;</code>/<code>&lt;guideline&gt;</code>/layer color …",".glif <code>&lt;component&gt;</code>","","Error will always be GlifParserError::PointIdxOutOfBounds","","","","","","","","","","","","","","","","","","","","","","Provides main error type <code>GlifParserError</code> &amp; its impl’s","","","","","","","","","","","","","","","","","","","","","<code>Glif</code> (<code>&lt;glif&gt;</code> toplevel), read/write modules, + <code>Lib</code>",".glif <code>&lt;guideline&gt;</code>","","","","",".glif <code>&lt;image&gt;</code> w/ability to read to a bitmap if filename …","","","","","","","","Shared behavior between <code>&lt;component&gt;</code>, <code>&lt;image&gt;</code> based on …","","","","","","","","","","","","","","","",".glif <code>&lt;outline&gt;</code> and <code>&lt;contour&gt;</code>","","When reading .glif files, how strict ought we to be? Can …",".glif <code>&lt;point&gt;</code>","","","","","","Read UFO .glif XML to Glif struct. This should only be …","If you have a known filename, it is always preferable to …","","","","","","","","","","","","","","","","","","","","","Enforcers for UFO format string rules — no control …","","","","","","","","","","","","","","","","","","","","","","","","","","","Give back the float we’re holding…panic if we’re …","Give back the float we’re holding…panic if we’re …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a default value for this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of <code>Node</code>s as its children.","","","Composed of <code>data</code> and a list of its child <code>Node</code>s. Size …","Composed of a root <code>Node</code> and a list of its child <code>Node</code>s.","Removes and returns the given <code>Tree</code>’s children.","Adds all the forest’s trees at back of children list.","Add all the forest’s trees at back of children list","Adds all the forest’s trees at back of children list.","","Returns the last child of this node, or None if it has no …","Returns a mutable reference to the last child of this node,","Returns a mutable pointer to the last child of the forest, …","Returns a mutable pointer to the last child of this node, …","","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator in a breadth-first manner, …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reference of its associated data.","Mutable reeference of its associated data.","Clones the node deeply and creates a new tree.","Clones the node’s descendant nodes as a forest.","","","","","","","Returns the number of child nodes in <code>Forest</code>.","Returns the number of child nodes in <code>Node</code>.","","","","","","","","","","","","","The subtree departs from its parent and becomes an …","","","","","","","","","","","","","","","","","","","Check that all components in your .glif file really …","","","","","","","","","","","","","","","","","","","","","","","Constructs tree from tuple notations.","Construct forest from tuple notations.","Returns the first child of the forest, or <code>None</code> if it is …","Returns the first child of this node, or None if it has no …","Returns a mutable reference to the first child of this …","Returns a mutable pointer to the first child of the forest,","Returns a mutable pointer to the first child of this node, …","","Returns <code>true</code> if <code>Forest</code> is empty.","Returns <code>true</code> if <code>Node</code> has no child nodes.","","","","","","","","","","","","","Inserts sib tree after <code>self</code>. The newly inserted node will …","Inserts sib tree before <code>self</code>. The newly inserted node will …","","","","","","","","Provides a forward iterator with owned data in a …","Provides a forward iterator with owned data in a …","","","Provides a forward iterator over child <code>Node</code>s.","Provides a forward iterator over child <code>Node</code>s","Provides a forward iterator over child <code>Node</code>s with mutable …","Provides a forward iterator over child <code>Node</code>s with mutable …","Provides a forward iterator over child <code>Node</code>s with mutable …","","","","","","","","","","","","","","","","","","","Creates a <code>Tree</code> containing only root node associated with …","Makes an empty <code>Forest</code>.","Returns the number of all child nodes in <code>Forest</code>.","Returns the number of all child nodes in <code>Node</code>, including …","Returns the parent node of this node, or None if it is the …","","","","Removes and returns the last child.","Remove and return the first child.","Removes and return the last child.","Removes and returns the first child.","Remove and return the first child.","Removes and return the first child.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds all the forest’s trees at front of children list.","Add all the forest’s trees at front of children list","Adds all the forest’s trees at front of children list.","Adds the tree as the last child.","Add the tree as the last child.","Adds the tree as the last child.","Adds the tree as the first child.","Add the tree as the first child.","Adds the tree as the first child.","","Reference of the root node.","","Mutable reference of the root node.","","","","","Sets the filename of a component relative to its base’s …","","","","","","","","Must have filename set, and that file must be readable, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Color (for guidelines, images, etc) not RGBA","A requested point index is out of bounds","","No next on an open contour","No previous on an open contour.","Components of the glyph form a loop","","OS error when reading glif","Glif filename doesn’t match name in XML","Glif filename not set","The XML is valid, but doesn’t meet the UFO .glif spec",".glif has invalid ","Glif isn’t UTF8","Self-built Outline/Contour error.","","","","","OS error when reading image","Image not decodable","Image not yet read","Image not PNG","","The XML making up the glif is invalid","","Error for use by parse() trait (FromStr)","The XML making up the glif is invalid","Failures when writing glif XML","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A UFO .glif","","","","","","This variant is highly undesirable to see as output and …","","","","","","","","","","","Note that these components are not yet parsed or checked …","","","","","","","","","","","It’s up to the API consumer to set this.","","Flatten a UFO .glif with components.","","","","","","","",".glif guidelines. Note: glif may have more guidelines, not …","","","glifparser does support reading the data of images and …","","","glif private library","","","","","","","","","","This is an arbitrary glyph comment, exactly like the …","","","","","","","","","","","Read UFO .glif XML to Glif struct. This should only be …","If you have a known filename, it is always preferable to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is an intermediary form used in MFEKglif and other …","","","","","no splitting","no handling","no stretching","stretch the pattern","","","","","","","","","","split each curve at its midpoint","","stretch the spacing between the pattern","handle by splitting","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Note that these components are not yet parsed or checked …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","It’s up to the API consumer to set this.","Flatten a UFO .glif with components.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This is an arbitrary glyph comment, exactly like the …reate UFO(3) specification layer layercontents.plist’s …","Create UFO(3) specification layer layerinfo.plist’s for …","","","","","","","","","","","","","","Safety","","","","","","","","","","","Safety","Safety","","","","","","","","Vec (layers) → Vec (contours) → which may or may not …","","","","","","","Returns data receivable by <code>upgrade_contour_ops</code>","","Meant for cleanly re-adding previously culled ops","","This library is unable to process this XML. This can occur …","","Represents an XML element.","","Errors that can occur parsing XML","","","The XML is invalid","","","","","","","","","","","","The Element attributes","","","","","","","","Children","","","","","","","","","","","","","","","","","","","","","","","","Find a child element with the given name and return a …","Find a child element with the given name and return a …","Returns the inner text/cdata of this element, if any.","","","","","","","","","","The name of the Element.  Does not include any namespace …","This elements namespace, if any","The full list of namespaces, if any","","","Create a new empty element with given name","Parses some data into an Element","Parses some data into a list of <code>XMLNode</code>s","","","","","","","This elements prefix, if any","","","","","","","Find a child element with the given name, remove and …","","","","","","","","","","","","","","Writes out this element as the root element in an new XML …","Writes out this element as the root element in a new XML …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>pixels</code> always RGBA8888","","","","Image has been loaded and decoded to a bitmap","","","","","","","Image loaded from disk to data, but not yet decoded","Image loaded, but decoding it to a bitmap failed","Image loading hasn’t even been attempted yet","","","Image loading tried, but failed to read from disk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitmap is guaranteed to always be in RGBA8888 format. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2D affine transform.","A transform that is flipped on the x-axis.","A transform that is flipped on the y-axis. Useful for …","","The identity transform.","Get the coefficients of the transform.","","","","","","","","","","","","","","Compute the determinant of this transform.","","","","","","","","","","","","","Compute the inverse transform.","Is this map finite?","Is this map NaN?","Creates an affine transformation that takes the unit …","","","","","","","","","","","","","","","Construct an affine transform from coefficients.","","","","","","","","","An affine transform representing rotation.","An affine transform representing uniform scaling.","An affine transform representing non-uniform scaling with …","","","","","","","Compute the bounding box of a transformed rectangle.","An affine transform representing translation.","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverse the logical (visual) order of Bézier splines in a …","This trait is primarily intended for easing .glif equality …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverse the logical (visual) order of Bézier splines in a …","","","","","","","","Return the previous and next index, given an index. As …","","","","","","","","","","","","Returns whether the index is sane given the vec it’s …","Returns which end we have, given an index.","","","","","","","","","","","","Return the previous and next index, given an index.","Following semantics of std::slice::reverse Performance …","Following semantics of std::slice::reverse Performance …","Following semantics of std::slice::reverse Performance …","","","","","","","","","","Get an outline from a Skia path. Outline is guaranteed to …","","","","glifparser returns for you two Skia paths when called on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Glifparser’s permissive attitude to the spec","","","","Strict to a UFO that will be used to make an OpenType …","","Strict to a UFO that will be used to make a TrueType font. …","Strict to the UFO spec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",".glif “curve” (cubic Bézier point to be followed by …","","A “close to the source” .glif <code>&lt;point&gt;</code>","A handle on a point","","A 2D point.",".glif “line”",".glif “move”, can act as any point type!","TODO: Deprecate Neither.","The point at the origin; (0, 0).",".glif “offcurve” or “”","A Skia-friendly point","API consumers may put any clonable type as an associated …","","","TODO: Remove. DEPRECATED",".glif “qcurve” (quadratic Bézier point to be followed …","","","For use by <code>Point::handle_or_colocated</code> TODO: Replace with …","The point (0, 0).","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded up to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Euclidean distance.","Squared Euclidean distance.","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded away from zero …","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded down to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make a point from its x and y position, handles and type","","","","","","","Make a point from its x and y position, handles and type","Make a point from its x and y position and type","Make a point from its x and y position and type","","","","","Return an x, y position for a point, or one of its …","","","","","","","","","","","","","","","","","","Is this point finite?","Is this point NaN?","You’ll need to redefine this if you want to use it on …","You’ll need to redefine this if you want to use it on …","You’ll need to redefine this if you want to use it on …","","","<code>validate_data</code> parameter allows you to define an <code>is_valid</code> …","","","Linearly interpolate between two points.","Determine the midpoint of two points.","","","","","","","","","","Create a new <code>Point</code> with the provided <code>x</code> and <code>y</code> coordinates.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded to the nearest …","","","","","","","","","This function is intended for use by generic functions …","","","","","","","","","","","","","","","","","","","","","","","Convert this point into a <code>Vec2</code>.","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded towards zero to …","","","","","","","","","","","","","","","","","","","","","","","","The x coordinate.","","","","","","","","","","","","","The y coordinate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,2,3,1,1,0,0,4,2,2,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,6,6,1,0,0,1,1,1,1,0,1,2,2,6,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,2,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,6,2,3,6,1,1,1,1,1,1,1,1,6,3,0,0,7,5,2,8,7,9,10,0,0,11,0,0,11,12,11,12,13,11,12,13,12,13,11,12,13,11,12,13,12,11,12,13,11,12,13,11,12,13,11,12,13,11,11,12,13,11,11,12,13,12,14,11,12,13,11,12,13,11,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,11,12,13,12,12,13,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,16,16,17,18,17,18,16,17,18,19,17,18,18,16,18,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,19,20,21,22,16,17,16,17,18,18,18,18,18,19,20,21,22,17,18,17,18,16,19,20,21,22,16,17,18,19,20,21,22,18,16,16,16,16,16,16,17,19,20,21,22,16,17,18,16,17,18,19,23,19,20,21,22,16,16,17,17,18,18,19,20,21,22,16,16,16,17,17,17,18,22,16,17,17,18,16,17,18,21,17,18,19,16,17,18,19,20,21,22,16,17,18,19,18,18,19,20,21,22,16,17,18,16,17,16,17,17,18,16,17,18,19,21,22,22,22,22,22,19,20,21,22,16,17,18,16,19,20,21,16,17,17,18,18,16,17,18,16,17,18,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,16,17,18,16,17,18,16,17,18,19,16,20,16,19,20,21,22,19,16,16,16,17,17,17,17,19,19,20,21,22,16,17,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,19,20,21,22,16,17,18,20,19,19,19,19,19,19,19,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,25,24,24,24,24,25,24,24,24,24,24,25,24,25,24,24,24,25,24,25,25,24,24,25,24,24,24,24,24,25,24,25,24,0,25,24,25,24,25,24,25,24,24,25,24,25,24,25,24,25,24,26,27,28,29,30,31,32,33,34,35,36,37,38,38,37,39,37,39,40,40,41,41,42,42,42,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,0,0,43,43,43,44,44,43,44,43,44,43,44,43,44,44,43,44,43,44,43,44,43,44,45,44,44,44,44,43,44,43,44,44,44,46,44,43,44,44,43,44,44,0,45,44,44,0,44,43,44,44,44,44,44,43,44,43,44,43,44,43,44,0,0,0,0,43,44,43,44,43,44,43,44,43,44,44,44,0,0,0,47,44,48,49,50,0,50,51,0,51,52,0,0,53,54,0,0,53,0,0,55,0,0,0,0,50,55,56,57,58,58,0,52,0,0,0,0,54,50,51,56,54,58,57,51,53,0,0,52,53,59,60,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,65,65,64,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,59,59,62,64,66,66,61,59,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,62,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,59,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,53,59,59,59,59,61,59,62,63,52,54,56,57,58,64,65,60,66,55,55,67,50,50,51,51,53,61,61,59,59,62,63,63,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,55,50,51,62,59,62,65,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,59,66,63,67,61,61,59,62,63,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,64,65,0,62,59,67,59,59,59,62,63,52,54,56,57,64,65,60,66,67,64,59,63,59,66,66,64,64,62,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,64,65,65,64,64,67,62,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,64,64,64,66,64,64,67,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,55,50,51,0,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,64,61,59,62,63,52,54,56,57,58,64,65,60,66,55,67,50,51,53,59,59,59,60,68,69,70,71,72,73,0,0,0,0,74,74,74,74,74,74,74,74,74,74,74,74,74,75,74,74,74,74,74,74,74,74,74,74,75,76,74,74,74,74,74,74,0,0,0,0,77,0,78,78,77,79,77,80,81,80,0,80,0,0,0,81,80,80,0,0,0,80,80,80,80,80,80,82,80,82,81,80,82,81,81,82,80,82,80,82,80,82,81,81,80,82,80,82,80,82,81,81,80,82,81,46,46,46,46,82,82,82,80,82,81,80,82,81,47,47,47,82,82,82,80,82,82,82,82,80,82,81,80,82,81,82,80,82,81,80,82,81,82,80,82,81,80,82,81,80,82,81,83,80,82,81,82,82,47,84,85,86,87,88,89,89,0,0,90,90,90,91,90,91,90,91,90,91,90,90,90,90,90,91,90,91,90,91,90,91,90,91,90,91,90,90,91,90,90,90,91,91,90,90,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,92,93,93,0,0,94,92,0,0,0,0,92,94,94,94,92,92,94,92,92,94,93,95,96,97,92,94,93,95,96,97,92,94,93,95,96,97,92,94,93,95,96,97,92,97,96,97,97,95,97,97,94,93,95,96,97,92,96,94,93,95,96,97,92,96,97,94,93,95,96,97,92,94,93,95,96,97,92,96,97,95,94,93,95,96,97,92,96,94,93,95,96,97,92,97,96,97,93,95,96,97,94,93,95,96,97,92,94,93,95,96,97,92,94,93,95,96,97,92,94,93,95,96,97,92,96,96,95,96,94,93,95,96,97,92,94,93,95,96,97,92,94,93,95,96,97,92,96,94,93,95,96,97,92,96,96,96,96,96,96,98,99,99,99,100,100,100,100,100,100,0,101,101,0,101,101,100,101,100,101,100,101,100,101,100,101,100,101,101,101,100,101,100,101,100,101,101,100,101,100,100,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,100,101,101,100,101,100,101,100,101,100,101,101,101,101,101,0,100,101,100,101,101,101,100,101,100,101,100,101,0,102,0,103,104,0,0,0,0,0,0,103,103,0,0,105,0,103,104,0,0,0,104,0,103,104,106,103,104,106,103,104,106,103,104,106,106,0,106,0,103,104,106,106,106,103,104,106,103,104,106,103,104,106,103,104,106,103,104,106,103,104,104,106,106,107,106,103,104,106,103,104,106,103,104,106,105,108,108,108,106,106,106,103,104,106,103,104,106,103,104,106,103,104,106,109,110,111,103,104,106,0,112,103,104,106,113,103,104,106,103,104,106,106,103,104,106,0,0,114,115,0,116,0,0,0,116,116,116,117,116,116,115,115,116,116,116,116,116,116,116,114,114,114,114,114,116,118,118,117,117,114,116,116,116,116,114,114,113,113,113,116,113,116,116,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,119,120,120,120,119,120,119,120,119,119,121,119,120,119,120,119,119,120,122,123,119,120,119,119,120,119,120,119,119,120,119,120,119,120,119,120,124,119,120,125,126,119,120,119,120,127,119,120,128,129,0,130,0,0,128,130,0,130,130,128,128,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,128,129,130,128,130,130,130,128,128,131,130,131,131,131,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,131,128,130,129,128,129,130,128,130,130,130,128,128,132,133,132,133,134,0,0,0,0,0,134,134,132,135,134,0,0,0,0,134,134,0,134,0,135,136,135,135,135,135,136,7,7,7,136,137,134,133,136,132,135,137,134,133,136,132,135,135,137,134,133,136,132,135,137,134,133,136,132,135,136,137,134,133,136,132,135,137,134,133,136,132,135,137,134,133,136,132,135,135,135,137,134,133,136,132,135,135,138,138,138,135,137,134,134,133,136,132,135,135,137,137,134,134,134,134,134,134,133,133,133,133,133,133,136,136,132,132,135,135,136,137,139,137,137,134,132,136,137,136,136,136,136,136,136,137,134,132,137,134,133,136,132,135,7,137,134,133,136,132,132,135,135,135,138,138,138,137,134,136,132,134,135,135,137,137,136,137,133,136,135,137,136,135,132,137,134,133,136,132,135,137,134,133,136,132,135,137,134,133,136,132,135,137,134,133,136,132,135,137,136,135,137,136,137,134,133,136,132,135,136,7,137,136,7,137,136,137,136,135,135,135,135,135,140,137,134,133,136,132,135,134,135,135,135,137,134,133,136,132,135,137,134,133,136,132,135,137,134,133,136,132,135,7,137,136,137,136,135,7,7,7,7,7,7,137,7,137,136,137,136,135,7,7,7,7,7,7,141,141,0,0,0,142,143,142,143,142,143,142,143,142,143,142,143,142,143,142,143,142,143,142,143,142,143,142,143,142,142,143,143,142,143,142,142,143,142,143,142,143,142,143,142,143,142,143,142,143,142,143,144,142,143,142,143,142,142,142,143,143,142,143,142,143],"f":[null,null,null,null,null,null,[[["u16",15]]],[[["i8",15]]],[[["i64",15]]],[[["i32",15]]],[[["u64",15]]],[[["f64",15]]],[[["u32",15]]],[[["integerorfloat",4]]],[[["isize",15]]],[[["i16",15]]],[[["f32",15]]],[[["usize",15]]],[[["u8",15]]],null,[[["integerorfloat",4]],["bool",15]],[[]],[[]],[[["usize",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[],["bool",15]],[[],["integerorfloat",4]],[[]],null,null,[[]],[[["usize",15]],[["result",4,["glifparsererror"]],["glifparsererror",4]]],[[["usize",15]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[],["integerorfloat",4]],[[["usize",15]],["usize",15]],[[],[["integerorfloat",4],["result",4,["integerorfloat"]]]],[[],["string",3]],[[["i16",15]]],[[["integerorfloat",4]]],[[["i64",15]]],[[["usize",15]]],[[["u64",15]]],[[["u8",15]]],[[["i32",15]]],[[["f64",15]]],[[["i8",15]]],[[["f32",15]]],[[["u32",15]]],[[["u16",15]]],[[["isize",15]]],[[],["outline",6]],[[]],[[["integerorfloat",4]],["bool",15]],null,[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["usize",15]],["integerorfloat",4]],[[["u64",15]],["integerorfloat",4]],[[["u8",15]],["integerorfloat",4]],[[["f64",15]],["integerorfloat",4]],[[["i8",15]],["integerorfloat",4]],[[["i16",15]],["integerorfloat",4]],[[]],[[["isize",15]],["integerorfloat",4]],[[["i64",15]],["integerorfloat",4]],[[["f32",15]],["integerorfloat",4]],[[["u32",15]],["integerorfloat",4]],[[["u16",15]],["integerorfloat",4]],[[["i32",15]],["integerorfloat",4]],[[["u32",15]],["integerorfloat",4]],[[["bezpath",3]]],[[["path",6]],["outline",6]],[[["skoutline",6]]],[[["str",15]],[["result",4,["integerorfloat"]],["integerorfloat",4]]],null,null,[[]],[[],["usize",15]],[[],[["result",4,["f32","i32"]],["f32",15],["i32",15]]],[[],[["i32",15],["result",4,["i32","f32"]],["f32",15]]],null,[[]],[[]],[[],[["glifparsererror",4],["vec",3,["pathel"]],["result",4,["vec","glifparsererror"]]]],[[],[["glifparsererror",4],["vec",3,["pathel"]],["result",4,["vec","glifparsererror"]]]],[[],["element",3]],[[],["bool",15]],[[["usize",15],["f32",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],null,[[["i8",15]]],[[["usize",15]]],[[["u8",15]]],[[["i64",15]]],[[["u32",15]]],[[["u16",15]]],[[["i16",15]]],[[["f64",15]]],[[["u64",15]]],[[["f32",15]]],[[["i32",15]]],[[["integerorfloat",4]]],[[["isize",15]]],[[]],[[],["integerorfloat",4]],null,[[["integerorfloat",4]],[["ordering",4],["option",4,["ordering"]]]],null,null,[[]],[[]],[[]],[[]],[[],["integerorfloat",4]],[[["str",15]],[["result",4,["glif","glifparsererror"]],["glifparsererror",4],["glif",3]]],[[["path",3],["asref",8,["path"]],["clone",8]],[["result",4,["glif","glifparsererror"]],["glifparsererror",4],["glif",3]]],[[["clone",8],["asref",8,["path"]],["path",3],["pedantry",3]],[["result",4,["glif","glifparsererror"]],["glifparsererror",4],["glif",3]]],[[["str",15],["pedantry",3]],[["result",4,["glif","glifparsererror"]],["glifparsererror",4],["glif",3]]],[[]],[[]],[[["isize",15]]],[[["u8",15]]],[[["i8",15]]],[[["i64",15]]],[[["u16",15]]],[[["f64",15]]],[[["integerorfloat",4]]],[[["i16",15]]],[[["usize",15]]],[[["f32",15]]],[[["u32",15]]],[[["i32",15]]],[[["u64",15]]],[[],["result",4]],[[["integerorfloat",4]]],[[["integerorfloat",4]]],null,[[["isize",15]]],[[["i8",15]]],[[["i64",15]]],[[["usize",15]]],[[["integerorfloat",4]]],[[["i32",15]]],[[["f32",15]]],[[["u64",15]]],[[["u32",15]]],[[["i16",15]]],[[["u16",15]]],[[["u8",15]]],[[["f64",15]]],[[],["u32",15]],[[]],[[],["contour",6]],[[],["outline",6]],[[["option",4,["skiapointtransforms"]],["skiapointtransforms",3]],[["option",4,["path"]],["path",6]]],[[["option",4,["skiapointtransforms"]],["skiapointtransforms",3]],["skiapaths",3]],[[["option",4,["skiapointtransforms"]],["skiapointtransforms",3]],["skiapaths",3]],[[],["string",3]],[[],["result",4]],[[["str",15]],[["integerorfloat",4],["result",4,["integerorfloat"]]]],[[],["result",4]],[[],["typeid",3]],[[["integerorfloat",4]],["integerorfloat",4]],[[],["f32",15]],[[],["i32",15]],[[],["mfekoutline",6]],[[],[["result",4,["upgradecontouropserror"]],["upgradecontouropserror",4]]],[[["glif",3]],[["string",3],["glifparsererror",4],["result",4,["string","glifparsererror"]]]],[[["glif",3]],[["result",4,["glifparsererror"]],["glifparsererror",4]]],[[],["integerorfloat",4]],[[],["element",3]],[[],["element",3]],[[],["element",3]],[[],["integerorfloat",4]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["anchortype",4]],[[],["anchor",3]],[[],["glifanchor",3]],[[]],[[]],[[]],null,[[]],[[],["anchor",3]],[[],["glifanchor",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["anchortype",4]],["bool",15]],[[["anchor",3]],["bool",15]],[[["glifanchor",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["glifanchor",3],["pedantry",3]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["option",4]],["anchortype",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["anchor",3]],["bool",15]],[[["glifanchor",3]],["bool",15]],[[]],[[["f32",15],["anchortype",4],["string",3],["option",4,["string"]]],["anchor",3]],[[["glifstringlenone",3],["option",4,["glifstringlenone"]],["integerorfloat",4]],["glifanchor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[],["element",3]],null,null,null,null,[[],["value",4]],null,[[]],[[]],[[],["color",3]],[[]],[[],["color",3]],[[["usize",15]],["usize",15]],[[],["result",4]],[[["color",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["integerorfloat",4]],["color",3]],[[["str",15]],["result",4]],null,[[],["usize",15]],[[]],[[]],[[["color",3]],["bool",15]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["forest",3]],[[["forest",3]]],[[["forest",3]]],[[["forest",3]]],[[],[["option",4,["node"]],["node",3]]],[[],[["option",4,["node"]],["node",3]]],[[],[["option",4,["pin"]],["pin",3,["node"]]]],[[],[["option",4,["pin"]],["pin",3,["node"]]]],[[],[["option",4,["pin"]],["pin",3,["node"]]]],null,[[],[["splitted",3,["iter"]],["bfsforest",3,["splitted"]]]],[[],[["bfstree",3,["splitted"]],["splitted",3,["iter"]]]],[[],[["splitted",3,["iter"]],["bfsforest",3,["splitted"]]]],[[],[["splitted",3,["itermut"]],["bfsforest",3,["splitted"]]]],[[],[["splitted",3,["itermut"]],["bfsforest",3,["splitted"]]]],[[],[["splitted",3,["itermut"]],["bfstree",3,["splitted"]]]],[[],[["splitted",3,["itermut"]],["bfsforest",3,["splitted"]]]],[[],[["splitted",3,["itermut"]],["bfstree",3,["splitted"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["glifcomponent",3]],[[],["glifcomponents",3]],[[],["component",3]],[[],["componentrect",3]],[[],["tree",3]],[[],["forest",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tree",3]],["ordering",4]],[[["forest",3]],["ordering",4]],[[["node",3]],["ordering",4]],[[]],[[]],[[],["tree",3]],[[],["forest",3]],[[],["glifcomponent",3]],[[],["glifcomponents",3]],[[],["component",3]],[[],["componentrect",3]],[[],["forest",3]],[[],["node",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tree",3]],[[["tree",3]],["tree",3]],[[["tree",3]],["tree",3]],[[],["tree",3]],[[["forest",3]],["tree",3]],[[["forest",3]],["tree",3]],[[]],[[]],[[["glifcomponent",3]],["bool",15]],[[["glifcomponents",3]],["bool",15]],[[["component",3]],["bool",15]],[[["componentrect",3]],["bool",15]],[[["tree",3]],["bool",15]],[[["forest",3]],["bool",15]],[[["node",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["option",4]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[["bfstree",3]],["tree",3]],[[["treewalk",3]],["tree",3]],[[]],[[["bfsforest",3]],["forest",3]],[[]],[[["forestwalk",3]],["forest",3]],[[]],[[["string",3],["f32",15]]],[[],["tree",3]],[[],["forest",3]],[[],[["option",4,["node"]],["node",3]]],[[],[["option",4,["node"]],["node",3]]],[[],[["option",4,["pin"]],["pin",3,["node"]]]],[[],[["option",4,["pin"]],["pin",3,["node"]]]],[[],[["option",4,["pin"]],["pin",3,["node"]]]],null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["tree",3]]],[[["tree",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["splitted",3,["intoiter"]],["bfstree",3,["splitted"]]]],[[],[["splitted",3,["intoiter"]],["bfsforest",3,["splitted"]]]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["iter",3]],[[],["iter",3]],[[],["itermut",3]],[[],["itermut",3]],[[],["itermut",3]],[[],["glifmatrix",3]],null,null,null,null,null,null,[[["glifcomponent",3]],["bool",15]],[[["glifcomponents",3]],["bool",15]],[[["component",3]],["bool",15]],[[["componentrect",3]],["bool",15]],[[["tree",3]],["bool",15]],[[["forest",3]],["bool",15]],[[["node",3]],["bool",15]],[[],["forest",3]],[[]],[[]],[[]],[[],["tree",3]],[[],["forest",3]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4,["node"]],["node",3]]],[[["tree",3]],[["ordering",4],["option",4,["ordering"]]]],[[["forest",3]],[["ordering",4],["option",4,["ordering"]]]],[[["node",3]],[["ordering",4],["option",4,["ordering"]]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["forest",3]]],[[["forest",3]]],[[["forest",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["glif",3]],["bool",15]],[[],["node",3]],null,[[],[["node",3],["pin",3,["node"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["asref",8,["path"]],["path",3]]],[[]],[[["tree",3]],["forest",3]],[[["tree",3]],["forest",3]],[[["forest",3]],["forest",3]],[[["forest",3]],["forest",3]],[[["tree",3]],["forest",3]],[[["tree",3]],["forest",3]],[[],[["result",4,["component","glifparsererror"]],["component",3],["glifparsererror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["element",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["glifparsererror",4]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[["fromutf8error",3]]],[[]],[[["parseerror",4]]],[[["plisterror",3]]],[[["xmltreeerror",4]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["upgradecontouropserror",4]],[[]],[[["usize",15]],["usize",15]],[[],["result",4]],[[["upgradecontouropserror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["element",3]],null,[[]],[[]],[[]],[[]],[[],["lib",4]],[[],["glif",3]],[[]],[[]],null,[[]],[[],["glif",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[["lib",4]],["bool",15]],[[["glif",3]],["bool",15]],[[],["option",4]],[[],["option",4]],null,[[],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[["option",4]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["mfekglif",3]]],[[]],[[]],[[],["glifparserresult",6]],null,[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],null,null,[[],["string",3]],[[],["string",3]],null,[[["str",15],["bool",15]],["string",3]],[[],["string",3]],[[["lib",4]],["bool",15]],[[["glif",3]],["bool",15]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4,["glif","glifparsererror"]],["glifparsererror",4],["glif",3]]],[[["path",3],["asref",8,["path"]],["clone",8]],[["result",4,["glif","glifparsererror"]],["glifparsererror",4],["glif",3]]],[[["clone",8],["asref",8,["path"]],["path",3],["pedantry",3]],[["result",4,["glif","glifparsererror"]],["glifparsererror",4],["glif",3]]],[[["str",15],["pedantry",3]],[["result",4,["glif","glifparsererror"]],["glifparsererror",4],["glif",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["glif",3]],[["string",3],["glifparsererror",4],["result",4,["string","glifparsererror"]]]],[[["glif",3]],[["result",4,["glifparsererror"]],["glifparsererror",4]]],null,[[],["element",3]],[[],["element",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["mfekpointdata",3]],[[],["mfekglif",3]],[[],["historyentry",3]],[[],["mfekcontour",3]],[[],["contouroperations",4]],[[],["patterncopies",4]],[[],["patternsubdivide",4]],[[],["patternhandlediscontinuity",4]],[[],["patternstretch",4]],[[],["papcontour",3]],[[],["vwscontour",3]],[[],["dashcull",3]],[[],["dashcontour",3]],[[],["interpolationtype",4]],[[],["vwshandle",3]],[[],["jointype",4]],[[],["captype",4]],[[],["layeroperation",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],["mfekpointdata",3]],[[],["mfekglif",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["mfekglif",3]],["bool",15]],[[["historyentry",3]],["bool",15]],[[["mfekcontour",3]],["bool",15]],[[["contouroperations",4]],["bool",15]],[[["patterncopies",4]],["bool",15]],[[["patternsubdivide",4]],["bool",15]],[[["patternhandlediscontinuity",4]],["bool",15]],[[["patternstretch",4]],["bool",15]],[[["papcontour",3]],["bool",15]],[[["vwscontour",3]],["bool",15]],[[["dashcull",3]],["bool",15]],[[["dashcontour",3]],["bool",15]],[[["interpolationtype",4]],["bool",15]],[[["vwshandle",3]],["bool",15]],[[["jointype",4]],["bool",15]],[[["captype",4]],["bool",15]],[[["layeroperation",4]],["bool",15]],[[],["bool",15]],[[],["option",4]],null,[[["option",4]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["glif",3]]],[[]],[[]],[[["vec",3]]],[[["vec",3,["point"]],["point",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["contour",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],["string",3]],null,[[["mfekglif",3]],["bool",15]],[[["historyentry",3]],["bool",15]],[[["mfekcontour",3]],["bool",15]],[[["contouroperations",4]],["bool",15]],[[["patterncopies",4]],["bool",15]],[[["patternsubdivide",4]],["bool",15]],[[["patternhandlediscontinuity",4]],["bool",15]],[[["papcontour",3]],["bool",15]],[[["vwscontour",3]],["bool",15]],[[["dashcull",3]],["bool",15]],[[["dashcontour",3]],["bool",15]],[[["vwshandle",3]],["bool",15]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],[["result",4,["upgradecontouropserror"]],["upgradecontouropserror",4]]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["layer",3]],[[]],null,[[["usize",15]],["usize",15]],[[],["result",4]],[[["layer",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],null,[[]],[[["value",4]],["value",4]],null,[[["layer",3]],["bool",15]],null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[["usize",15]],["string",3]],[[],["value",4]],[[],[["value",4],["option",4,["value"]]]],[[],[["value",4],["option",4,["value"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[],["bool",15]],[[],["outline",6]],[[]],[[],["mfekoutline",6]],[[],[["result",4,["upgradecontouropserror"]],["upgradecontouropserror",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["option",4,["element"]],["element",3]]],[[],[["option",4,["element"]],["element",3]]],[[],["option",4]],[[],[["str",15],["option",4,["str"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",8],["option",4,["error"]]]],null,[[],["xmlnode",4]],[[],["element",3]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["str",15]],[[["xmlnode",4]],["bool",15]],[[["element",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[],["glifparserresult",6]],[[["string",3]],["glifparserresult",6]],[[["string",3]],["glifparserresult",6]],[[["string",3]],["glifparserresult",6]],[[],[["option",4,["element"]],["element",3]]],[[],[["option",4,["element"]],["element",3]]],[[],[["cow",4,["str"]],["option",4,["cow"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["element",3]],[[],["element",3]],[[],["element",3]],null,null,null,[[["xmlnode",4]],["bool",15]],[[["element",3]],["bool",15]],[[["str",15]],["element",3]],[[],[["parseerror",4],["element",3],["result",4,["element","parseerror"]]]],[[],[["parseerror",4],["result",4,["vec","parseerror"]],["vec",3,["xmlnode","global"]]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["element"]],["element",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["element",3],["glifparserresult",6,["element"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4,["emittererror"]],["emittererror",4]]],[[["emitterconfig",3]],[["result",4,["emittererror"]],["emittererror",4]]],[[],["element",3]],null,null,null,null,null,null,null,null,null,null,[[],["dictionary",3]],null,[[]],[[]],[[]],[[]],[[],["guidelinepoint",3]],[[],["guideline",3]],[[]],[[]],[[]],null,[[]],null,[[],["guidelinepoint",3]],[[],["guideline",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[["guidelinepoint",3]],["bool",15]],[[["guideline",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["f32",15],["integerorfloat",4]]],[[],["usize",15]],[[],["usize",15]],[[]],null,[[]],[[]],[[]],[[]],null,[[["guidelinepoint",3]],["bool",15]],[[["guideline",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["element",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dataloadstate",4]],[[],["dataorbitmap",4]],[[],["imagedata",3]],[[],["glifimage",3]],[[],["image",3]],[[],["imagecodec",4]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],[["glifparsererror",4],["vec",3,["u8"]],["result",4,["vec","glifparsererror"]]]],null,null,[[],[["result",4,["glifparsererror"]],["glifparsererror",4]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[["dataloadstate",4]],["bool",15]],[[["dataorbitmap",4]],["bool",15]],[[["imagedata",3]],["bool",15]],[[["glifimage",3]],["bool",15]],[[["image",3]],["bool",15]],[[["imagecodec",4]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pathbuf",3],["into",8,["pathbuf"]]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["pathbuf",3],["into",8,["pathbuf"]]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[],["imagecodec",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["glifparsererror"]],["glifparsererror",4]]],[[],["glifmatrix",3]],null,[[["dataorbitmap",4]],["bool",15]],[[["imagedata",3]],["bool",15]],[[["glifimage",3]],["bool",15]],[[["image",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],null,[[["gliflike",8]],[["result",4,["image","glifparsererror"]],["image",3],["glifparsererror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["element",3],["glifparserresult",6,["element"]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["glifmatrix",3]],[[],["affine",3]],[[]],[[]],[[],["glifmatrix",3]],[[],["affine",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],[["result",4,["affine"]],["affine",3]]],[[],["f64",15]],[[["glifmatrix",3]],["bool",15]],[[["affine",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["translatescale",3]],["affine",3]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["affine",3]],[[]],[[],["affine",3]],[[],["bool",15]],[[],["bool",15]],[[["rect",3]],["affine",3]],[[["circle",3]]],[[["pathseg",4]],["pathseg",4]],[[["bezpath",3]],["bezpath",3]],[[["quadbez",3]],["quadbez",3]],[[["point",3]],["point",3]],[[["line",3]],["line",3]],[[["affine",3]],["affine",3]],[[["cubicbez",3]],["cubicbez",3]],[[["ellipse",3]]],[[["bezpath",3]],["bezpath",3]],[[["pathel",4]],["pathel",4]],[[["affine",3]]],[[["glifmatrix",3]],["bool",15]],[[["affine",3]],["bool",15]],[[],["affine",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]],["affine",3]],[[["f64",15]],["affine",3]],[[["f64",15]],["affine",3]],[[],["result",4]],null,[[]],[[]],[[],["matrix",3]],[[],["matrix",3]],[[["rect",3]],["rect",3]],[[],["affine",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["matrix",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["glifoutlinetype",4]],[[],["outlinetype",4]],[[],["glifoutline",3]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["glifoutlinetype",4]],["bool",15]],[[["outlinetype",4]],["bool",15]],[[["glifoutline",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["glifoutlinetype",4]]],[[["vec",3,["glifcontour"]],["glifcontour",6]]],[[]],[[["bezpath",3]]],[[],["glifoutlinetype",4]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["result",4,["bezpath","glifparsererror"]],["bezpath",3],["glifparsererror",4]]],[[],[["result",4,["bezpath","glifparsererror"]],["bezpath",3],["glifparsererror",4]]],[[],[["glifparsererror",4],["vec",3,["pathel"]],["result",4,["vec","glifparsererror"]]]],[[["glifoutline",3]],["bool",15]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["outline",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["glifparsererror",4],["result",4,["outline","glifparsererror"]],["outline",6]]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[],["end",4]],[[]],[[["usize",15]],[["result",4,["glifparsererror"]],["glifparsererror",4]]],[[["usize",15]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["usize",15]],["usize",15]],[[["end",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[["usize",15]],[["bool",15],["result",4,["bool"]]]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["result",4]],[[["usize",15]],[["result",4,["option"]],["option",4,["end"]]]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[["usize",15],["f32",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[]],[[]],[[]],[[]],[[["usize",15]],[["usize",15],["result",4,["usize"]]]],[[["usize",15]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["glifoutline",3]],[["pointdata",8],["outline",6]]],[[["glifoutline",3]],[["pointdata",8],["outline",6]]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[],["skiapaths",3]],[[],["skiapointtransforms",3]],[[]],[[]],null,[[],["path",6]],[[]],[[],["skiapaths",3]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["skiapaths",3]],["bool",15]],[[]],[[]],[[["path",6]]],[[["skoutline",6]]],[[],["usize",15]],[[],["usize",15]],[[],["path",6]],[[]],[[]],[[["skiapaths",3]],["bool",15]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["skoutline",6]],[[]],[[]],[[["option",4,["skiapointtransforms"]],["skiapointtransforms",3]],[["option",4,["path"]],["path",6]]],[[["option",4,["skiapointtransforms"]],["skiapointtransforms",3]],["skiapaths",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["pointtype",4],["option",4,["pointtype"]]]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pedantry",3]],[[],["mend",4]],[[],["level",4]],[[],["floatclass",4]],[[]],[[]],[[]],[[]],[[],["pedantry",3]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["pedantry",3]],["bool",15]],[[["mend",4]],["bool",15]],[[["level",4]],["bool",15]],[[["floatclass",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["integerorfloat",4],["floatclass",4]],["f32",15]],null,[[["pedantry",3]],["bool",15]],[[["level",4],["mend",4]],["pedantry",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["point",3]],[[["vec2",3]],["point",3]],[[["vec2",3]]],[[]],[[["affine",3]]],[[],["kurbopoint",3]],[[],["kurbopoint",3]],[[],["kurbopoint",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["point",3]],[[],["glifpoint",3]],[[],["pointtype",4]],[[],["handle",4]],[[],["point",3]],[[],["whichhandle",4]],[[],["point",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["glifpoint",3]],[[],["pointtype",4]],[[],["handle",4]],[[],["point",3]],[[]],[[],["point",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["point"]],["point",3]]],[[["point",3]],["f64",15]],[[["point",3]],["f64",15]],[[["glifpoint",3]],["bool",15]],[[["pointtype",4]],["bool",15]],[[["handle",4]],["bool",15]],[[["point",3]],["bool",15]],[[["whichhandle",4]],["bool",15]],[[["point",3]],["bool",15]],[[],["point",3]],[[]],[[]],[[]],[[],["point",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["point",3]],["glifpoint",3]],[[]],[[["handle",4]]],[[["str",15]]],[[["pathel",4]]],[[["pathel",4]]],[[["pathel",4]]],[[["option",4]]],[[["point",3]],["handle",4]],[[]],[[["option",4,["glifpoint"]],["glifpoint",3]],["handle",4]],[[]],[[]],[[]],[[["glifpoint",3]]],[[]],[[["str",15]]],[[]],[[],["point",3]],[[["pointtype",4],["bool",15],["string",3],["option",4],["option",4,["string"]]],["point",3]],[[["whichhandle",4],["point",3]]],[[["point",3]]],[[["pointtype",4],["point",3]]],[[["point",3]]],[[["str",15]],[["result",4,["pointtype"]],["pointtype",4]]],[[["str",15]],[["result",4,["whichhandle"]],["whichhandle",4]]],[[["pointtype",4]],["point",3]],[[["pointtype",4]],["glifpoint",3]],[[["pointtype",4]],["point",3]],[[["whichhandle",4]],["handle",4]],[[["whichhandle",4]],["glifpoint",3]],[[["whichhandle",4]],["kurbopoint",3]],[[["whichhandle",4]]],[[["whichhandle",4],["fn",8]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["kurbopoint",3]],[[]],[[]],[[]],[[]],[[],["char",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["point",3],["f64",15]],["point",3]],[[["point",3]],["point",3]],[[["string",3],["option",4,["string"]]]],null,null,[[["glifpoint",3]],["bool",15]],[[["handle",4]],["bool",15]],[[["point",3]],["bool",15]],[[["point",3]],["bool",15]],[[],["glifpoint",3]],[[],["point",3]],[[["f64",15]],["point",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["point",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["whichhandle",4],["handle",4]]],[[["integerorfloat",4]]],[[["integerorfloat",4]]],[[["integerorfloat",4]]],[[["integerorfloat",4]]],[[["integerorfloat",4]]],[[["integerorfloat",4]]],null,null,[[],["point",3]],[[["point",3]],["vec2",3]],[[["vec2",3]],["point",3]],[[]],[[["vec2",3]]],[[],["kurbopoint",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["vec2",3]],[[],["point",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["integerorfloat",4]],[[],["integerorfloat",4]],[[],["integerorfloat",4]],null,null,null,[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["element",3]],[[],["integerorfloat",4]],[[],["integerorfloat",4]],[[],["integerorfloat",4]],null,null,null,[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],null,null,null,null,null,[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[],["glifstring",3]],[[],["glifstringlenone",3]],[[]],[[]],[[],["glifstring",3]],[[],["glifstringlenone",3]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[["glifstring",3]],["bool",15]],[[["glifstringlenone",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],[["result",4,["glifstringconversionerror"]],["glifstringconversionerror",4]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["glifstring",3]],["bool",15]],[[["glifstringlenone",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["glifstring",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["string",3]],[["result",4,["glifstringconversionerror"]],["glifstringconversionerror",4]]],[[],["result",4]],[[["string",3]],[["result",4,["glifstringconversionerror"]],["glifstringconversionerror",4]]],[[["string",3]],[["result",4,["glifstringconversionerror"]],["glifstringconversionerror",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"IntegerOrFloat"],[6,"Contour"],[6,"MFEKOutline"],[6,"SkOutline"],[8,"Codepoint"],[6,"Outline"],[8,"PointLike"],[6,"GlifContour"],[13,"Integer"],[13,"Float"],[4,"AnchorType"],[3,"Anchor"],[3,"GlifAnchor"],[8,"FromOption"],[3,"Color"],[3,"Tree"],[3,"Forest"],[3,"Node"],[3,"GlifComponent"],[3,"GlifComponents"],[3,"Component"],[3,"ComponentRect"],[8,"FlattenedGlif"],[4,"GlifParserError"],[4,"GlifStringConversionError"],[13,"GlifFileIoError"],[13,"GlifFilenameNotSet"],[13,"GlifFilenameInsane"],[13,"GlifComponentsCyclical"],[13,"XmlParseError"],[13,"PedanticXmlParseError"],[13,"XmlWriteError"],[13,"GlifInputError"],[13,"ImageIoError"],[13,"ContourNoPrevious"],[13,"ContourNoNext"],[13,"GlifOutlineHasBadPointType"],[13,"PointIdxOutOfBounds"],[13,"GlifContourHasBadPointType"],[13,"TypeConversionError"],[13,"HasControlCharacter"],[4,"UpgradeContourOpsError"],[4,"Lib"],[3,"Glif"],[8,"GlifLike"],[8,"FromXML"],[8,"IntoXML"],[13,"Plist"],[13,"Xml"],[4,"JoinType"],[4,"CapType"],[4,"ContourOperations"],[4,"LayerOperation"],[4,"PatternCopies"],[4,"InterpolationType"],[4,"PatternSubdivide"],[4,"PatternHandleDiscontinuity"],[4,"PatternStretch"],[3,"MFEKGlif"],[3,"DashCull"],[3,"MFEKPointData"],[3,"HistoryEntry"],[3,"MFEKContour"],[3,"PAPContour"],[3,"VWSContour"],[3,"DashContour"],[3,"VWSHandle"],[13,"VariableWidthStroke"],[13,"PatternAlongPath"],[13,"DashAlongPath"],[13,"Fixed"],[13,"Split"],[13,"Simple"],[3,"Layer"],[8,"ToLayerContentsPlist"],[8,"ToLayerInfoPlist"],[8,"ManageContourOperations"],[8,"DowngradeOutline"],[8,"UpgradeOutline"],[4,"XMLNode"],[4,"Error"],[3,"Element"],[8,"TryIntoXML"],[13,"MalformedXml"],[13,"Element"],[13,"Comment"],[13,"CData"],[13,"Text"],[13,"ProcessingInstruction"],[3,"Guideline"],[3,"GuidelinePoint"],[4,"ImageCodec"],[4,"DataOrBitmap"],[4,"DataLoadState"],[3,"ImageData"],[3,"GlifImage"],[3,"Image"],[13,"Data"],[13,"Bitmap"],[3,"GlifMatrix"],[3,"Affine"],[8,"ToSkiaMatrix"],[4,"GlifOutlineType"],[4,"OutlineType"],[8,"IntoGlifPoints"],[3,"GlifOutline"],[8,"FromKurbo"],[8,"IntoKurbo"],[8,"QuadToCubic"],[8,"RefigurePointTypes"],[8,"RoundToInt"],[8,"ToOutline"],[8,"Reverse"],[8,"GenericPrevNext"],[8,"PrevNext"],[4,"End"],[8,"CheckSmooth"],[8,"State"],[3,"SkiaPaths"],[3,"SkiaPointTransforms"],[8,"ConicsToCubics"],[8,"FromSkiaPath"],[8,"FromSkOutline"],[8,"SplitSkiaPath"],[8,"ToSkiaPath"],[8,"ToSkiaPaths"],[8,"TryIntoPointType"],[4,"Mend"],[4,"FloatClass"],[4,"Level"],[3,"Pedantry"],[4,"WhichHandle"],[4,"Handle"],[4,"PointType"],[3,"KurboPoint"],[3,"Point"],[3,"GlifPoint"],[8,"IsValid"],[8,"FromKurboPoint"],[8,"ToKurboPoint"],[13,"At"],[3,"GlifString"],[3,"GlifStringLenOne"],[8,"ToGlifString"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};