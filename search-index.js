var searchIndex = JSON.parse('{\
"glifparser":{"doc":"A parser and writer for UFO <code>.glif</code> files.","t":[8,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,0,0,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,12,12,3,3,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,3,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,3,8,3,3,3,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,6,4,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,3,8,8,4,13,13,13,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,10,12,11,11,12,11,11,12,10,11,12,5,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,12,12,5,5,0,10,11,12,12,13,13,13,3,13,4,8,8,13,13,13,8,8,4,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,12,12,12,12,12,12,12,3,3,12,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,13,13,13,4,4,13,13,3,3,4,3,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,13,13,8,6,3,4,8,8,13,13,6,4,16,8,13,13,8,8,8,13,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,8,4,16,16,8,13,8,8,8,13,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,10,10,11,11,10,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,5,5,13,13,4,13,4,4,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,8,3,4,3,13,13,13,18,13,3,8,4,13,13,8,13,4,18,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,12,12,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Codepoint","Float","Integer","IntegerOrFloat","add","add","add","add","add","add","add","add","add","add","add","add","add","anchor","approx_eq","borrow","borrow_mut","check_smooth","clone","clone_into","color","component","contour_prev_next","contour_prev_next_handles","default","descendants","deserialize","display","div","div","div","div","div","div","div","div","div","div","div","div","div","eq","error","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_kurbo","from_str","from_str_radix","glif","guideline","hash","height","holding_float","holding_integer","image","into","into_glifpoints","into_kurbo_vec","into_kurbo_vec","into_xml","is_one","is_open","is_point_smooth_within","is_zero","matrix","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","next","one","outline","partial_cmp","pedantry","point","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prev","read","read_from_filename","read_from_filename_pedantic","read_pedantic","refigure_point_types","refigure_point_types","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","serialize","string","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_bits","to_i64","to_owned","to_reversed","to_reversed","to_string","to_u64","try_from","try_from","try_into","type_id","ulps","unwrap_float","unwrap_integer","write","write_to_filename","xml","xml","xml","zero","0","0","Anchor","GlifAnchor","borrow","borrow","borrow_mut","borrow_mut","class","class","clone","clone","clone_into","clone_into","data","default","default","descendants","descendants","deserialize","deserialize","eq","eq","fmt","fmt","from","from","from_glif","height","height","into","into","ne","ne","new","new","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","x","xml","y","y","Color","a","as_plist_value","b","borrow","borrow_mut","clone","clone_into","default","descendants","deserialize","eq","fmt","from","from","from_rgba","from_str","g","height","into","into","ne","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","r","serialize","to_owned","to_string","try_from","try_into","type_id","Component","ComponentRect","FlattenedGlif","Forest","GlifComponent","GlifComponents","Node","Tree","abandon","append","append","append","back","back","back_mut","back_mut","back_mut","base","bfs","bfs","bfs_children","bfs_children_mut","bfs_children_mut","bfs_mut","bfs_mut","bfs_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","data","data_mut","deep_clone","deep_clone_forest","default","default","default","default","default","default","degree","degree","deref","descendants","descendants","descendants","descendants","descendants","descendants","descendants","deserialize","deserialize","deserialize","deserialize","detach","div","div","div","div","div","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","filename","flattened","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_rect_and_name","from_tuple","from_tuple","front","front","front_mut","front_mut","front_mut","glif","has_no_child","has_no_child","hash","hash","hash","hash","height","height","height","height","height","height","height","identifier","insert_next_sib","insert_prev_sib","into","into","into","into","into","into","into","into_bfs","into_bfs","into_iter","into_iter","iter","iter","iter_mut","iter_mut","iter_mut","matrix","matrix","maxx","maxy","minx","miny","name","ne","ne","ne","ne","ne","ne","ne","neg","new","new","new","new","new","node_count","node_count","parent","partial_cmp","partial_cmp","partial_cmp","pop_back","pop_back","pop_back","pop_front","pop_front","pop_front","postorder","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","prepend","prepend","prepend","push_back","push_back","push_back","push_front","push_front","push_front","refers_to","root","root","root_mut","serialize","serialize","serialize","serialize","set_file_name","split","sub","sub","sub","sub","sub","sub","to_component","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec","xOffset","xScale","xml","xyScale","yOffset","yScale","yxScale","ColorNotRGBA","ContourLenOneUnexpected","ContourLenZeroUnexpected","ContourNoNext","ContourNoPrevious","GlifComponentsCyclical","GlifContourHasBadPointType","GlifFileIoError","GlifFilenameInsane","GlifFilenameNotSet","GlifInputError","GlifLibError","GlifNotUtf8","GlifOutlineHasBadPointType","GlifParserError","GlifParserResult","GlifStringConversionError","HasControlCharacter","ImageIoError","ImageNotDecodable","ImageNotLoaded","ImageNotPNG","LenZero","PedanticXmlParseError","PointIdxOutOfBounds","TypeConversionError","XmlParseError","XmlWriteError","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","descendants","descendants","fmt","fmt","fmt","fmt","from","from","from","from","from","from","height","height","into","into","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","ci","idx","len","pi","pi","ptype","ptype","req_type","req_variant","c","idx","FromXML","Glif","GlifLike","IntoXML","Lib","None","Plist","Xml","advance_xml","anchors","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","components","default","default","descendants","descendants","deserialize","eq","eq","filename","filename","filename","filename_is_sane","flattened","fmt","fmt","from","from","from","from_xml","guidelines","height","height","images","into","into","lib","name","name","name","name_to_filename","name_to_filename","ne","ne","new","note","order","outline","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","read","read_from_filename","read_from_filename_pedantic","read_pedantic","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unicode","width","write","write_to_filename","xml","xml","xml","0","0","CData","CannotParse","Comment","Element","Element","Error","FromXML","IntoXML","MalformedXml","ProcessingInstruction","Text","TryIntoXML","XMLConversion","XMLNode","as_cdata","as_comment","as_element","as_mut_element","as_processing_instruction","as_text","attributes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","children","clone","clone","clone_into","clone_into","descendants","descendants","descendants","description","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_xml","from_xml_string","from_xml_string","from_xml_string","get_child","get_mut_child","get_text","height","height","height","into","into","into","into_xml","into_xml","into_xml","name","namespace","namespaces","ne","ne","new","parse","parse_all","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","prefix","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","take_child","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_xml","type_id","type_id","type_id","write","write_with_config","xml","0","0","0","0","0","0","1","Guideline","GuidelinePoint","angle","as_plist_dict","at","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color","color","data","data","default","default","descendants","descendants","deserialize","deserialize","eq","eq","fmt","fmt","from","from","from_x_y_angle","height","height","identifier","identifier","into","into","into","name","name","ne","ne","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","xml","y","BMP","Bitmap","Data","DataLoadState","DataOrBitmap","Decoded","GIF","GlifImage","Image","ImageCodec","ImageData","JPEG","Loaded","LoadedDecodeFailed","NotTried","PNG","TIFF","TriedAndFailed","Unknown","WebP","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codec","color","color","data","data","data","decode","descendants","descendants","descendants","descendants","descendants","descendants","deserialize","eq","eq","eq","eq","eq","eq","filename","filename","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_filename","from_filename","guess_codec","height","height","height","height","height","height","identifier","into","into","into","into","into","into","load","matrix","matrix","ne","ne","ne","ne","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","serialize","set_matrix","state","to_image_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_xml","type_id","type_id","type_id","type_id","type_id","type_id","xOffset","xScale","xyScale","yOffset","yScale","yxScale","0","height","pixels","width","0","1","2","3","4","5","Affine","FLIP_X","FLIP_Y","GlifMatrix","IDENTITY","as_coeffs","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","descendants","descendants","deserialize","determinant","eq","eq","fmt","fmt","from","from","from","height","height","into","into","into","inverse","is_finite","is_nan","map_unit_square","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","ne","ne","new","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","rotate","scale","scale_non_uniform","serialize","to_owned","to_owned","transform_rect_bbox","translate","try_from","try_from","try_into","try_into","type_id","type_id","Contour","Cubic","Cubic","FromKurbo","GlifContour","GlifOutline","GlifOutlineType","IntoGlifPoints","IntoKurbo","Mixed","OnlyCorners","Outline","OutlineType","Output","QuadToCubic","Quadratic","Quadratic","RefigurePointTypes","Reverse","RoundToInt","Spiro","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","components","contour","contours","create","default","default","default","deref","deref_mut","descendants","descendants","descendants","deserialize","deserialize","deserialize","eq","eq","eq","equivalent","equivalent","figure_type","fmt","fmt","fmt","from","from","from","from","from","from_kurbo","get_type","hash","hash","hash","height","height","height","into","into","into","into_glifpoints","into_kurbo","into_kurbo","into_kurbo_vec","ne","new","otype","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","quad_to_cubic","refigure_point_types","round_to_int","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_reversed","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","CheckSmooth","End","Error","Error","GenericPrevNext","Head","PrevNext","Reverse","State","Tail","borrow","borrow_mut","check_smooth","clone","clone_into","contour_prev_next","contour_prev_next_handles","descendants","eq","equivalent","fmt","from","hash","height","idx_at_start_or_end","idx_is_insane","idx_is_sane","idx_sane","idx_which_end","into","is_closed","is_open","is_point_smooth","is_point_smooth_within","next","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prev","prev_next","reverse","reverse","reverse","to_owned","to_reversed","try_from","try_into","type_id","cubic_outline","quadratic_outline","Always","Anchor","FloatClass","GlifParser","Level","Mend","Never","OpenType","Pedantry","TrueType","Ufo","UfoSpecErrorsOnly","UfoSpecOutdatedOnly","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","descendants","descendants","descendants","descendants","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","height","height","height","height","into","into","into","into","is_always","is_anchor","is_glif_parser","is_never","is_open_type","is_true_type","is_ufo","is_ufo_spec_errors_only","is_ufo_spec_outdated_only","level","maybe_round","mend","ne","new","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap_always","unwrap_anchor","unwrap_glif_parser","unwrap_never","unwrap_open_type","unwrap_true_type","unwrap_ufo","unwrap_ufo_spec_errors_only","unwrap_ufo_spec_outdated_only","A","At","B","Colocated","Curve","FromKurboPoint","GlifPoint","Handle","KurboPoint","Line","Move","Neither","ORIGIN","OffCurve","Point","PointData","PointType","QClose","QCurve","ToKurboPoint","Undefined","WhichHandle","ZERO","a","add","add","add_assign","add_assign","as_kpoint","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","default","default","default","default","default","default","descendants","descendants","descendants","descendants","descendants","descendants","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","distance","distance_squared","eq","eq","eq","eq","eq","eq","expand","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fields","from_handle","from_kurbo","from_kurbo","from_kurbo_offcurve","from_str","from_str","from_x_y_a_b_type","from_x_y_type","from_x_y_type","handle","handle_as_point","handle_or_colocated","hash","hash","hash","height","height","height","height","height","height","into","into","into","into","into","into","into","is_finite","is_nan","is_valid","is_valid","is_valid","is_valid_oncurve","lerp","midpoint","name","name","name","ne","ne","ne","ne","new","new","new","opposite","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","ptype","ptype","round","round_to_int","round_to_int","serialize","serialize","serialize","serialize","serialize","serialize","set_handle","smooth","smooth","sub","sub","sub","sub_assign","sub_assign","to_kurbo","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_vec2","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","x","x","x","xml","y","y","y","0","1","GlifString","GlifStringLenOne","ToGlifString","as_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","descendants","descendants","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","from","from","from_str","height","height","into","into","ne","ne","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","serialize","serialize","to_glif_string","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["glifparser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::IntegerOrFloat","","glifparser::anchor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::componentglifparser::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::error::GlifParserError","","","","","","","","","","","","","","","","","","","","glifparser::error::GlifStringConversionError","","glifparser::glif","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif::Lib","","glifparser::glif::xml","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::glif::xml::Error","glifparser::glif::xml::XMLNode","","","","","","glifparser::guideline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::image::DataOrBitmap","","","","glifparser::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::outline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::outline::contour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::outline::create","","glifparser::pedantry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glifparser::pointglifparser::point::Handle","","glifparser::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","The UFO data type “integer or float”.","","","","","","","","","","","","","","","","","","","","","","","Error will always be GlifParserError::PointIdxOutOfBounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When reading .glif files, how strict ought we to be? Can …","","","","","","","Read UFO .glif XML to Glif struct. This should only be …","If you have a known filename, it is always preferable to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Give back the float we’re holding…panic if we’re …","Give back the float we’re holding…panic if we’re …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of <code>Node</code>s as its children.","","","Composed of <code>data</code> and a list of its child <code>Node</code>s. Size …","Composed of a root <code>Node</code> and a list of its child <code>Node</code>s.","Removes and returns the given <code>Tree</code>’s children.","Adds all the forest’s trees at back of children list.","Add all the forest’s trees at back of children list","Adds all the forest’s trees at back of children list.","","Returns the last child of this node, or None if it has no …","Returns a mutable reference to the last child of this node,","Returns a mutable pointer to the last child of the forest, …","Returns a mutable pointer to the last child of this node, …","","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator in a breadth-first manner, …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reference of its associated data.","Mutable reeference of its associated data.","Clones the node deeply and creates a new tree.","Clones the node’s descendant nodes as a forest.","","","","","","","Returns the number of child nodes in <code>Forest</code>.","Returns the number of child nodes in <code>Node</code>.","","","","","","","","","","","","","The subtree departs from its parent and becomes an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs tree from tuple notations.","Construct forest from tuple notations.","Returns the first child of the forest, or <code>None</code> if it is …","Returns the first child of this node, or None if it has no …","Returns a mutable reference to the first child of this …","Returns a mutable pointer to the first child of the forest,","Returns a mutable pointer to the first child of this node, …","","Returns <code>true</code> if <code>Forest</code> is empty.","Returns <code>true</code> if <code>Node</code> has no child nodes.","","","","","","","","","","","","","Inserts sib tree after <code>self</code>. The newly inserted node will …","Inserts sib tree before <code>self</code>. The newly inserted node will …","","","","","","","","Provides a forward iterator with owned data in a …","Provides a forward iterator with owned data in a …","","","Provides a forward iterator over child <code>Node</code>s.","Provides a forward iterator over child <code>Node</code>s","Provides a forward iterator over child <code>Node</code>s with mutable …","Provides a forward iterator over child <code>Node</code>s with mutable …","Provides a forward iterator over child <code>Node</code>s with mutable …","","","","","","","","","","","","","","","","","","","Creates a <code>Tree</code> containing only root node associated with …","Makes an empty <code>Forest</code>.","Returns the number of all child nodes in <code>Forest</code>.","Returns the number of all child nodes in <code>Node</code>, including …","Returns the parent node of this node, or None if it is the …","","","","Removes and returns the last child.","Remove and return the first child.","Removes and return the last child.","Removes and returns the first child.","Remove and return the first child.","Removes and return the first child.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds all the forest’s trees at front of children list.","Add all the forest’s trees at front of children list","Adds all the forest’s trees at front of children list.","Adds the tree as the last child.","Add the tree as the last child.","Adds the tree as the last child.","Adds the tree as the first child.","Add the tree as the first child.","Adds the tree as the first child.","","Reference of the root node.","","Mutable reference of the root node.","","","","","","","","","","","","","Must have filename set, and that file must be readable, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Color (for guidelines, images, etc) not RGBA","A requested point index is out of bounds","","No next on an open contour","No previous on an open contour.","Components of the glyph form a loop","","OS error when reading glif","Glif filename doesn’t match name in XML","Glif filename not set","The XML is valid, but doesn’t meet the UFO .glif spec",".glif has invalid ","Glif isn’t UTF8","Self-built Outline/Contour error.","","","","","OS error when reading image","Image not decodable","Image not yet read","Image not PNG","","The XML making up the glif is invalid","","Error for use by parse() trait (FromStr)","The XML making up the glif is invalid","Failures when writing glif XML","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A UFO .glif","","","","","","This variant is highly undesirable to see as output and …","","","","","","","","","","","Note that these components are not yet parsed or checked …","","","","","","","","","","It’s up to the API consumer to set this.","","Flatten a UFO .glif with components.","","","","","","",".glif guidelines. Note: glif may have more guidelines, not …","","","glifparser does support reading the data of images and …","","","glif private library","","","","","","","","","This is an arbitrary glyph comment, exactly like the …","","","","","","","","","","","Read UFO .glif XML to Glif struct. This should only be …","If you have a known filename, it is always preferable to …","","","","","","","","","","","","","","","","","","","","","","This library is unable to process this XML. This can occur …","","Represents an XML element.","","Errors that can occur parsing XML","","","The XML is invalid","","","","","","","","","","","","The Element attributes","","","","","","","","Children","","","","","","","","","","","","","","","","","","","","","","","","Find a child element with the given name and return a …","Find a child element with the given name and return a …","Returns the inner text/cdata of this element, if any.","","","","","","","","","","The name of the Element.  Does not include any namespace …","This elements namespace, if any","The full list of namespaces, if any","","","Create a new empty element with given name","Parses some data into an Element","Parses some data into a list of <code>XMLNode</code>s","","","","","","","This elements prefix, if any","","","","","","","Find a child element with the given name, remove and …","","","","","","","","","","","","","","Writes out this element as the root element in an new XML …","Writes out this element as the root element in a new XML …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>pixels</code> always RGBA8888","","","","Image has been loaded and decoded to a bitmap","","","","","","","Image loaded from disk to data, but not yet decoded","Image loaded, but decoding it to a bitmap failed","Image loading hasn’t even been attempted yet","","","Image loading tried, but failed to read from disk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitmap is guaranteed to always be in RGBA8888 format. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2D affine transform.","A transform that is flipped on the x-axis.","A transform that is flipped on the y-axis. Useful for …","","The identity transform.","Get the coefficients of the transform.","","","","","","","","","","","","","","Compute the determinant of this transform.","","","","","","","","","","","","","Compute the inverse transform.","Is this map finite?","Is this map NaN?","Creates an affine transformation that takes the unit …","","","","","","","","","","","","","","","Construct an affine transform from coefficients.","","","","","","","","","An affine transform representing rotation.","An affine transform representing uniform scaling.","An affine transform representing non-uniform scaling with …","","","","Compute the bounding box of a transformed rectangle.","An affine transform representing translation.","","","","","","","","","","","","","","","","","","","","","","","","","Reverse the logical (visual) order of Bézier splines in a …","This trait is primarily intended for easing .glif equality …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverse the logical (visual) order of Bézier splines in a …","","","","","","","","Return the previous and next index, given an index. As …","","","","","","","","","","","","Returns whether the index is sane given the vec it’s …","Returns which end we have, given an index.","","","","","","","","","","","","Return the previous and next index, given an index.","Following semantics of std::slice::reverse Performance …","Following semantics of std::slice::reverse Performance …","Following semantics of std::slice::reverse Performance …","","","","","","","","","","","Glifparser’s permissive attitude to the spec","","","","Strict to a UFO that will be used to make an OpenType …","","Strict to a UFO that will be used to make a TrueType font. …","Strict to the UFO spec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",".glif “curve” (cubic Bézier point to be followed by …","","A “close to the source” .glif <code>&lt;point&gt;</code>","A handle on a point","A 2D point.",".glif “line”",".glif “move”, can act as any point type!","TODO: Deprecate Neither.","The point at the origin; (0, 0).",".glif “offcurve” or “”","A Skia-friendly point","API consumers may put any clonable type as an associated …","","TODO: Remove. DEPRECATED",".glif “qcurve” (quadratic Bézier point to be followed …","","","For use by <code>Point::handle_or_colocated</code> TODO: Replace with …","The point (0, 0).","","","","","","","","","","","","","","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded up to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Euclidean distance.","Squared Euclidean distance.","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded away from zero …","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded down to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Make a point from its x and y position, handles and type","","","","","","","Make a point from its x and y position, handles and type","Make a point from its x and y position and type","Make a point from its x and y position and type","","","Return an x, y position for a point, or one of its …","","","","","","","","","","","","","","","","","Is this point finite?","Is this point NaN?","","<code>validate_data</code> parameter allows you to define an <code>is_valid</code> …","","","Linearly interpolate between two points.","Determine the midpoint of two points.","","","","","","","","","","Create a new <code>Point</code> with the provided <code>x</code> and <code>y</code> coordinates.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded to the nearest …","","","","","","","","","This function is intended for use by generic functions …","","","","","","","","","","","","","","","","","Convert this point into a <code>Vec2</code>.","Returns a new <code>Point</code>, with <code>x</code> and <code>y</code> rounded towards zero to …","","","","","","","","","","","","","","","","","","","","","The x coordinate.","","","","The y coordinate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,2,1,1,0,0,2,2,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,0,0,1,1,1,1,0,1,2,2,4,2,1,2,2,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,2,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,4,1,1,1,1,1,1,1,1,1,0,0,3,2,5,1,6,7,0,0,8,9,8,9,8,9,8,9,8,9,8,8,9,8,9,8,9,8,9,8,9,8,9,8,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,8,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,11,11,12,13,12,13,11,12,13,14,12,13,13,11,13,11,12,13,14,15,16,17,11,12,13,14,15,16,17,11,12,13,14,15,16,17,11,12,14,15,16,17,11,12,11,12,13,13,13,13,13,14,15,16,17,12,13,12,13,11,14,15,16,17,11,12,13,14,15,16,17,13,11,11,11,11,11,11,12,14,15,16,17,11,12,13,11,12,13,14,18,14,15,16,17,11,11,12,12,13,13,14,15,16,17,11,11,11,12,12,12,13,17,11,12,12,13,11,12,13,16,12,13,14,11,12,13,14,15,16,17,11,12,13,14,13,13,14,15,16,17,11,12,13,11,12,11,12,12,13,11,12,13,14,16,17,17,17,17,17,14,15,16,17,11,12,13,11,14,15,16,11,12,12,13,13,11,12,13,11,12,13,11,12,13,14,15,16,17,11,12,13,14,15,16,17,11,12,13,14,15,16,17,11,12,13,14,15,16,17,11,12,13,11,12,13,11,12,13,11,12,13,14,11,15,11,14,15,16,17,14,11,11,11,12,12,12,12,14,14,15,16,17,11,12,11,12,13,14,15,16,17,11,12,13,14,15,16,17,11,12,13,14,15,16,17,11,12,13,15,14,14,14,14,14,14,14,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,20,19,19,19,19,20,19,19,19,19,19,20,19,20,19,19,19,20,19,20,20,19,19,20,19,19,19,19,19,20,19,20,19,20,19,20,19,20,19,20,19,19,20,19,20,19,20,19,20,19,21,22,23,24,25,26,27,28,29,30,31,32,33,33,32,34,32,34,35,35,36,36,0,0,0,0,0,37,37,37,38,38,37,38,37,38,37,38,37,38,38,37,38,37,38,38,37,38,39,38,38,38,38,37,38,37,38,38,40,38,37,38,38,37,38,38,39,38,38,0,38,37,38,38,38,38,38,37,38,37,38,37,38,37,38,0,0,0,0,38,37,38,37,38,37,38,37,38,38,38,0,0,0,41,38,42,43,44,45,44,0,44,0,0,0,45,44,44,0,0,0,44,44,44,44,44,44,46,44,46,45,44,46,45,45,46,44,46,44,46,44,46,45,45,44,46,44,46,44,46,45,45,44,46,45,40,40,40,40,46,46,46,44,46,45,44,46,45,41,41,41,46,46,46,44,46,46,46,46,44,46,45,44,46,45,46,44,46,45,44,46,45,46,44,46,45,44,46,45,44,46,45,47,44,46,45,46,46,41,48,49,50,51,52,53,53,0,0,54,54,54,55,54,55,54,55,54,55,54,54,54,54,54,55,54,55,54,55,54,55,54,55,54,55,54,54,55,54,54,54,55,55,54,54,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,56,57,57,0,0,58,56,0,0,0,0,56,58,58,58,56,56,58,56,56,58,57,59,60,61,56,58,57,59,60,61,56,58,57,59,60,61,56,58,57,59,60,61,56,61,60,61,61,59,61,61,58,57,59,60,61,56,60,58,57,59,60,61,56,60,61,58,57,59,60,61,56,58,57,59,60,61,56,60,61,59,58,57,59,60,61,56,60,58,57,59,60,61,56,61,60,61,57,59,60,61,58,57,59,60,61,56,58,57,59,60,61,56,58,57,59,60,61,56,58,57,59,60,61,56,60,60,59,60,58,57,59,60,61,56,58,57,59,60,61,56,58,57,59,60,61,56,60,58,57,59,60,61,56,60,60,60,60,60,60,62,63,63,63,64,64,64,64,64,64,0,65,65,0,65,65,64,65,64,65,64,65,64,65,64,65,64,65,65,65,64,65,64,65,64,65,65,64,65,64,64,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,64,65,65,64,65,64,65,64,65,64,65,65,65,65,65,64,65,65,65,64,65,64,65,64,65,0,66,67,0,0,0,0,0,0,66,66,0,0,68,0,66,67,0,0,0,67,66,67,69,66,67,69,66,67,69,66,67,69,69,0,69,0,66,67,69,69,69,66,67,69,66,67,69,66,67,69,66,67,69,66,67,69,66,67,67,69,69,70,69,66,67,69,66,67,69,66,67,69,68,71,71,71,69,69,69,66,67,69,66,67,69,66,67,69,66,67,69,72,73,74,66,67,69,66,67,69,75,66,67,69,66,67,69,69,66,67,69,0,0,76,77,0,78,0,0,0,78,78,78,79,78,78,77,77,78,78,78,78,78,78,78,76,76,76,76,76,78,80,80,79,79,76,78,78,78,78,76,76,75,75,75,78,75,78,78,78,0,0,81,82,0,83,0,0,81,83,0,83,83,81,81,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,81,82,83,81,83,83,83,81,81,84,83,84,84,84,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,84,81,83,82,81,82,83,81,83,83,83,81,81,85,86,85,86,87,0,0,0,0,87,87,85,88,87,0,0,0,87,87,0,87,0,88,89,88,88,88,88,89,89,90,87,86,89,85,88,90,87,86,89,85,88,88,90,87,86,89,85,88,90,87,86,89,85,88,89,90,87,86,89,85,88,90,87,86,89,85,88,90,87,86,89,85,88,88,88,90,87,86,89,85,88,88,88,90,87,87,86,89,85,88,88,90,90,87,87,87,87,87,87,86,86,86,86,86,86,89,89,85,85,88,88,89,90,91,90,90,87,85,89,90,89,89,89,89,90,87,85,90,87,86,89,85,88,90,87,86,89,85,85,88,88,88,87,89,85,87,88,88,90,90,89,90,86,89,88,90,89,88,85,90,87,86,89,85,88,90,87,86,89,85,88,90,87,86,89,85,88,90,87,86,89,85,88,90,89,88,90,89,90,87,86,89,85,88,89,90,89,88,88,88,88,88,92,90,87,86,89,85,88,87,88,88,88,90,87,86,89,85,88,90,87,86,89,85,88,90,87,86,89,85,88,90,89,88,90,90,89,88,93,93,0,0,0,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,94,95,95,94,95,94,94,95,94,95,94,95,94,95,94,95,94,95,94,95,94,95,96,94,95,94,95,94,94,94,95,95,94,95,94,95],"f":[null,null,null,null,[[["usize",15]]],[[["u64",15]]],[[["i64",15]]],[[["u32",15]]],[[["f32",15]]],[[["isize",15]]],[[["u16",15]]],[[["i16",15]]],[[["i32",15]]],[[["integerorfloat",4]]],[[["f64",15]]],[[["u8",15]]],[[["i8",15]]],null,[[["integerorfloat",4]],["bool",15]],[[]],[[]],[[["usize",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[],["integerorfloat",4]],[[]],null,null,[[["usize",15]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["usize",15]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[],["integerorfloat",4]],[[["usize",15]],["usize",15]],[[],[["integerorfloat",4],["result",4,["integerorfloat"]]]],[[],["string",3]],[[["i64",15]]],[[["u32",15]]],[[["usize",15]]],[[["f32",15]]],[[["u64",15]]],[[["isize",15]]],[[["u16",15]]],[[["u8",15]]],[[["i8",15]]],[[["f64",15]]],[[["i16",15]]],[[["integerorfloat",4]]],[[["i32",15]]],[[["integerorfloat",4]],["bool",15]],null,[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["u64",15]],["integerorfloat",4]],[[["f32",15]],["integerorfloat",4]],[[["usize",15]],["integerorfloat",4]],[[["f64",15]],["integerorfloat",4]],[[["i64",15]],["integerorfloat",4]],[[["i32",15]],["integerorfloat",4]],[[["u16",15]],["integerorfloat",4]],[[]],[[["u32",15]],["integerorfloat",4]],[[["isize",15]],["integerorfloat",4]],[[["i16",15]],["integerorfloat",4]],[[["i8",15]],["integerorfloat",4]],[[["u8",15]],["integerorfloat",4]],[[["u32",15]],["integerorfloat",4]],[[["bezpath",3]]],[[["str",15]],[["integerorfloat",4],["result",4,["integerorfloat"]]]],[[["str",15],["u32",15]],[["integerorfloat",4],["result",4,["integerorfloat"]]]],null,null,[[]],[[],["usize",15]],[[],[["result",4,["f32","i32"]],["f32",15],["i32",15]]],[[],[["i32",15],["result",4,["i32","f32"]],["f32",15]]],null,[[]],[[]],[[],[["result",4,["vec","glifparsererror"]],["vec",3,["pathel"]],["glifparsererror",4]]],[[],[["result",4,["vec","glifparsererror"]],["vec",3,["pathel"]],["glifparsererror",4]]],[[],["element",3]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["f32",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[],["bool",15]],null,[[["f32",15]]],[[["u16",15]]],[[["u8",15]]],[[["u32",15]]],[[["i8",15]]],[[["integerorfloat",4]]],[[["f64",15]]],[[["isize",15]]],[[["u64",15]]],[[["i64",15]]],[[["usize",15]]],[[["i16",15]]],[[["i32",15]]],[[]],[[],["integerorfloat",4]],[[],["integerorfloat",4]],null,[[["integerorfloat",4]],[["ordering",4],["option",4,["ordering"]]]],null,null,[[]],[[]],[[]],[[]],[[],["integerorfloat",4]],[[["str",15]],[["glifparsererror",4],["glif",3],["result",4,["glif","glifparsererror"]]]],[[["path",3],["asref",8,["path"]],["clone",8]],[["glifparsererror",4],["glif",3],["result",4,["glif","glifparsererror"]]]],[[["clone",8],["asref",8,["path"]],["path",3],["pedantry",3]],[["glifparsererror",4],["glif",3],["result",4,["glif","glifparsererror"]]]],[[["str",15],["pedantry",3]],[["glifparsererror",4],["glif",3],["result",4,["glif","glifparsererror"]]]],[[]],[[]],[[["isize",15]]],[[["i16",15]]],[[["f32",15]]],[[["i8",15]]],[[["i32",15]]],[[["integerorfloat",4]]],[[["u8",15]]],[[["i64",15]]],[[["u32",15]]],[[["u64",15]]],[[["u16",15]]],[[["f64",15]]],[[["usize",15]]],[[],["result",4]],null,[[["f64",15]]],[[["u64",15]]],[[["i64",15]]],[[["usize",15]]],[[["f32",15]]],[[["i8",15]]],[[["u32",15]]],[[["integerorfloat",4]]],[[["i32",15]]],[[["u16",15]]],[[["u8",15]]],[[["isize",15]]],[[["i16",15]]],[[],["u32",15]],[[],[["option",4,["i64"]],["i64",15]]],[[]],[[],["contour",6]],[[],["outline",6]],[[],["string",3]],[[],[["u64",15],["option",4,["u64"]]]],[[["str",15]],[["integerorfloat",4],["result",4,["integerorfloat"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["integerorfloat",4]],["integerorfloat",4]],[[],["f32",15]],[[],["i32",15]],[[["glif",3]],[["string",3],["glifparsererror",4],["result",4,["string","glifparsererror"]]]],[[["glif",3]],[["result",4,["glifparsererror"]],["glifparsererror",4]]],[[],["element",3]],[[],["element",3]],[[],["element",3]],[[],["integerorfloat",4]],null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[],["anchor",3]],[[],["glifanchor",3]],[[]],[[]],null,[[],["anchor",3]],[[],["glifanchor",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[["anchor",3]],["bool",15]],[[["glifanchor",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["glifanchor",3],["pedantry",3]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["anchor",3]],["bool",15]],[[["glifanchor",3]],["bool",15]],[[["string",3],["f32",15],["option",4,["string"]]],["anchor",3]],[[["integerorfloat",4],["glifstringlenone",3],["option",4,["glifstringlenone"]]],["glifanchor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["element",3]],null,null,null,null,[[],["value",4]],null,[[]],[[]],[[],["color",3]],[[]],[[],["color",3]],[[["usize",15]],["usize",15]],[[],["result",4]],[[["color",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["integerorfloat",4]],["color",3]],[[["str",15]],["result",4]],null,[[],["usize",15]],[[]],[[]],[[["color",3]],["bool",15]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["forest",3]],[[["forest",3]]],[[["forest",3]]],[[["forest",3]]],[[],[["option",4,["node"]],["node",3]]],[[],[["option",4,["node"]],["node",3]]],[[],[["pin",3,["node"]],["option",4,["pin"]]]],[[],[["pin",3,["node"]],["option",4,["pin"]]]],[[],[["pin",3,["node"]],["option",4,["pin"]]]],null,[[],[["bfsforest",3,["splitted"]],["splitted",3,["iter"]]]],[[],[["bfstree",3,["splitted"]],["splitted",3,["iter"]]]],[[],[["bfsforest",3,["splitted"]],["splitted",3,["iter"]]]],[[],[["bfsforest",3,["splitted"]],["splitted",3,["itermut"]]]],[[],[["bfsforest",3,["splitted"]],["splitted",3,["itermut"]]]],[[],[["splitted",3,["itermut"]],["bfstree",3,["splitted"]]]],[[],[["bfsforest",3,["splitted"]],["splitted",3,["itermut"]]]],[[],[["splitted",3,["itermut"]],["bfstree",3,["splitted"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["glifcomponent",3]],[[],["glifcomponents",3]],[[],["component",3]],[[],["componentrect",3]],[[],["tree",3]],[[],["forest",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tree",3]],["ordering",4]],[[["forest",3]],["ordering",4]],[[["node",3]],["ordering",4]],[[]],[[]],[[],["tree",3]],[[],["forest",3]],[[],["glifcomponent",3]],[[],["glifcomponents",3]],[[],["component",3]],[[],["componentrect",3]],[[],["forest",3]],[[],["node",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tree",3]],[[["tree",3]],["tree",3]],[[],["tree",3]],[[["forest",3]],["tree",3]],[[["tree",3]],["tree",3]],[[["forest",3]],["tree",3]],[[]],[[]],[[["glifcomponent",3]],["bool",15]],[[["glifcomponents",3]],["bool",15]],[[["component",3]],["bool",15]],[[["componentrect",3]],["bool",15]],[[["tree",3]],["bool",15]],[[["forest",3]],["bool",15]],[[["node",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["option",4]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[["treewalk",3]],["tree",3]],[[["bfstree",3]],["tree",3]],[[]],[[["forestwalk",3]],["forest",3]],[[]],[[["bfsforest",3]],["forest",3]],[[]],[[["string",3],["f32",15]]],[[],["tree",3]],[[],["forest",3]],[[],[["option",4,["node"]],["node",3]]],[[],[["option",4,["node"]],["node",3]]],[[],[["pin",3,["node"]],["option",4,["pin"]]]],[[],[["pin",3,["node"]],["option",4,["pin"]]]],[[],[["pin",3,["node"]],["option",4,["pin"]]]],null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["tree",3]]],[[["tree",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["splitted",3,["intoiter"]],["bfstree",3,["splitted"]]]],[[],[["splitted",3,["intoiter"]],["bfsforest",3,["splitted"]]]],[[],["intoiter",3]],[[],["intoiter",3]],[[],["iter",3]],[[],["iter",3]],[[],["itermut",3]],[[],["itermut",3]],[[],["itermut",3]],[[],["glifmatrix",3]],null,null,null,null,null,null,[[["glifcomponent",3]],["bool",15]],[[["glifcomponents",3]],["bool",15]],[[["component",3]],["bool",15]],[[["componentrect",3]],["bool",15]],[[["tree",3]],["bool",15]],[[["forest",3]],["bool",15]],[[["node",3]],["bool",15]],[[],["forest",3]],[[]],[[]],[[]],[[],["tree",3]],[[],["forest",3]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4,["node"]],["node",3]]],[[["tree",3]],[["ordering",4],["option",4,["ordering"]]]],[[["forest",3]],[["ordering",4],["option",4,["ordering"]]]],[[["node",3]],[["ordering",4],["option",4,["ordering"]]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[],[["option",4,["tree"]],["tree",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["forest",3]]],[[["forest",3]]],[[["forest",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["glif",3]],["bool",15]],[[],["node",3]],null,[[],[["node",3],["pin",3,["node"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["asref",8,["path"]],["path",3]]],[[]],[[["tree",3]],["forest",3]],[[["tree",3]],["forest",3]],[[["tree",3]],["forest",3]],[[["tree",3]],["forest",3]],[[["forest",3]],["forest",3]],[[["forest",3]],["forest",3]],[[],[["result",4,["component","glifparsererror"]],["glifparsererror",4],["component",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["element",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["glifparsererror",4]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["parseerror",4]]],[[["fromutf8error",3]]],[[["plisterror",3]]],[[["xmltreeerror",4]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["element",3]],null,[[]],[[]],[[]],[[]],[[],["lib",4]],[[],["glif",3]],[[]],[[]],null,[[]],[[],["glif",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[["lib",4]],["bool",15]],[[["glif",3]],["bool",15]],[[],["option",4]],[[],["option",4]],null,[[],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[["option",4]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["glifparserresult",6]],null,[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],null,[[],["string",3]],[[],["string",3]],null,[[["str",15],["bool",15]],["string",3]],[[],["string",3]],[[["lib",4]],["bool",15]],[[["glif",3]],["bool",15]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["glifparsererror",4],["glif",3],["result",4,["glif","glifparsererror"]]]],[[["path",3],["asref",8,["path"]],["clone",8]],[["glifparsererror",4],["glif",3],["result",4,["glif","glifparsererror"]]]],[[["clone",8],["asref",8,["path"]],["path",3],["pedantry",3]],[["glifparsererror",4],["glif",3],["result",4,["glif","glifparsererror"]]]],[[["str",15],["pedantry",3]],[["glifparsererror",4],["glif",3],["result",4,["glif","glifparsererror"]]]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["glif",3]],[["string",3],["glifparsererror",4],["result",4,["string","glifparsererror"]]]],[[["glif",3]],[["result",4,["glifparsererror"]],["glifparsererror",4]]],null,[[],["element",3]],[[],["element",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["option",4,["element"]],["element",3]]],[[],[["option",4,["element"]],["element",3]]],[[],["option",4]],[[],[["str",15],["option",4,["str"]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",8],["option",4,["error"]]]],null,[[],["xmlnode",4]],[[],["element",3]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["str",15]],[[["xmlnode",4]],["bool",15]],[[["element",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[],["glifparserresult",6]],[[["string",3]],["glifparserresult",6]],[[["string",3]],["glifparserresult",6]],[[["string",3]],["glifparserresult",6]],[[],[["option",4,["element"]],["element",3]]],[[],[["option",4,["element"]],["element",3]]],[[],[["option",4,["cow"]],["cow",4,["str"]]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["element",3]],[[],["element",3]],[[],["element",3]],null,null,null,[[["xmlnode",4]],["bool",15]],[[["element",3]],["bool",15]],[[["str",15]],["element",3]],[[],[["result",4,["element","parseerror"]],["element",3],["parseerror",4]]],[[],[["vec",3,["xmlnode","global"]],["parseerror",4],["result",4,["vec","parseerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["element"]],["element",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["glifparserresult",6,["element"]],["element",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["emittererror",4],["result",4,["emittererror"]]]],[[["emitterconfig",3]],[["emittererror",4],["result",4,["emittererror"]]]],[[],["element",3]],null,null,null,null,null,null,null,null,null,null,[[],["dictionary",3]],null,[[]],[[]],[[]],[[]],[[],["guidelinepoint",3]],[[],["guideline",3]],[[]],[[]],[[]],null,[[]],null,[[],["guidelinepoint",3]],[[],["guideline",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[["guidelinepoint",3]],["bool",15]],[[["guideline",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["integerorfloat",4],["f32",15]]],[[],["usize",15]],[[],["usize",15]],[[]],null,[[]],[[]],[[]],[[]],null,[[["guidelinepoint",3]],["bool",15]],[[["guideline",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["element",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dataloadstate",4]],[[],["dataorbitmap",4]],[[],["imagedata",3]],[[],["glifimage",3]],[[],["image",3]],[[],["imagecodec",4]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],[["glifparsererror",4],["result",4,["vec","glifparsererror"]],["vec",3,["u8"]]]],null,null,[[],[["result",4,["glifparsererror"]],["glifparsererror",4]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[["dataloadstate",4]],["bool",15]],[[["dataorbitmap",4]],["bool",15]],[[["imagedata",3]],["bool",15]],[[["glifimage",3]],["bool",15]],[[["image",3]],["bool",15]],[[["imagecodec",4]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pathbuf",3],["into",8,["pathbuf"]]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["pathbuf",3],["into",8,["pathbuf"]]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[],["imagecodec",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["glifparsererror"]],["glifparsererror",4]]],[[],["glifmatrix",3]],null,[[["dataorbitmap",4]],["bool",15]],[[["imagedata",3]],["bool",15]],[[["glifimage",3]],["bool",15]],[[["image",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],null,[[["gliflike",8]],[["glifparsererror",4],["result",4,["image","glifparsererror"]],["image",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["glifparserresult",6,["element"]],["element",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["glifmatrix",3]],[[],["affine",3]],[[]],[[]],[[],["glifmatrix",3]],[[],["affine",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],[["result",4,["affine"]],["affine",3]]],[[],["f64",15]],[[["glifmatrix",3]],["bool",15]],[[["affine",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["translatescale",3]],["affine",3]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["affine",3]],[[]],[[]],[[],["affine",3]],[[],["bool",15]],[[],["bool",15]],[[["rect",3]],["affine",3]],[[["pathseg",4]],["pathseg",4]],[[["point",3]],["point",3]],[[["ellipse",3]]],[[["affine",3]],["affine",3]],[[["cubicbez",3]],["cubicbez",3]],[[["circle",3]]],[[["line",3]],["line",3]],[[["pathel",4]],["pathel",4]],[[["bezpath",3]],["bezpath",3]],[[["bezpath",3]],["bezpath",3]],[[["quadbez",3]],["quadbez",3]],[[["affine",3]]],[[["glifmatrix",3]],["bool",15]],[[["affine",3]],["bool",15]],[[],["affine",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]],["affine",3]],[[["f64",15]],["affine",3]],[[["f64",15]],["affine",3]],[[],["result",4]],[[]],[[]],[[["rect",3]],["rect",3]],[[],["affine",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["glifoutlinetype",4]],[[],["outlinetype",4]],[[],["glifoutline",3]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["glifoutlinetype",4]],["bool",15]],[[["outlinetype",4]],["bool",15]],[[["glifoutline",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["glifoutlinetype",4]]],[[]],[[["vec",3,["glifcontour"]],["glifcontour",6]]],[[["bezpath",3]]],[[],["glifoutlinetype",4]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["result",4,["bezpath","glifparsererror"]],["bezpath",3],["glifparsererror",4]]],[[],[["result",4,["bezpath","glifparsererror"]],["bezpath",3],["glifparsererror",4]]],[[],[["result",4,["vec","glifparsererror"]],["vec",3,["pathel"]],["glifparsererror",4]]],[[["glifoutline",3]],["bool",15]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["outline",6],["glifparsererror",4],["result",4,["outline","glifparsererror"]]]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["usize",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[],["end",4]],[[]],[[["usize",15]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["usize",15]],[["glifparsererror",4],["result",4,["glifparsererror"]]]],[[["usize",15]],["usize",15]],[[["end",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[["usize",15]],[["result",4,["bool"]],["bool",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["result",4]],[[["usize",15]],[["result",4,["option"]],["option",4,["end"]]]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[["usize",15],["f32",15]],[["result",4,["bool","glifparsererror"]],["glifparsererror",4],["bool",15]]],[[["usize",15]],[["result",4,["usize"]],["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]],[["result",4,["usize"]],["usize",15]]],[[["usize",15]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["glifoutline",3]],[["outline",6],["pointdata",8]]],[[["glifoutline",3]],[["outline",6],["pointdata",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pedantry",3]],[[],["mend",4]],[[],["level",4]],[[],["floatclass",4]],[[]],[[]],[[]],[[]],[[],["pedantry",3]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["pedantry",3]],["bool",15]],[[["mend",4]],["bool",15]],[[["level",4]],["bool",15]],[[["floatclass",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["integerorfloat",4],["floatclass",4]],["f32",15]],null,[[["pedantry",3]],["bool",15]],[[["level",4],["mend",4]],["pedantry",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["point",3]],[[["vec2",3]],["point",3]],[[]],[[["vec2",3]]],[[],["kurbopoint",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["point",3]],[[],["glifpoint",3]],[[],["pointtype",4]],[[],["handle",4]],[[],["point",3]],[[],["whichhandle",4]],[[],["point",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["glifpoint",3]],[[],["pointtype",4]],[[],["handle",4]],[[],["point",3]],[[]],[[],["point",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4,["point"]],["point",3]]],[[["point",3]],["f64",15]],[[["point",3]],["f64",15]],[[["glifpoint",3]],["bool",15]],[[["pointtype",4]],["bool",15]],[[["handle",4]],["bool",15]],[[["point",3]],["bool",15]],[[["whichhandle",4]],["bool",15]],[[["point",3]],["bool",15]],[[],["point",3]],[[],["point",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[["point",3]],["glifpoint",3]],[[["pathel",4]]],[[]],[[["str",15]]],[[["handle",4]]],[[["pathel",4]]],[[["pathel",4]]],[[]],[[["option",4,["glifpoint"]],["glifpoint",3]],["handle",4]],[[["point",3]],["handle",4]],[[["option",4]]],[[]],[[]],[[["glifpoint",3]]],[[]],[[["str",15]]],[[]],[[]],[[],["point",3]],[[["pointtype",4],["bool",15],["string",3],["option",4],["option",4,["string"]]],["point",3]],[[["whichhandle",4],["point",3]]],[[["point",3]]],[[["point",3],["pointtype",4]]],[[["point",3]]],[[["str",15]],[["result",4,["pointtype"]],["pointtype",4]]],[[["str",15]],[["whichhandle",4],["result",4,["whichhandle"]]]],[[["pointtype",4]],["point",3]],[[["pointtype",4]],["glifpoint",3]],[[["pointtype",4]],["point",3]],[[["whichhandle",4]],["handle",4]],[[["whichhandle",4]],["kurbopoint",3]],[[["whichhandle",4]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["char",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["option",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["f64",15],["point",3]],["point",3]],[[["point",3]],["point",3]],[[["string",3],["option",4,["string"]]]],null,null,[[["glifpoint",3]],["bool",15]],[[["handle",4]],["bool",15]],[[["point",3]],["bool",15]],[[["point",3]],["bool",15]],[[],["glifpoint",3]],[[],["point",3]],[[["f64",15]],["point",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["point",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["whichhandle",4],["handle",4]]],null,null,[[],["point",3]],[[["vec2",3]],["point",3]],[[["point",3]],["vec2",3]],[[]],[[["vec2",3]]],[[],["kurbopoint",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["vec2",3]],[[],["point",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["element",3]],null,null,null,null,null,null,null,null,[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[],["glifstring",3]],[[],["glifstringlenone",3]],[[]],[[]],[[],["glifstring",3]],[[],["glifstringlenone",3]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["result",4]],[[],["result",4]],[[["glifstring",3]],["bool",15]],[[["glifstringlenone",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],[["result",4,["glifstringconversionerror"]],["glifstringconversionerror",4]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["glifstring",3]],["bool",15]],[[["glifstringlenone",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["glifstring",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["string",3]],[["result",4,["glifstringconversionerror"]],["glifstringconversionerror",4]]],[[["string",3]],[["result",4,["glifstringconversionerror"]],["glifstringconversionerror",4]]],[[],["result",4]],[[],["result",4]],[[["string",3]],[["result",4,["glifstringconversionerror"]],["glifstringconversionerror",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"IntegerOrFloat"],[6,"Contour"],[8,"Codepoint"],[6,"Outline"],[6,"GlifContour"],[13,"Integer"],[13,"Float"],[3,"Anchor"],[3,"GlifAnchor"],[3,"Color"],[3,"Tree"],[3,"Forest"],[3,"Node"],[3,"GlifComponent"],[3,"GlifComponents"],[3,"Component"],[3,"ComponentRect"],[8,"FlattenedGlif"],[4,"GlifParserError"],[4,"GlifStringConversionError"],[13,"GlifFileIoError"],[13,"GlifFilenameNotSet"],[13,"GlifFilenameInsane"],[13,"GlifComponentsCyclical"],[13,"XmlParseError"],[13,"PedanticXmlParseError"],[13,"XmlWriteError"],[13,"GlifInputError"],[13,"ImageIoError"],[13,"ContourNoPrevious"],[13,"ContourNoNext"],[13,"GlifOutlineHasBadPointType"],[13,"PointIdxOutOfBounds"],[13,"GlifContourHasBadPointType"],[13,"TypeConversionError"],[13,"HasControlCharacter"],[4,"Lib"],[3,"Glif"],[8,"GlifLike"],[8,"FromXML"],[8,"IntoXML"],[13,"Plist"],[13,"Xml"],[4,"XMLNode"],[4,"Error"],[3,"Element"],[8,"TryIntoXML"],[13,"MalformedXml"],[13,"Element"],[13,"Comment"],[13,"CData"],[13,"Text"],[13,"ProcessingInstruction"],[3,"Guideline"],[3,"GuidelinePoint"],[4,"ImageCodec"],[4,"DataOrBitmap"],[4,"DataLoadState"],[3,"ImageData"],[3,"GlifImage"],[3,"Image"],[13,"Data"],[13,"Bitmap"],[3,"GlifMatrix"],[3,"Affine"],[4,"GlifOutlineType"],[4,"OutlineType"],[8,"IntoGlifPoints"],[3,"GlifOutline"],[8,"FromKurbo"],[8,"IntoKurbo"],[8,"QuadToCubic"],[8,"RefigurePointTypes"],[8,"RoundToInt"],[8,"Reverse"],[8,"GenericPrevNext"],[8,"PrevNext"],[4,"End"],[8,"CheckSmooth"],[8,"State"],[4,"Mend"],[4,"FloatClass"],[4,"Level"],[3,"Pedantry"],[4,"WhichHandle"],[4,"Handle"],[4,"PointType"],[3,"KurboPoint"],[3,"Point"],[3,"GlifPoint"],[8,"FromKurboPoint"],[8,"ToKurboPoint"],[13,"At"],[3,"GlifString"],[3,"GlifStringLenOne"],[8,"ToGlifString"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};